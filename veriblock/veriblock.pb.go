// Code generated by protoc-gen-go. DO NOT EDIT.
// source: veriblock.proto

/*
Package veriblock is a generated protocol buffer package.

It is generated from these files:
	veriblock.proto

It has these top-level messages:
	Output
	Paging
	NumericFilter
	Endpoint
	MultisigSlot
	MultisigBundle
	SignedTransaction
	SignedMultisigTransaction
	CoinbaseTransaction
	BitcoinBlockHeader
	PoPEndorsementInfo
	StandardAddress
	TroubleshootPoPTransactionsRequest
	AddressSet
	TransactionSet
	TroubleshootPoPTransactionsReply
	PoPTransactionProblemReport
	GetPoPEndorsementsInfoRequest
	GetPoPEndorsementsInfoReply
	GetProtectedChildrenRequest
	GetProtectedChildrenReply
	GetProtectingParentsRequest
	GetProtectingParentsReply
	Transaction
	UnsignedMultisigTransactionWithIndex
	TransactionUnion
	VBKTransactionWithContext
	VBKMerklePath
	TransactionMeta
	WalletTransaction
	PoPDatastore
	AltchainIdAltchainHeaderEndorsementCountsPair
	BitcoinHeaderVeriBlockEndorsementCountsPair
	VeriBlockHeaderEndorsementCountPair
	AltchainHeaderEndorsementCountPair
	BlockContentMetapackage
	BlockSummary
	LightBlockSummary
	Block
	BlockHeader
	FilteredBlock
	LightVBKBlock
	BlockFilter
	GetBlocksRequest
	Result
	ProtocolReply
	GetBlocksReply
	BackupWalletRequest
	BackupWalletReply
	ImportWalletRequest
	ImportWalletReply
	Announce
	NodeInfo
	AddBlocksRequest
	BlockInfo
	AddTransactionsReply
	Heartbeat
	BlockQuery
	BlockQueryReply
	SyncRequest
	NetworkInfoRequest
	NetworkInfoReply
	Acknowledgement
	AdvertiseBlocks
	TransactionAnnounce
	AdvertiseTransaction
	BlockRequest
	TransactionRequest
	KeystoneQuery
	NotFound
	CreateFilter
	AddFilter
	ClearFilter
	Event
	NodeRequest
	StartPoolRequest
	StartPoolReply
	StopPoolRequest
	StopPoolReply
	RestartPoolWebServerRequest
	RestartPoolWebServerReply
	GetPopRequest
	GetPopReply
	GetInfoRequest
	GetDiagnosticInfoRequest
	GetBalanceRequest
	GetBalanceReply
	SubmitPopRequest
	PoPEndorsement
	GetEndorsementsOfBlockRequest
	GetEndorsementsOfBlockReply
	SendCoinsRequest
	SendCoinsReply
	SendAltChainEndorsementRequest
	SendAltChainEndorsementReply
	GetHistoryRequest
	AddressHistory
	GetHistoryReply
	GetPeerInfoRequest
	NodeHeight
	GetPeerInfoReply
	GetBlockchainsRequest
	GetBlockchainsReply
	SubmitBlocksRequest
	GetBlockTimesRequest
	GetBlockTimesReply
	StartSoloPoolRequest
	StartSoloPoolReply
	GetSignatureIndexRequest
	SetDefaultAddressRequest
	AddressSignatureIndexes
	GetSignatureIndexReply
	SetDefaultAddressReply
	GetTransactionsRequest
	TransactionInfo
	GetTransactionsReply
	SetTransactionFeeRequest
	DumpPrivateKeyRequest
	DumpPrivateKeyReply
	ImportPrivateKeyRequest
	ImportPrivateKeyReply
	GetLastBitcoinBlockRequest
	GetLastBlockRequest
	GetLastBitcoinBlockReply
	GetLastBlockReply
	ListBlocksSinceRequest
	ListBlocksSinceReply
	SubmitTransactionsRequest
	GetInfoReply
	GetDiagnosticInfoReply
	GetPendingTransactionsRequest
	GetPendingTransactionsReply
	GetNewAddressRequest
	GetNewAddressReply
	ValidateAddressRequest
	ValidateAddressReply
	GenerateMultisigAddressRequest
	GenerateMultisigAddressReply
	MakeUnsignedMultisigTxRequest
	MakeUnsignedMultisigTxReply
	SubmitMultisigTxRequest
	SubmitMultisigTxReply
	SignMessageRequest
	SignMessageReply
	GetBlockTemplateRequest
	CandidateTransaction
	GetBlockTemplateReply
	SetBanRequest
	SetAllowedRequest
	BlackListInfo
	WhiteListInfo
	ListBannedRequest
	ListAllowedRequest
	ListBannedReply
	ListAllowedReply
	ListBannedMinersRequest
	ListBannedMinersReply
	ClearBannedRequest
	ClearBannedMinersRequest
	ClearAllowedRequest
	PingRequest
	PingReply
	GetBitcoinBlockIndexRequest
	GetWalletTransactionsRequest
	GetWalletTransactionsReply
	BlockchainStateInfo
	OperatingStateInfo
	NetworkStateInfo
	GetStateInfoRequest
	GetStateInfoReply
	StopNodeCoreRequest
	RefreshWalletCacheRequest
	EncryptWalletRequest
	DecryptWalletRequest
	UnlockWalletRequest
	LockWalletRequest
*/
package veriblock

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NumericFilter_Operator int32

const (
	NumericFilter_EQUAL                 NumericFilter_Operator = 0
	NumericFilter_LESS_THAN             NumericFilter_Operator = 1
	NumericFilter_LESS_THAN_OR_EQUAL    NumericFilter_Operator = 2
	NumericFilter_GREATER_THAN          NumericFilter_Operator = 3
	NumericFilter_GREATER_THAN_OR_EQUAL NumericFilter_Operator = 4
	NumericFilter_BETWEEN               NumericFilter_Operator = 5
)

var NumericFilter_Operator_name = map[int32]string{
	0: "EQUAL",
	1: "LESS_THAN",
	2: "LESS_THAN_OR_EQUAL",
	3: "GREATER_THAN",
	4: "GREATER_THAN_OR_EQUAL",
	5: "BETWEEN",
}
var NumericFilter_Operator_value = map[string]int32{
	"EQUAL":                 0,
	"LESS_THAN":             1,
	"LESS_THAN_OR_EQUAL":    2,
	"GREATER_THAN":          3,
	"GREATER_THAN_OR_EQUAL": 4,
	"BETWEEN":               5,
}

func (x NumericFilter_Operator) String() string {
	return proto.EnumName(NumericFilter_Operator_name, int32(x))
}
func (NumericFilter_Operator) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type Transaction_Type int32

const (
	Transaction_ZERO_UNUSED    Transaction_Type = 0
	Transaction_STANDARD       Transaction_Type = 1
	Transaction_PROOF_OF_PROOF Transaction_Type = 2
	Transaction_MULTISIG       Transaction_Type = 3
)

var Transaction_Type_name = map[int32]string{
	0: "ZERO_UNUSED",
	1: "STANDARD",
	2: "PROOF_OF_PROOF",
	3: "MULTISIG",
}
var Transaction_Type_value = map[string]int32{
	"ZERO_UNUSED":    0,
	"STANDARD":       1,
	"PROOF_OF_PROOF": 2,
	"MULTISIG":       3,
}

func (x Transaction_Type) String() string {
	return proto.EnumName(Transaction_Type_name, int32(x))
}
func (Transaction_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

type TransactionMeta_Status int32

const (
	TransactionMeta_UNKNOWN   TransactionMeta_Status = 0
	TransactionMeta_PENDING   TransactionMeta_Status = 1
	TransactionMeta_CONFIRMED TransactionMeta_Status = 2
	TransactionMeta_DEAD      TransactionMeta_Status = 3
)

var TransactionMeta_Status_name = map[int32]string{
	0: "UNKNOWN",
	1: "PENDING",
	2: "CONFIRMED",
	3: "DEAD",
}
var TransactionMeta_Status_value = map[string]int32{
	"UNKNOWN":   0,
	"PENDING":   1,
	"CONFIRMED": 2,
	"DEAD":      3,
}

func (x TransactionMeta_Status) String() string {
	return proto.EnumName(TransactionMeta_Status_name, int32(x))
}
func (TransactionMeta_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{28, 0} }

type WalletTransaction_Type int32

const (
	WalletTransaction_NOT_SET           WalletTransaction_Type = 0
	WalletTransaction_POW_COINBASE      WalletTransaction_Type = 1
	WalletTransaction_POP_COINBASE      WalletTransaction_Type = 2
	WalletTransaction_BOTH_COINBASE     WalletTransaction_Type = 3
	WalletTransaction_SENT              WalletTransaction_Type = 4
	WalletTransaction_RECEIVED          WalletTransaction_Type = 5
	WalletTransaction_SENT_AND_RECEIVED WalletTransaction_Type = 6
	WalletTransaction_POP               WalletTransaction_Type = 7
)

var WalletTransaction_Type_name = map[int32]string{
	0: "NOT_SET",
	1: "POW_COINBASE",
	2: "POP_COINBASE",
	3: "BOTH_COINBASE",
	4: "SENT",
	5: "RECEIVED",
	6: "SENT_AND_RECEIVED",
	7: "POP",
}
var WalletTransaction_Type_value = map[string]int32{
	"NOT_SET":           0,
	"POW_COINBASE":      1,
	"POP_COINBASE":      2,
	"BOTH_COINBASE":     3,
	"SENT":              4,
	"RECEIVED":          5,
	"SENT_AND_RECEIVED": 6,
	"POP":               7,
}

func (x WalletTransaction_Type) String() string {
	return proto.EnumName(WalletTransaction_Type_name, int32(x))
}
func (WalletTransaction_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{29, 0} }

type TransactionAnnounce_Type int32

const (
	TransactionAnnounce_NORMAL         TransactionAnnounce_Type = 0
	TransactionAnnounce_PROOF_OF_PROOF TransactionAnnounce_Type = 1
)

var TransactionAnnounce_Type_name = map[int32]string{
	0: "NORMAL",
	1: "PROOF_OF_PROOF",
}
var TransactionAnnounce_Type_value = map[string]int32{
	"NORMAL":         0,
	"PROOF_OF_PROOF": 1,
}

func (x TransactionAnnounce_Type) String() string {
	return proto.EnumName(TransactionAnnounce_Type_name, int32(x))
}
func (TransactionAnnounce_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{64, 0} }

type NotFound_Type int32

const (
	NotFound_BLOCK NotFound_Type = 0
	NotFound_TX    NotFound_Type = 1
)

var NotFound_Type_name = map[int32]string{
	0: "BLOCK",
	1: "TX",
}
var NotFound_Type_value = map[string]int32{
	"BLOCK": 0,
	"TX":    1,
}

func (x NotFound_Type) String() string {
	return proto.EnumName(NotFound_Type_name, int32(x))
}
func (NotFound_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{69, 0} }

type SetBanRequest_Command int32

const (
	SetBanRequest_ADD    SetBanRequest_Command = 0
	SetBanRequest_REMOVE SetBanRequest_Command = 1
)

var SetBanRequest_Command_name = map[int32]string{
	0: "ADD",
	1: "REMOVE",
}
var SetBanRequest_Command_value = map[string]int32{
	"ADD":    0,
	"REMOVE": 1,
}

func (x SetBanRequest_Command) String() string {
	return proto.EnumName(SetBanRequest_Command_name, int32(x))
}
func (SetBanRequest_Command) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{147, 0} }

type SetAllowedRequest_Command int32

const (
	SetAllowedRequest_ADD    SetAllowedRequest_Command = 0
	SetAllowedRequest_REMOVE SetAllowedRequest_Command = 1
)

var SetAllowedRequest_Command_name = map[int32]string{
	0: "ADD",
	1: "REMOVE",
}
var SetAllowedRequest_Command_value = map[string]int32{
	"ADD":    0,
	"REMOVE": 1,
}

func (x SetAllowedRequest_Command) String() string {
	return proto.EnumName(SetAllowedRequest_Command_name, int32(x))
}
func (SetAllowedRequest_Command) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{148, 0}
}

type BlackListInfo_Type int32

const (
	BlackListInfo_ADDRESS BlackListInfo_Type = 0
	BlackListInfo_NETMASK BlackListInfo_Type = 1
	BlackListInfo_CIDR    BlackListInfo_Type = 2
)

var BlackListInfo_Type_name = map[int32]string{
	0: "ADDRESS",
	1: "NETMASK",
	2: "CIDR",
}
var BlackListInfo_Type_value = map[string]int32{
	"ADDRESS": 0,
	"NETMASK": 1,
	"CIDR":    2,
}

func (x BlackListInfo_Type) String() string {
	return proto.EnumName(BlackListInfo_Type_name, int32(x))
}
func (BlackListInfo_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{149, 0} }

type WhiteListInfo_Type int32

const (
	WhiteListInfo_ADDRESS WhiteListInfo_Type = 0
	WhiteListInfo_NETMASK WhiteListInfo_Type = 1
	WhiteListInfo_CIDR    WhiteListInfo_Type = 2
)

var WhiteListInfo_Type_name = map[int32]string{
	0: "ADDRESS",
	1: "NETMASK",
	2: "CIDR",
}
var WhiteListInfo_Type_value = map[string]int32{
	"ADDRESS": 0,
	"NETMASK": 1,
	"CIDR":    2,
}

func (x WhiteListInfo_Type) String() string {
	return proto.EnumName(WhiteListInfo_Type_name, int32(x))
}
func (WhiteListInfo_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{150, 0} }

type GetWalletTransactionsRequest_Type int32

const (
	GetWalletTransactionsRequest_LIST  GetWalletTransactionsRequest_Type = 0
	GetWalletTransactionsRequest_QUERY GetWalletTransactionsRequest_Type = 1
)

var GetWalletTransactionsRequest_Type_name = map[int32]string{
	0: "LIST",
	1: "QUERY",
}
var GetWalletTransactionsRequest_Type_value = map[string]int32{
	"LIST":  0,
	"QUERY": 1,
}

func (x GetWalletTransactionsRequest_Type) String() string {
	return proto.EnumName(GetWalletTransactionsRequest_Type_name, int32(x))
}
func (GetWalletTransactionsRequest_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{163, 0}
}

type GetWalletTransactionsReply_CacheState int32

const (
	GetWalletTransactionsReply_UNKNOWN  GetWalletTransactionsReply_CacheState = 0
	GetWalletTransactionsReply_BUILDING GetWalletTransactionsReply_CacheState = 1
	GetWalletTransactionsReply_CURRENT  GetWalletTransactionsReply_CacheState = 2
	GetWalletTransactionsReply_ERRORED  GetWalletTransactionsReply_CacheState = 3
)

var GetWalletTransactionsReply_CacheState_name = map[int32]string{
	0: "UNKNOWN",
	1: "BUILDING",
	2: "CURRENT",
	3: "ERRORED",
}
var GetWalletTransactionsReply_CacheState_value = map[string]int32{
	"UNKNOWN":  0,
	"BUILDING": 1,
	"CURRENT":  2,
	"ERRORED":  3,
}

func (x GetWalletTransactionsReply_CacheState) String() string {
	return proto.EnumName(GetWalletTransactionsReply_CacheState_name, int32(x))
}
func (GetWalletTransactionsReply_CacheState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{164, 0}
}

type BlockchainStateInfo_State int32

const (
	BlockchainStateInfo_LOADING BlockchainStateInfo_State = 0
	BlockchainStateInfo_NORMAL  BlockchainStateInfo_State = 1
	BlockchainStateInfo_PAUSED  BlockchainStateInfo_State = 3
	BlockchainStateInfo_STALE   BlockchainStateInfo_State = 4
	BlockchainStateInfo_LOADED  BlockchainStateInfo_State = 5
)

var BlockchainStateInfo_State_name = map[int32]string{
	0: "LOADING",
	1: "NORMAL",
	3: "PAUSED",
	4: "STALE",
	5: "LOADED",
}
var BlockchainStateInfo_State_value = map[string]int32{
	"LOADING": 0,
	"NORMAL":  1,
	"PAUSED":  3,
	"STALE":   4,
	"LOADED":  5,
}

func (x BlockchainStateInfo_State) String() string {
	return proto.EnumName(BlockchainStateInfo_State_name, int32(x))
}
func (BlockchainStateInfo_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{165, 0}
}

type OperatingStateInfo_State int32

const (
	OperatingStateInfo_STARTED      OperatingStateInfo_State = 0
	OperatingStateInfo_INITIALIZING OperatingStateInfo_State = 1
	OperatingStateInfo_RUNNING      OperatingStateInfo_State = 2
	OperatingStateInfo_TERMINATING  OperatingStateInfo_State = 3
)

var OperatingStateInfo_State_name = map[int32]string{
	0: "STARTED",
	1: "INITIALIZING",
	2: "RUNNING",
	3: "TERMINATING",
}
var OperatingStateInfo_State_value = map[string]int32{
	"STARTED":      0,
	"INITIALIZING": 1,
	"RUNNING":      2,
	"TERMINATING":  3,
}

func (x OperatingStateInfo_State) String() string {
	return proto.EnumName(OperatingStateInfo_State_name, int32(x))
}
func (OperatingStateInfo_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{166, 0}
}

type NetworkStateInfo_State int32

const (
	NetworkStateInfo_DISCONNECTED NetworkStateInfo_State = 0
	NetworkStateInfo_CONNECTED    NetworkStateInfo_State = 1
)

var NetworkStateInfo_State_name = map[int32]string{
	0: "DISCONNECTED",
	1: "CONNECTED",
}
var NetworkStateInfo_State_value = map[string]int32{
	"DISCONNECTED": 0,
	"CONNECTED":    1,
}

func (x NetworkStateInfo_State) String() string {
	return proto.EnumName(NetworkStateInfo_State_name, int32(x))
}
func (NetworkStateInfo_State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{167, 0} }

type Output struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount  int64  `protobuf:"varint,2,opt,name=amount" json:"amount,omitempty"`
}

func (m *Output) Reset()                    { *m = Output{} }
func (m *Output) String() string            { return proto.CompactTextString(m) }
func (*Output) ProtoMessage()               {}
func (*Output) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Output) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Output) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type Paging struct {
	PageNumber     int32 `protobuf:"varint,1,opt,name=page_number,json=pageNumber" json:"page_number,omitempty"`
	ResultsPerPage int32 `protobuf:"varint,2,opt,name=results_per_page,json=resultsPerPage" json:"results_per_page,omitempty"`
}

func (m *Paging) Reset()                    { *m = Paging{} }
func (m *Paging) String() string            { return proto.CompactTextString(m) }
func (*Paging) ProtoMessage()               {}
func (*Paging) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Paging) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *Paging) GetResultsPerPage() int32 {
	if m != nil {
		return m.ResultsPerPage
	}
	return 0
}

type NumericFilter struct {
	Operator       NumericFilter_Operator `protobuf:"varint,1,opt,name=operator,enum=core.NumericFilter_Operator" json:"operator,omitempty"`
	Value          int64                  `protobuf:"zigzag64,2,opt,name=value" json:"value,omitempty"`
	SecondaryValue int64                  `protobuf:"zigzag64,3,opt,name=secondary_value,json=secondaryValue" json:"secondary_value,omitempty"`
}

func (m *NumericFilter) Reset()                    { *m = NumericFilter{} }
func (m *NumericFilter) String() string            { return proto.CompactTextString(m) }
func (*NumericFilter) ProtoMessage()               {}
func (*NumericFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NumericFilter) GetOperator() NumericFilter_Operator {
	if m != nil {
		return m.Operator
	}
	return NumericFilter_EQUAL
}

func (m *NumericFilter) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *NumericFilter) GetSecondaryValue() int64 {
	if m != nil {
		return m.SecondaryValue
	}
	return 0
}

type Endpoint struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Endpoint) Reset()                    { *m = Endpoint{} }
func (m *Endpoint) String() string            { return proto.CompactTextString(m) }
func (*Endpoint) ProtoMessage()               {}
func (*Endpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Endpoint) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Endpoint) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type MultisigSlot struct {
	Populated    bool   `protobuf:"varint,1,opt,name=populated" json:"populated,omitempty"`
	Signature    []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKey    []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	OwnerAddress []byte `protobuf:"bytes,4,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty"`
}

func (m *MultisigSlot) Reset()                    { *m = MultisigSlot{} }
func (m *MultisigSlot) String() string            { return proto.CompactTextString(m) }
func (*MultisigSlot) ProtoMessage()               {}
func (*MultisigSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MultisigSlot) GetPopulated() bool {
	if m != nil {
		return m.Populated
	}
	return false
}

func (m *MultisigSlot) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MultisigSlot) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *MultisigSlot) GetOwnerAddress() []byte {
	if m != nil {
		return m.OwnerAddress
	}
	return nil
}

type MultisigBundle struct {
	Slots []*MultisigSlot `protobuf:"bytes,1,rep,name=slots" json:"slots,omitempty"`
}

func (m *MultisigBundle) Reset()                    { *m = MultisigBundle{} }
func (m *MultisigBundle) String() string            { return proto.CompactTextString(m) }
func (*MultisigBundle) ProtoMessage()               {}
func (*MultisigBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MultisigBundle) GetSlots() []*MultisigSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

type SignedTransaction struct {
	Signature      []byte       `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	PublicKey      []byte       `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	SignatureIndex int64        `protobuf:"varint,3,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"`
	Transaction    *Transaction `protobuf:"bytes,4,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *SignedTransaction) Reset()                    { *m = SignedTransaction{} }
func (m *SignedTransaction) String() string            { return proto.CompactTextString(m) }
func (*SignedTransaction) ProtoMessage()               {}
func (*SignedTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SignedTransaction) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SignedTransaction) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *SignedTransaction) GetSignatureIndex() int64 {
	if m != nil {
		return m.SignatureIndex
	}
	return 0
}

func (m *SignedTransaction) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type SignedMultisigTransaction struct {
	SignatureBundle *MultisigBundle `protobuf:"bytes,1,opt,name=signature_bundle,json=signatureBundle" json:"signature_bundle,omitempty"`
	Transaction     *Transaction    `protobuf:"bytes,2,opt,name=transaction" json:"transaction,omitempty"`
	SignatureIndex  int64           `protobuf:"varint,3,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"`
}

func (m *SignedMultisigTransaction) Reset()                    { *m = SignedMultisigTransaction{} }
func (m *SignedMultisigTransaction) String() string            { return proto.CompactTextString(m) }
func (*SignedMultisigTransaction) ProtoMessage()               {}
func (*SignedMultisigTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SignedMultisigTransaction) GetSignatureBundle() *MultisigBundle {
	if m != nil {
		return m.SignatureBundle
	}
	return nil
}

func (m *SignedMultisigTransaction) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *SignedMultisigTransaction) GetSignatureIndex() int64 {
	if m != nil {
		return m.SignatureIndex
	}
	return 0
}

type CoinbaseTransaction struct {
	PowCoinbaseAmount int64     `protobuf:"varint,1,opt,name=pow_coinbase_amount,json=powCoinbaseAmount" json:"pow_coinbase_amount,omitempty"`
	PopCoinbaseAmount int64     `protobuf:"varint,2,opt,name=pop_coinbase_amount,json=popCoinbaseAmount" json:"pop_coinbase_amount,omitempty"`
	PowFeeShare       int64     `protobuf:"varint,3,opt,name=pow_fee_share,json=powFeeShare" json:"pow_fee_share,omitempty"`
	PopFeeShare       int64     `protobuf:"varint,4,opt,name=pop_fee_share,json=popFeeShare" json:"pop_fee_share,omitempty"`
	PowOutputs        []*Output `protobuf:"bytes,5,rep,name=pow_outputs,json=powOutputs" json:"pow_outputs,omitempty"`
	PopOutputs        []*Output `protobuf:"bytes,6,rep,name=pop_outputs,json=popOutputs" json:"pop_outputs,omitempty"`
	BlockHeight       int32     `protobuf:"varint,7,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	TxId              []byte    `protobuf:"bytes,8,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *CoinbaseTransaction) Reset()                    { *m = CoinbaseTransaction{} }
func (m *CoinbaseTransaction) String() string            { return proto.CompactTextString(m) }
func (*CoinbaseTransaction) ProtoMessage()               {}
func (*CoinbaseTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CoinbaseTransaction) GetPowCoinbaseAmount() int64 {
	if m != nil {
		return m.PowCoinbaseAmount
	}
	return 0
}

func (m *CoinbaseTransaction) GetPopCoinbaseAmount() int64 {
	if m != nil {
		return m.PopCoinbaseAmount
	}
	return 0
}

func (m *CoinbaseTransaction) GetPowFeeShare() int64 {
	if m != nil {
		return m.PowFeeShare
	}
	return 0
}

func (m *CoinbaseTransaction) GetPopFeeShare() int64 {
	if m != nil {
		return m.PopFeeShare
	}
	return 0
}

func (m *CoinbaseTransaction) GetPowOutputs() []*Output {
	if m != nil {
		return m.PowOutputs
	}
	return nil
}

func (m *CoinbaseTransaction) GetPopOutputs() []*Output {
	if m != nil {
		return m.PopOutputs
	}
	return nil
}

func (m *CoinbaseTransaction) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *CoinbaseTransaction) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

type BitcoinBlockHeader struct {
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *BitcoinBlockHeader) Reset()                    { *m = BitcoinBlockHeader{} }
func (m *BitcoinBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BitcoinBlockHeader) ProtoMessage()               {}
func (*BitcoinBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *BitcoinBlockHeader) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

type PoPEndorsementInfo struct {
	MinerAddress                  []byte `protobuf:"bytes,1,opt,name=miner_address,json=minerAddress,proto3" json:"miner_address,omitempty"`
	EndorsedVeriblockBlockHash    []byte `protobuf:"bytes,2,opt,name=endorsed_veriblock_block_hash,json=endorsedVeriblockBlockHash,proto3" json:"endorsed_veriblock_block_hash,omitempty"`
	ContainedInVeriblockBlockHash []byte `protobuf:"bytes,3,opt,name=contained_in_veriblock_block_hash,json=containedInVeriblockBlockHash,proto3" json:"contained_in_veriblock_block_hash,omitempty"`
	VeriblockTxId                 []byte `protobuf:"bytes,4,opt,name=veriblock_tx_id,json=veriblockTxId,proto3" json:"veriblock_tx_id,omitempty"`
	BitcoinTransaction            []byte `protobuf:"bytes,5,opt,name=bitcoin_transaction,json=bitcoinTransaction,proto3" json:"bitcoin_transaction,omitempty"`
	BitcoinTxId                   []byte `protobuf:"bytes,6,opt,name=bitcoin_tx_id,json=bitcoinTxId,proto3" json:"bitcoin_tx_id,omitempty"`
	BitcoinBlockHeader            []byte `protobuf:"bytes,7,opt,name=bitcoin_block_header,json=bitcoinBlockHeader,proto3" json:"bitcoin_block_header,omitempty"`
	BitcoinBlockHeaderHash        []byte `protobuf:"bytes,8,opt,name=bitcoin_block_header_hash,json=bitcoinBlockHeaderHash,proto3" json:"bitcoin_block_header_hash,omitempty"`
	Reward                        int64  `protobuf:"varint,9,opt,name=reward" json:"reward,omitempty"`
	Finalized                     bool   `protobuf:"varint,10,opt,name=finalized" json:"finalized,omitempty"`
	EndorsedBlockNumber           int32  `protobuf:"varint,11,opt,name=endorsed_block_number,json=endorsedBlockNumber" json:"endorsed_block_number,omitempty"`
}

func (m *PoPEndorsementInfo) Reset()                    { *m = PoPEndorsementInfo{} }
func (m *PoPEndorsementInfo) String() string            { return proto.CompactTextString(m) }
func (*PoPEndorsementInfo) ProtoMessage()               {}
func (*PoPEndorsementInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PoPEndorsementInfo) GetMinerAddress() []byte {
	if m != nil {
		return m.MinerAddress
	}
	return nil
}

func (m *PoPEndorsementInfo) GetEndorsedVeriblockBlockHash() []byte {
	if m != nil {
		return m.EndorsedVeriblockBlockHash
	}
	return nil
}

func (m *PoPEndorsementInfo) GetContainedInVeriblockBlockHash() []byte {
	if m != nil {
		return m.ContainedInVeriblockBlockHash
	}
	return nil
}

func (m *PoPEndorsementInfo) GetVeriblockTxId() []byte {
	if m != nil {
		return m.VeriblockTxId
	}
	return nil
}

func (m *PoPEndorsementInfo) GetBitcoinTransaction() []byte {
	if m != nil {
		return m.BitcoinTransaction
	}
	return nil
}

func (m *PoPEndorsementInfo) GetBitcoinTxId() []byte {
	if m != nil {
		return m.BitcoinTxId
	}
	return nil
}

func (m *PoPEndorsementInfo) GetBitcoinBlockHeader() []byte {
	if m != nil {
		return m.BitcoinBlockHeader
	}
	return nil
}

func (m *PoPEndorsementInfo) GetBitcoinBlockHeaderHash() []byte {
	if m != nil {
		return m.BitcoinBlockHeaderHash
	}
	return nil
}

func (m *PoPEndorsementInfo) GetReward() int64 {
	if m != nil {
		return m.Reward
	}
	return 0
}

func (m *PoPEndorsementInfo) GetFinalized() bool {
	if m != nil {
		return m.Finalized
	}
	return false
}

func (m *PoPEndorsementInfo) GetEndorsedBlockNumber() int32 {
	if m != nil {
		return m.EndorsedBlockNumber
	}
	return 0
}

type StandardAddress struct {
	StandardAddress []byte `protobuf:"bytes,1,opt,name=standard_address,json=standardAddress,proto3" json:"standard_address,omitempty"`
}

func (m *StandardAddress) Reset()                    { *m = StandardAddress{} }
func (m *StandardAddress) String() string            { return proto.CompactTextString(m) }
func (*StandardAddress) ProtoMessage()               {}
func (*StandardAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StandardAddress) GetStandardAddress() []byte {
	if m != nil {
		return m.StandardAddress
	}
	return nil
}

type TroubleshootPoPTransactionsRequest struct {
	OnlyFailures bool  `protobuf:"varint,1,opt,name=only_failures,json=onlyFailures" json:"only_failures,omitempty"`
	SearchLength int32 `protobuf:"varint,2,opt,name=search_length,json=searchLength" json:"search_length,omitempty"`
	// Types that are valid to be assigned to SearchParamater:
	//	*TroubleshootPoPTransactionsRequest_Addresses
	//	*TroubleshootPoPTransactionsRequest_Transactions
	SearchParamater isTroubleshootPoPTransactionsRequest_SearchParamater `protobuf_oneof:"search_paramater"`
}

func (m *TroubleshootPoPTransactionsRequest) Reset()         { *m = TroubleshootPoPTransactionsRequest{} }
func (m *TroubleshootPoPTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*TroubleshootPoPTransactionsRequest) ProtoMessage()    {}
func (*TroubleshootPoPTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

type isTroubleshootPoPTransactionsRequest_SearchParamater interface {
	isTroubleshootPoPTransactionsRequest_SearchParamater()
}

type TroubleshootPoPTransactionsRequest_Addresses struct {
	Addresses *AddressSet `protobuf:"bytes,3,opt,name=addresses,oneof"`
}
type TroubleshootPoPTransactionsRequest_Transactions struct {
	Transactions *TransactionSet `protobuf:"bytes,4,opt,name=transactions,oneof"`
}

func (*TroubleshootPoPTransactionsRequest_Addresses) isTroubleshootPoPTransactionsRequest_SearchParamater() {
}
func (*TroubleshootPoPTransactionsRequest_Transactions) isTroubleshootPoPTransactionsRequest_SearchParamater() {
}

func (m *TroubleshootPoPTransactionsRequest) GetSearchParamater() isTroubleshootPoPTransactionsRequest_SearchParamater {
	if m != nil {
		return m.SearchParamater
	}
	return nil
}

func (m *TroubleshootPoPTransactionsRequest) GetOnlyFailures() bool {
	if m != nil {
		return m.OnlyFailures
	}
	return false
}

func (m *TroubleshootPoPTransactionsRequest) GetSearchLength() int32 {
	if m != nil {
		return m.SearchLength
	}
	return 0
}

func (m *TroubleshootPoPTransactionsRequest) GetAddresses() *AddressSet {
	if x, ok := m.GetSearchParamater().(*TroubleshootPoPTransactionsRequest_Addresses); ok {
		return x.Addresses
	}
	return nil
}

func (m *TroubleshootPoPTransactionsRequest) GetTransactions() *TransactionSet {
	if x, ok := m.GetSearchParamater().(*TroubleshootPoPTransactionsRequest_Transactions); ok {
		return x.Transactions
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TroubleshootPoPTransactionsRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TroubleshootPoPTransactionsRequest_OneofMarshaler, _TroubleshootPoPTransactionsRequest_OneofUnmarshaler, _TroubleshootPoPTransactionsRequest_OneofSizer, []interface{}{
		(*TroubleshootPoPTransactionsRequest_Addresses)(nil),
		(*TroubleshootPoPTransactionsRequest_Transactions)(nil),
	}
}

func _TroubleshootPoPTransactionsRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TroubleshootPoPTransactionsRequest)
	// search_paramater
	switch x := m.SearchParamater.(type) {
	case *TroubleshootPoPTransactionsRequest_Addresses:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Addresses); err != nil {
			return err
		}
	case *TroubleshootPoPTransactionsRequest_Transactions:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transactions); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TroubleshootPoPTransactionsRequest.SearchParamater has unexpected type %T", x)
	}
	return nil
}

func _TroubleshootPoPTransactionsRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TroubleshootPoPTransactionsRequest)
	switch tag {
	case 3: // search_paramater.addresses
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddressSet)
		err := b.DecodeMessage(msg)
		m.SearchParamater = &TroubleshootPoPTransactionsRequest_Addresses{msg}
		return true, err
	case 4: // search_paramater.transactions
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransactionSet)
		err := b.DecodeMessage(msg)
		m.SearchParamater = &TroubleshootPoPTransactionsRequest_Transactions{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TroubleshootPoPTransactionsRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TroubleshootPoPTransactionsRequest)
	// search_paramater
	switch x := m.SearchParamater.(type) {
	case *TroubleshootPoPTransactionsRequest_Addresses:
		s := proto.Size(x.Addresses)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TroubleshootPoPTransactionsRequest_Transactions:
		s := proto.Size(x.Transactions)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AddressSet struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *AddressSet) Reset()                    { *m = AddressSet{} }
func (m *AddressSet) String() string            { return proto.CompactTextString(m) }
func (*AddressSet) ProtoMessage()               {}
func (*AddressSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AddressSet) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type TransactionSet struct {
	Txids [][]byte `protobuf:"bytes,1,rep,name=txids,proto3" json:"txids,omitempty"`
}

func (m *TransactionSet) Reset()                    { *m = TransactionSet{} }
func (m *TransactionSet) String() string            { return proto.CompactTextString(m) }
func (*TransactionSet) ProtoMessage()               {}
func (*TransactionSet) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *TransactionSet) GetTxids() [][]byte {
	if m != nil {
		return m.Txids
	}
	return nil
}

type TroubleshootPoPTransactionsReply struct {
	Success           bool                           `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results           []*Result                      `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	PopProblemReports []*PoPTransactionProblemReport `protobuf:"bytes,3,rep,name=popProblemReports" json:"popProblemReports,omitempty"`
}

func (m *TroubleshootPoPTransactionsReply) Reset()         { *m = TroubleshootPoPTransactionsReply{} }
func (m *TroubleshootPoPTransactionsReply) String() string { return proto.CompactTextString(m) }
func (*TroubleshootPoPTransactionsReply) ProtoMessage()    {}
func (*TroubleshootPoPTransactionsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{15}
}

func (m *TroubleshootPoPTransactionsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *TroubleshootPoPTransactionsReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *TroubleshootPoPTransactionsReply) GetPopProblemReports() []*PoPTransactionProblemReport {
	if m != nil {
		return m.PopProblemReports
	}
	return nil
}

type PoPTransactionProblemReport struct {
	Address                                       []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Txid                                          []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`
	EndorsedVbkBlockHash                          []byte `protobuf:"bytes,3,opt,name=endorsed_vbk_block_hash,json=endorsedVbkBlockHash,proto3" json:"endorsed_vbk_block_hash,omitempty"`
	EndorsedVbkBlockIndex                         int32  `protobuf:"varint,4,opt,name=endorsed_vbk_block_index,json=endorsedVbkBlockIndex" json:"endorsed_vbk_block_index,omitempty"`
	IncludedInVbkBlockHash                        []byte `protobuf:"bytes,5,opt,name=included_in_vbk_block_hash,json=includedInVbkBlockHash,proto3" json:"included_in_vbk_block_hash,omitempty"`
	IncludedInVbkBlockIndex                       int32  `protobuf:"varint,6,opt,name=included_in_vbk_block_index,json=includedInVbkBlockIndex" json:"included_in_vbk_block_index,omitempty"`
	PopPayoutVbkBlockHash                         []byte `protobuf:"bytes,7,opt,name=pop_payout_vbk_block_hash,json=popPayoutVbkBlockHash,proto3" json:"pop_payout_vbk_block_hash,omitempty"`
	PopPayoutVbkBlockIndex                        int32  `protobuf:"varint,8,opt,name=pop_payout_vbk_block_index,json=popPayoutVbkBlockIndex" json:"pop_payout_vbk_block_index,omitempty"`
	PaidOutInPopPayoutVbkBlock                    bool   `protobuf:"varint,9,opt,name=paid_out_in_pop_payout_vbk_block,json=paidOutInPopPayoutVbkBlock" json:"paid_out_in_pop_payout_vbk_block,omitempty"`
	PopPayoutVbkAmount                            int64  `protobuf:"varint,10,opt,name=pop_payout_vbk_amount,json=popPayoutVbkAmount" json:"pop_payout_vbk_amount,omitempty"`
	BitcoinTxid                                   []byte `protobuf:"bytes,11,opt,name=bitcoin_txid,json=bitcoinTxid,proto3" json:"bitcoin_txid,omitempty"`
	IncludedInBtcBlockHash                        []byte `protobuf:"bytes,12,opt,name=included_in_btc_block_hash,json=includedInBtcBlockHash,proto3" json:"included_in_btc_block_hash,omitempty"`
	IncludedInBtcBlockIndex                       int32  `protobuf:"varint,13,opt,name=included_in_btc_block_index,json=includedInBtcBlockIndex" json:"included_in_btc_block_index,omitempty"`
	EndorsedVbkBlockInMainChain                   bool   `protobuf:"varint,14,opt,name=endorsed_vbk_block_in_main_chain,json=endorsedVbkBlockInMainChain" json:"endorsed_vbk_block_in_main_chain,omitempty"`
	IncludedInVbkBlockInMainChain                 bool   `protobuf:"varint,15,opt,name=included_in_vbk_block_in_main_chain,json=includedInVbkBlockInMainChain" json:"included_in_vbk_block_in_main_chain,omitempty"`
	IncludedInBtcBlockInMainChain                 bool   `protobuf:"varint,16,opt,name=included_in_btc_block_in_main_chain,json=includedInBtcBlockInMainChain" json:"included_in_btc_block_in_main_chain,omitempty"`
	FirstBtcBlockOfEquivalentPopEndorsementsIndex int32  `protobuf:"varint,17,opt,name=first_btc_block_of_equivalent_pop_endorsements_index,json=firstBtcBlockOfEquivalentPopEndorsementsIndex" json:"first_btc_block_of_equivalent_pop_endorsements_index,omitempty"`
	CurrentBlockHeight                            int32  `protobuf:"varint,18,opt,name=current_block_height,json=currentBlockHeight" json:"current_block_height,omitempty"`
}

func (m *PoPTransactionProblemReport) Reset()                    { *m = PoPTransactionProblemReport{} }
func (m *PoPTransactionProblemReport) String() string            { return proto.CompactTextString(m) }
func (*PoPTransactionProblemReport) ProtoMessage()               {}
func (*PoPTransactionProblemReport) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PoPTransactionProblemReport) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PoPTransactionProblemReport) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *PoPTransactionProblemReport) GetEndorsedVbkBlockHash() []byte {
	if m != nil {
		return m.EndorsedVbkBlockHash
	}
	return nil
}

func (m *PoPTransactionProblemReport) GetEndorsedVbkBlockIndex() int32 {
	if m != nil {
		return m.EndorsedVbkBlockIndex
	}
	return 0
}

func (m *PoPTransactionProblemReport) GetIncludedInVbkBlockHash() []byte {
	if m != nil {
		return m.IncludedInVbkBlockHash
	}
	return nil
}

func (m *PoPTransactionProblemReport) GetIncludedInVbkBlockIndex() int32 {
	if m != nil {
		return m.IncludedInVbkBlockIndex
	}
	return 0
}

func (m *PoPTransactionProblemReport) GetPopPayoutVbkBlockHash() []byte {
	if m != nil {
		return m.PopPayoutVbkBlockHash
	}
	return nil
}

func (m *PoPTransactionProblemReport) GetPopPayoutVbkBlockIndex() int32 {
	if m != nil {
		return m.PopPayoutVbkBlockIndex
	}
	return 0
}

func (m *PoPTransactionProblemReport) GetPaidOutInPopPayoutVbkBlock() bool {
	if m != nil {
		return m.PaidOutInPopPayoutVbkBlock
	}
	return false
}

func (m *PoPTransactionProblemReport) GetPopPayoutVbkAmount() int64 {
	if m != nil {
		return m.PopPayoutVbkAmount
	}
	return 0
}

func (m *PoPTransactionProblemReport) GetBitcoinTxid() []byte {
	if m != nil {
		return m.BitcoinTxid
	}
	return nil
}

func (m *PoPTransactionProblemReport) GetIncludedInBtcBlockHash() []byte {
	if m != nil {
		return m.IncludedInBtcBlockHash
	}
	return nil
}

func (m *PoPTransactionProblemReport) GetIncludedInBtcBlockIndex() int32 {
	if m != nil {
		return m.IncludedInBtcBlockIndex
	}
	return 0
}

func (m *PoPTransactionProblemReport) GetEndorsedVbkBlockInMainChain() bool {
	if m != nil {
		return m.EndorsedVbkBlockInMainChain
	}
	return false
}

func (m *PoPTransactionProblemReport) GetIncludedInVbkBlockInMainChain() bool {
	if m != nil {
		return m.IncludedInVbkBlockInMainChain
	}
	return false
}

func (m *PoPTransactionProblemReport) GetIncludedInBtcBlockInMainChain() bool {
	if m != nil {
		return m.IncludedInBtcBlockInMainChain
	}
	return false
}

func (m *PoPTransactionProblemReport) GetFirstBtcBlockOfEquivalentPopEndorsementsIndex() int32 {
	if m != nil {
		return m.FirstBtcBlockOfEquivalentPopEndorsementsIndex
	}
	return 0
}

func (m *PoPTransactionProblemReport) GetCurrentBlockHeight() int32 {
	if m != nil {
		return m.CurrentBlockHeight
	}
	return 0
}

type GetPoPEndorsementsInfoRequest struct {
	SearchLength int32              `protobuf:"varint,1,opt,name=search_length,json=searchLength" json:"search_length,omitempty"`
	Addresses    []*StandardAddress `protobuf:"bytes,2,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *GetPoPEndorsementsInfoRequest) Reset()                    { *m = GetPoPEndorsementsInfoRequest{} }
func (m *GetPoPEndorsementsInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPoPEndorsementsInfoRequest) ProtoMessage()               {}
func (*GetPoPEndorsementsInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetPoPEndorsementsInfoRequest) GetSearchLength() int32 {
	if m != nil {
		return m.SearchLength
	}
	return 0
}

func (m *GetPoPEndorsementsInfoRequest) GetAddresses() []*StandardAddress {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type GetPoPEndorsementsInfoReply struct {
	Success         bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results         []*Result             `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	PopEndorsements []*PoPEndorsementInfo `protobuf:"bytes,3,rep,name=pop_endorsements,json=popEndorsements" json:"pop_endorsements,omitempty"`
}

func (m *GetPoPEndorsementsInfoReply) Reset()                    { *m = GetPoPEndorsementsInfoReply{} }
func (m *GetPoPEndorsementsInfoReply) String() string            { return proto.CompactTextString(m) }
func (*GetPoPEndorsementsInfoReply) ProtoMessage()               {}
func (*GetPoPEndorsementsInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *GetPoPEndorsementsInfoReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetPoPEndorsementsInfoReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetPoPEndorsementsInfoReply) GetPopEndorsements() []*PoPEndorsementInfo {
	if m != nil {
		return m.PopEndorsements
	}
	return nil
}

type GetProtectedChildrenRequest struct {
	SearchLength       int32  `protobuf:"varint,1,opt,name=search_length,json=searchLength" json:"search_length,omitempty"`
	VeriblockBlockHash []byte `protobuf:"bytes,2,opt,name=veriblock_block_hash,json=veriblockBlockHash,proto3" json:"veriblock_block_hash,omitempty"`
}

func (m *GetProtectedChildrenRequest) Reset()                    { *m = GetProtectedChildrenRequest{} }
func (m *GetProtectedChildrenRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProtectedChildrenRequest) ProtoMessage()               {}
func (*GetProtectedChildrenRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *GetProtectedChildrenRequest) GetSearchLength() int32 {
	if m != nil {
		return m.SearchLength
	}
	return 0
}

func (m *GetProtectedChildrenRequest) GetVeriblockBlockHash() []byte {
	if m != nil {
		return m.VeriblockBlockHash
	}
	return nil
}

type GetProtectedChildrenReply struct {
	Success         bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results         []*Result             `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	PopEndorsements []*PoPEndorsementInfo `protobuf:"bytes,3,rep,name=pop_endorsements,json=popEndorsements" json:"pop_endorsements,omitempty"`
}

func (m *GetProtectedChildrenReply) Reset()                    { *m = GetProtectedChildrenReply{} }
func (m *GetProtectedChildrenReply) String() string            { return proto.CompactTextString(m) }
func (*GetProtectedChildrenReply) ProtoMessage()               {}
func (*GetProtectedChildrenReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *GetProtectedChildrenReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetProtectedChildrenReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetProtectedChildrenReply) GetPopEndorsements() []*PoPEndorsementInfo {
	if m != nil {
		return m.PopEndorsements
	}
	return nil
}

type GetProtectingParentsRequest struct {
	SearchLength       int32  `protobuf:"varint,1,opt,name=search_length,json=searchLength" json:"search_length,omitempty"`
	VeriblockBlockHash []byte `protobuf:"bytes,2,opt,name=veriblock_block_hash,json=veriblockBlockHash,proto3" json:"veriblock_block_hash,omitempty"`
}

func (m *GetProtectingParentsRequest) Reset()                    { *m = GetProtectingParentsRequest{} }
func (m *GetProtectingParentsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetProtectingParentsRequest) ProtoMessage()               {}
func (*GetProtectingParentsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetProtectingParentsRequest) GetSearchLength() int32 {
	if m != nil {
		return m.SearchLength
	}
	return 0
}

func (m *GetProtectingParentsRequest) GetVeriblockBlockHash() []byte {
	if m != nil {
		return m.VeriblockBlockHash
	}
	return nil
}

type GetProtectingParentsReply struct {
	Success         bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results         []*Result             `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	PopEndorsements []*PoPEndorsementInfo `protobuf:"bytes,3,rep,name=pop_endorsements,json=popEndorsements" json:"pop_endorsements,omitempty"`
}

func (m *GetProtectingParentsReply) Reset()                    { *m = GetProtectingParentsReply{} }
func (m *GetProtectingParentsReply) String() string            { return proto.CompactTextString(m) }
func (*GetProtectingParentsReply) ProtoMessage()               {}
func (*GetProtectingParentsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *GetProtectingParentsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetProtectingParentsReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetProtectingParentsReply) GetPopEndorsements() []*PoPEndorsementInfo {
	if m != nil {
		return m.PopEndorsements
	}
	return nil
}

type Transaction struct {
	Type                       Transaction_Type      `protobuf:"varint,1,opt,name=type,enum=core.Transaction_Type" json:"type,omitempty"`
	SourceAddress              []byte                `protobuf:"bytes,2,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	SourceAmount               int64                 `protobuf:"varint,3,opt,name=source_amount,json=sourceAmount" json:"source_amount,omitempty"`
	Outputs                    []*Output             `protobuf:"bytes,4,rep,name=outputs" json:"outputs,omitempty"`
	TransactionFee             int64                 `protobuf:"varint,5,opt,name=transaction_fee,json=transactionFee" json:"transaction_fee,omitempty"`
	Data                       []byte                `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	BitcoinTransaction         []byte                `protobuf:"bytes,10,opt,name=bitcoin_transaction,json=bitcoinTransaction,proto3" json:"bitcoin_transaction,omitempty"`
	EndorsedBlockHeader        []byte                `protobuf:"bytes,11,opt,name=endorsed_block_header,json=endorsedBlockHeader,proto3" json:"endorsed_block_header,omitempty"`
	BitcoinBlockHeaderOfProof  *BitcoinBlockHeader   `protobuf:"bytes,12,opt,name=bitcoin_block_header_of_proof,json=bitcoinBlockHeaderOfProof" json:"bitcoin_block_header_of_proof,omitempty"`
	MerklePath                 string                `protobuf:"bytes,13,opt,name=merkle_path,json=merklePath" json:"merkle_path,omitempty"`
	ContextBitcoinBlockHeaders []*BitcoinBlockHeader `protobuf:"bytes,14,rep,name=context_bitcoin_block_headers,json=contextBitcoinBlockHeaders" json:"context_bitcoin_block_headers,omitempty"`
	Timestamp                  int32                 `protobuf:"varint,15,opt,name=timestamp" json:"timestamp,omitempty"`
	Size                       int32                 `protobuf:"varint,16,opt,name=size" json:"size,omitempty"`
	TxId                       []byte                `protobuf:"bytes,17,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Transaction) GetType() Transaction_Type {
	if m != nil {
		return m.Type
	}
	return Transaction_ZERO_UNUSED
}

func (m *Transaction) GetSourceAddress() []byte {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

func (m *Transaction) GetSourceAmount() int64 {
	if m != nil {
		return m.SourceAmount
	}
	return 0
}

func (m *Transaction) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *Transaction) GetTransactionFee() int64 {
	if m != nil {
		return m.TransactionFee
	}
	return 0
}

func (m *Transaction) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Transaction) GetBitcoinTransaction() []byte {
	if m != nil {
		return m.BitcoinTransaction
	}
	return nil
}

func (m *Transaction) GetEndorsedBlockHeader() []byte {
	if m != nil {
		return m.EndorsedBlockHeader
	}
	return nil
}

func (m *Transaction) GetBitcoinBlockHeaderOfProof() *BitcoinBlockHeader {
	if m != nil {
		return m.BitcoinBlockHeaderOfProof
	}
	return nil
}

func (m *Transaction) GetMerklePath() string {
	if m != nil {
		return m.MerklePath
	}
	return ""
}

func (m *Transaction) GetContextBitcoinBlockHeaders() []*BitcoinBlockHeader {
	if m != nil {
		return m.ContextBitcoinBlockHeaders
	}
	return nil
}

func (m *Transaction) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Transaction) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Transaction) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

type UnsignedMultisigTransactionWithIndex struct {
	UnsignedMultisigTansaction *Transaction `protobuf:"bytes,1,opt,name=unsigned_multisig_tansaction,json=unsignedMultisigTansaction" json:"unsigned_multisig_tansaction,omitempty"`
	SignatureIndex             int64        `protobuf:"varint,2,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"`
}

func (m *UnsignedMultisigTransactionWithIndex) Reset()         { *m = UnsignedMultisigTransactionWithIndex{} }
func (m *UnsignedMultisigTransactionWithIndex) String() string { return proto.CompactTextString(m) }
func (*UnsignedMultisigTransactionWithIndex) ProtoMessage()    {}
func (*UnsignedMultisigTransactionWithIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *UnsignedMultisigTransactionWithIndex) GetUnsignedMultisigTansaction() *Transaction {
	if m != nil {
		return m.UnsignedMultisigTansaction
	}
	return nil
}

func (m *UnsignedMultisigTransactionWithIndex) GetSignatureIndex() int64 {
	if m != nil {
		return m.SignatureIndex
	}
	return 0
}

type TransactionUnion struct {
	// Types that are valid to be assigned to Transaction:
	//	*TransactionUnion_Unsigned
	//	*TransactionUnion_Signed
	//	*TransactionUnion_SignedMultisig
	Transaction isTransactionUnion_Transaction `protobuf_oneof:"transaction"`
}

func (m *TransactionUnion) Reset()                    { *m = TransactionUnion{} }
func (m *TransactionUnion) String() string            { return proto.CompactTextString(m) }
func (*TransactionUnion) ProtoMessage()               {}
func (*TransactionUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type isTransactionUnion_Transaction interface {
	isTransactionUnion_Transaction()
}

type TransactionUnion_Unsigned struct {
	Unsigned *Transaction `protobuf:"bytes,1,opt,name=unsigned,oneof"`
}
type TransactionUnion_Signed struct {
	Signed *SignedTransaction `protobuf:"bytes,2,opt,name=signed,oneof"`
}
type TransactionUnion_SignedMultisig struct {
	SignedMultisig *SignedMultisigTransaction `protobuf:"bytes,3,opt,name=signed_multisig,json=signedMultisig,oneof"`
}

func (*TransactionUnion_Unsigned) isTransactionUnion_Transaction()       {}
func (*TransactionUnion_Signed) isTransactionUnion_Transaction()         {}
func (*TransactionUnion_SignedMultisig) isTransactionUnion_Transaction() {}

func (m *TransactionUnion) GetTransaction() isTransactionUnion_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionUnion) GetUnsigned() *Transaction {
	if x, ok := m.GetTransaction().(*TransactionUnion_Unsigned); ok {
		return x.Unsigned
	}
	return nil
}

func (m *TransactionUnion) GetSigned() *SignedTransaction {
	if x, ok := m.GetTransaction().(*TransactionUnion_Signed); ok {
		return x.Signed
	}
	return nil
}

func (m *TransactionUnion) GetSignedMultisig() *SignedMultisigTransaction {
	if x, ok := m.GetTransaction().(*TransactionUnion_SignedMultisig); ok {
		return x.SignedMultisig
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TransactionUnion) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TransactionUnion_OneofMarshaler, _TransactionUnion_OneofUnmarshaler, _TransactionUnion_OneofSizer, []interface{}{
		(*TransactionUnion_Unsigned)(nil),
		(*TransactionUnion_Signed)(nil),
		(*TransactionUnion_SignedMultisig)(nil),
	}
}

func _TransactionUnion_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TransactionUnion)
	// transaction
	switch x := m.Transaction.(type) {
	case *TransactionUnion_Unsigned:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unsigned); err != nil {
			return err
		}
	case *TransactionUnion_Signed:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Signed); err != nil {
			return err
		}
	case *TransactionUnion_SignedMultisig:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SignedMultisig); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TransactionUnion.Transaction has unexpected type %T", x)
	}
	return nil
}

func _TransactionUnion_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TransactionUnion)
	switch tag {
	case 1: // transaction.unsigned
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Transaction)
		err := b.DecodeMessage(msg)
		m.Transaction = &TransactionUnion_Unsigned{msg}
		return true, err
	case 2: // transaction.signed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignedTransaction)
		err := b.DecodeMessage(msg)
		m.Transaction = &TransactionUnion_Signed{msg}
		return true, err
	case 3: // transaction.signed_multisig
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignedMultisigTransaction)
		err := b.DecodeMessage(msg)
		m.Transaction = &TransactionUnion_SignedMultisig{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TransactionUnion_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TransactionUnion)
	// transaction
	switch x := m.Transaction.(type) {
	case *TransactionUnion_Unsigned:
		s := proto.Size(x.Unsigned)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionUnion_Signed:
		s := proto.Size(x.Signed)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TransactionUnion_SignedMultisig:
		s := proto.Size(x.SignedMultisig)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VBKTransactionWithContext struct {
	MerklePath *VBKMerklePath `protobuf:"bytes,1,opt,name=merkle_path,json=merklePath" json:"merkle_path,omitempty"`
	// Types that are valid to be assigned to Transaction:
	//	*VBKTransactionWithContext_SignedTransaction
	//	*VBKTransactionWithContext_SignedMultisigTransaction
	Transaction isVBKTransactionWithContext_Transaction `protobuf_oneof:"transaction"`
}

func (m *VBKTransactionWithContext) Reset()                    { *m = VBKTransactionWithContext{} }
func (m *VBKTransactionWithContext) String() string            { return proto.CompactTextString(m) }
func (*VBKTransactionWithContext) ProtoMessage()               {}
func (*VBKTransactionWithContext) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type isVBKTransactionWithContext_Transaction interface {
	isVBKTransactionWithContext_Transaction()
}

type VBKTransactionWithContext_SignedTransaction struct {
	SignedTransaction *SignedTransaction `protobuf:"bytes,2,opt,name=signed_transaction,json=signedTransaction,oneof"`
}
type VBKTransactionWithContext_SignedMultisigTransaction struct {
	SignedMultisigTransaction *SignedMultisigTransaction `protobuf:"bytes,3,opt,name=signed_multisig_transaction,json=signedMultisigTransaction,oneof"`
}

func (*VBKTransactionWithContext_SignedTransaction) isVBKTransactionWithContext_Transaction() {}
func (*VBKTransactionWithContext_SignedMultisigTransaction) isVBKTransactionWithContext_Transaction() {
}

func (m *VBKTransactionWithContext) GetTransaction() isVBKTransactionWithContext_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *VBKTransactionWithContext) GetMerklePath() *VBKMerklePath {
	if m != nil {
		return m.MerklePath
	}
	return nil
}

func (m *VBKTransactionWithContext) GetSignedTransaction() *SignedTransaction {
	if x, ok := m.GetTransaction().(*VBKTransactionWithContext_SignedTransaction); ok {
		return x.SignedTransaction
	}
	return nil
}

func (m *VBKTransactionWithContext) GetSignedMultisigTransaction() *SignedMultisigTransaction {
	if x, ok := m.GetTransaction().(*VBKTransactionWithContext_SignedMultisigTransaction); ok {
		return x.SignedMultisigTransaction
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*VBKTransactionWithContext) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _VBKTransactionWithContext_OneofMarshaler, _VBKTransactionWithContext_OneofUnmarshaler, _VBKTransactionWithContext_OneofSizer, []interface{}{
		(*VBKTransactionWithContext_SignedTransaction)(nil),
		(*VBKTransactionWithContext_SignedMultisigTransaction)(nil),
	}
}

func _VBKTransactionWithContext_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*VBKTransactionWithContext)
	// transaction
	switch x := m.Transaction.(type) {
	case *VBKTransactionWithContext_SignedTransaction:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SignedTransaction); err != nil {
			return err
		}
	case *VBKTransactionWithContext_SignedMultisigTransaction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SignedMultisigTransaction); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("VBKTransactionWithContext.Transaction has unexpected type %T", x)
	}
	return nil
}

func _VBKTransactionWithContext_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*VBKTransactionWithContext)
	switch tag {
	case 2: // transaction.signed_transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignedTransaction)
		err := b.DecodeMessage(msg)
		m.Transaction = &VBKTransactionWithContext_SignedTransaction{msg}
		return true, err
	case 3: // transaction.signed_multisig_transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SignedMultisigTransaction)
		err := b.DecodeMessage(msg)
		m.Transaction = &VBKTransactionWithContext_SignedMultisigTransaction{msg}
		return true, err
	default:
		return false, nil
	}
}

func _VBKTransactionWithContext_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*VBKTransactionWithContext)
	// transaction
	switch x := m.Transaction.(type) {
	case *VBKTransactionWithContext_SignedTransaction:
		s := proto.Size(x.SignedTransaction)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *VBKTransactionWithContext_SignedMultisigTransaction:
		s := proto.Size(x.SignedMultisigTransaction)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type VBKMerklePath struct {
	Layers          [][]byte `protobuf:"bytes,1,rep,name=layers,proto3" json:"layers,omitempty"`
	BottomData      []byte   `protobuf:"bytes,2,opt,name=bottom_data,json=bottomData,proto3" json:"bottom_data,omitempty"`
	BottomDataIndex int32    `protobuf:"varint,3,opt,name=bottom_data_index,json=bottomDataIndex" json:"bottom_data_index,omitempty"`
}

func (m *VBKMerklePath) Reset()                    { *m = VBKMerklePath{} }
func (m *VBKMerklePath) String() string            { return proto.CompactTextString(m) }
func (*VBKMerklePath) ProtoMessage()               {}
func (*VBKMerklePath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *VBKMerklePath) GetLayers() [][]byte {
	if m != nil {
		return m.Layers
	}
	return nil
}

func (m *VBKMerklePath) GetBottomData() []byte {
	if m != nil {
		return m.BottomData
	}
	return nil
}

func (m *VBKMerklePath) GetBottomDataIndex() int32 {
	if m != nil {
		return m.BottomDataIndex
	}
	return 0
}

type TransactionMeta struct {
	TxId          []byte                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	BlockHeader   []byte                 `protobuf:"bytes,2,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
	AppearsIn     [][]byte               `protobuf:"bytes,3,rep,name=appears_in,json=appearsIn,proto3" json:"appears_in,omitempty"`
	Confirmations int32                  `protobuf:"varint,4,opt,name=confirmations" json:"confirmations,omitempty"`
	Status        TransactionMeta_Status `protobuf:"varint,5,opt,name=status,enum=core.TransactionMeta_Status" json:"status,omitempty"`
}

func (m *TransactionMeta) Reset()                    { *m = TransactionMeta{} }
func (m *TransactionMeta) String() string            { return proto.CompactTextString(m) }
func (*TransactionMeta) ProtoMessage()               {}
func (*TransactionMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *TransactionMeta) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

func (m *TransactionMeta) GetBlockHeader() []byte {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *TransactionMeta) GetAppearsIn() [][]byte {
	if m != nil {
		return m.AppearsIn
	}
	return nil
}

func (m *TransactionMeta) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *TransactionMeta) GetStatus() TransactionMeta_Status {
	if m != nil {
		return m.Status
	}
	return TransactionMeta_UNKNOWN
}

type WalletTransaction struct {
	TxId      []byte                 `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Address   []byte                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Timestamp int32                  `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	Type      WalletTransaction_Type `protobuf:"varint,4,opt,name=type,enum=core.WalletTransaction_Type" json:"type,omitempty"`
	NetAmount int64                  `protobuf:"zigzag64,5,opt,name=net_amount,json=netAmount" json:"net_amount,omitempty"`
	Input     *Output                `protobuf:"bytes,6,opt,name=input" json:"input,omitempty"`
	Outputs   []*Output              `protobuf:"bytes,7,rep,name=outputs" json:"outputs,omitempty"`
	Meta      *TransactionMeta       `protobuf:"bytes,8,opt,name=meta" json:"meta,omitempty"`
}

func (m *WalletTransaction) Reset()                    { *m = WalletTransaction{} }
func (m *WalletTransaction) String() string            { return proto.CompactTextString(m) }
func (*WalletTransaction) ProtoMessage()               {}
func (*WalletTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *WalletTransaction) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

func (m *WalletTransaction) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *WalletTransaction) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *WalletTransaction) GetType() WalletTransaction_Type {
	if m != nil {
		return m.Type
	}
	return WalletTransaction_NOT_SET
}

func (m *WalletTransaction) GetNetAmount() int64 {
	if m != nil {
		return m.NetAmount
	}
	return 0
}

func (m *WalletTransaction) GetInput() *Output {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *WalletTransaction) GetOutputs() []*Output {
	if m != nil {
		return m.Outputs
	}
	return nil
}

func (m *WalletTransaction) GetMeta() *TransactionMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type PoPDatastore struct {
	DatastoreHash                []byte                                           `protobuf:"bytes,1,opt,name=datastore_hash,json=datastoreHash,proto3" json:"datastore_hash,omitempty"`
	EndorsedVeriblockHeadersHash []byte                                           `protobuf:"bytes,2,opt,name=endorsed_veriblock_headers_hash,json=endorsedVeriblockHeadersHash,proto3" json:"endorsed_veriblock_headers_hash,omitempty"`
	EndorsedAltchainHeadersHash  []byte                                           `protobuf:"bytes,3,opt,name=endorsed_altchain_headers_hash,json=endorsedAltchainHeadersHash,proto3" json:"endorsed_altchain_headers_hash,omitempty"`
	VeriblockHeaderEndorsements  []*BitcoinHeaderVeriBlockEndorsementCountsPair   `protobuf:"bytes,4,rep,name=veriblock_header_endorsements,json=veriblockHeaderEndorsements" json:"veriblock_header_endorsements,omitempty"`
	AltchainHeaderEndorsements   []*AltchainIdAltchainHeaderEndorsementCountsPair `protobuf:"bytes,5,rep,name=altchain_header_endorsements,json=altchainHeaderEndorsements" json:"altchain_header_endorsements,omitempty"`
}

func (m *PoPDatastore) Reset()                    { *m = PoPDatastore{} }
func (m *PoPDatastore) String() string            { return proto.CompactTextString(m) }
func (*PoPDatastore) ProtoMessage()               {}
func (*PoPDatastore) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *PoPDatastore) GetDatastoreHash() []byte {
	if m != nil {
		return m.DatastoreHash
	}
	return nil
}

func (m *PoPDatastore) GetEndorsedVeriblockHeadersHash() []byte {
	if m != nil {
		return m.EndorsedVeriblockHeadersHash
	}
	return nil
}

func (m *PoPDatastore) GetEndorsedAltchainHeadersHash() []byte {
	if m != nil {
		return m.EndorsedAltchainHeadersHash
	}
	return nil
}

func (m *PoPDatastore) GetVeriblockHeaderEndorsements() []*BitcoinHeaderVeriBlockEndorsementCountsPair {
	if m != nil {
		return m.VeriblockHeaderEndorsements
	}
	return nil
}

func (m *PoPDatastore) GetAltchainHeaderEndorsements() []*AltchainIdAltchainHeaderEndorsementCountsPair {
	if m != nil {
		return m.AltchainHeaderEndorsements
	}
	return nil
}

type AltchainIdAltchainHeaderEndorsementCountsPair struct {
	AltchainIdentifier                  int64                                 `protobuf:"varint,1,opt,name=altchain_identifier,json=altchainIdentifier" json:"altchain_identifier,omitempty"`
	AltchainHeaderEndorsementCountPairs []*AltchainHeaderEndorsementCountPair `protobuf:"bytes,2,rep,name=altchain_header_endorsement_count_pairs,json=altchainHeaderEndorsementCountPairs" json:"altchain_header_endorsement_count_pairs,omitempty"`
}

func (m *AltchainIdAltchainHeaderEndorsementCountsPair) Reset() {
	*m = AltchainIdAltchainHeaderEndorsementCountsPair{}
}
func (m *AltchainIdAltchainHeaderEndorsementCountsPair) String() string {
	return proto.CompactTextString(m)
}
func (*AltchainIdAltchainHeaderEndorsementCountsPair) ProtoMessage() {}
func (*AltchainIdAltchainHeaderEndorsementCountsPair) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{31}
}

func (m *AltchainIdAltchainHeaderEndorsementCountsPair) GetAltchainIdentifier() int64 {
	if m != nil {
		return m.AltchainIdentifier
	}
	return 0
}

func (m *AltchainIdAltchainHeaderEndorsementCountsPair) GetAltchainHeaderEndorsementCountPairs() []*AltchainHeaderEndorsementCountPair {
	if m != nil {
		return m.AltchainHeaderEndorsementCountPairs
	}
	return nil
}

type BitcoinHeaderVeriBlockEndorsementCountsPair struct {
	BitcoinHeader                        []byte                                 `protobuf:"bytes,1,opt,name=bitcoin_header,json=bitcoinHeader,proto3" json:"bitcoin_header,omitempty"`
	VeriblockHeaderEndorsementCountPairs []*VeriBlockHeaderEndorsementCountPair `protobuf:"bytes,2,rep,name=veriblock_header_endorsement_count_pairs,json=veriblockHeaderEndorsementCountPairs" json:"veriblock_header_endorsement_count_pairs,omitempty"`
}

func (m *BitcoinHeaderVeriBlockEndorsementCountsPair) Reset() {
	*m = BitcoinHeaderVeriBlockEndorsementCountsPair{}
}
func (m *BitcoinHeaderVeriBlockEndorsementCountsPair) String() string {
	return proto.CompactTextString(m)
}
func (*BitcoinHeaderVeriBlockEndorsementCountsPair) ProtoMessage() {}
func (*BitcoinHeaderVeriBlockEndorsementCountsPair) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32}
}

func (m *BitcoinHeaderVeriBlockEndorsementCountsPair) GetBitcoinHeader() []byte {
	if m != nil {
		return m.BitcoinHeader
	}
	return nil
}

func (m *BitcoinHeaderVeriBlockEndorsementCountsPair) GetVeriblockHeaderEndorsementCountPairs() []*VeriBlockHeaderEndorsementCountPair {
	if m != nil {
		return m.VeriblockHeaderEndorsementCountPairs
	}
	return nil
}

type VeriBlockHeaderEndorsementCountPair struct {
	VeriblockHeader  []byte `protobuf:"bytes,1,opt,name=veriblock_header,json=veriblockHeader,proto3" json:"veriblock_header,omitempty"`
	EndorsementCount int32  `protobuf:"varint,2,opt,name=endorsement_count,json=endorsementCount" json:"endorsement_count,omitempty"`
}

func (m *VeriBlockHeaderEndorsementCountPair) Reset()         { *m = VeriBlockHeaderEndorsementCountPair{} }
func (m *VeriBlockHeaderEndorsementCountPair) String() string { return proto.CompactTextString(m) }
func (*VeriBlockHeaderEndorsementCountPair) ProtoMessage()    {}
func (*VeriBlockHeaderEndorsementCountPair) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{33}
}

func (m *VeriBlockHeaderEndorsementCountPair) GetVeriblockHeader() []byte {
	if m != nil {
		return m.VeriblockHeader
	}
	return nil
}

func (m *VeriBlockHeaderEndorsementCountPair) GetEndorsementCount() int32 {
	if m != nil {
		return m.EndorsementCount
	}
	return 0
}

type AltchainHeaderEndorsementCountPair struct {
	AltchainHeader   []byte `protobuf:"bytes,1,opt,name=altchain_header,json=altchainHeader,proto3" json:"altchain_header,omitempty"`
	EndorsementCount int32  `protobuf:"varint,2,opt,name=endorsement_count,json=endorsementCount" json:"endorsement_count,omitempty"`
}

func (m *AltchainHeaderEndorsementCountPair) Reset()         { *m = AltchainHeaderEndorsementCountPair{} }
func (m *AltchainHeaderEndorsementCountPair) String() string { return proto.CompactTextString(m) }
func (*AltchainHeaderEndorsementCountPair) ProtoMessage()    {}
func (*AltchainHeaderEndorsementCountPair) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34}
}

func (m *AltchainHeaderEndorsementCountPair) GetAltchainHeader() []byte {
	if m != nil {
		return m.AltchainHeader
	}
	return nil
}

func (m *AltchainHeaderEndorsementCountPair) GetEndorsementCount() int32 {
	if m != nil {
		return m.EndorsementCount
	}
	return 0
}

type BlockContentMetapackage struct {
	CoinbaseTransaction *CoinbaseTransaction `protobuf:"bytes,1,opt,name=coinbase_transaction,json=coinbaseTransaction" json:"coinbase_transaction,omitempty"`
	PopDatastore        *PoPDatastore        `protobuf:"bytes,2,opt,name=pop_datastore,json=popDatastore" json:"pop_datastore,omitempty"`
	MinerComment        []byte               `protobuf:"bytes,3,opt,name=miner_comment,json=minerComment,proto3" json:"miner_comment,omitempty"`
	LedgerHash          []byte               `protobuf:"bytes,4,opt,name=ledger_hash,json=ledgerHash,proto3" json:"ledger_hash,omitempty"`
	ExtraNonce          int64                `protobuf:"zigzag64,5,opt,name=extra_nonce,json=extraNonce" json:"extra_nonce,omitempty"`
	Hash                []byte               `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BlockContentMetapackage) Reset()                    { *m = BlockContentMetapackage{} }
func (m *BlockContentMetapackage) String() string            { return proto.CompactTextString(m) }
func (*BlockContentMetapackage) ProtoMessage()               {}
func (*BlockContentMetapackage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *BlockContentMetapackage) GetCoinbaseTransaction() *CoinbaseTransaction {
	if m != nil {
		return m.CoinbaseTransaction
	}
	return nil
}

func (m *BlockContentMetapackage) GetPopDatastore() *PoPDatastore {
	if m != nil {
		return m.PopDatastore
	}
	return nil
}

func (m *BlockContentMetapackage) GetMinerComment() []byte {
	if m != nil {
		return m.MinerComment
	}
	return nil
}

func (m *BlockContentMetapackage) GetLedgerHash() []byte {
	if m != nil {
		return m.LedgerHash
	}
	return nil
}

func (m *BlockContentMetapackage) GetExtraNonce() int64 {
	if m != nil {
		return m.ExtraNonce
	}
	return 0
}

func (m *BlockContentMetapackage) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type BlockSummary struct {
	Number                 int32  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Timestamp              int32  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Hash                   []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash           []byte `protobuf:"bytes,4,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	SecondPreviousHash     []byte `protobuf:"bytes,5,opt,name=second_previous_hash,json=secondPreviousHash,proto3" json:"second_previous_hash,omitempty"`
	ThirdPreviousHash      []byte `protobuf:"bytes,6,opt,name=third_previous_hash,json=thirdPreviousHash,proto3" json:"third_previous_hash,omitempty"`
	DecodedDifficulty      uint64 `protobuf:"fixed64,7,opt,name=decoded_difficulty,json=decodedDifficulty" json:"decoded_difficulty,omitempty"`
	WinningNonce           int32  `protobuf:"zigzag32,8,opt,name=winning_nonce,json=winningNonce" json:"winning_nonce,omitempty"`
	NumRegularTransactions int32  `protobuf:"varint,9,opt,name=num_regular_transactions,json=numRegularTransactions" json:"num_regular_transactions,omitempty"`
	NumPopTransactions     int32  `protobuf:"varint,10,opt,name=num_pop_transactions,json=numPopTransactions" json:"num_pop_transactions,omitempty"`
	TotalFees              int64  `protobuf:"varint,11,opt,name=total_fees,json=totalFees" json:"total_fees,omitempty"`
	PowCoinbaseReward      int64  `protobuf:"varint,12,opt,name=pow_coinbase_reward,json=powCoinbaseReward" json:"pow_coinbase_reward,omitempty"`
	PopCoinbaseReward      int64  `protobuf:"varint,13,opt,name=pop_coinbase_reward,json=popCoinbaseReward" json:"pop_coinbase_reward,omitempty"`
	Size                   int32  `protobuf:"varint,14,opt,name=size" json:"size,omitempty"`
	LedgerHash             []byte `protobuf:"bytes,15,opt,name=ledger_hash,json=ledgerHash,proto3" json:"ledger_hash,omitempty"`
	MinerComment           []byte `protobuf:"bytes,16,opt,name=miner_comment,json=minerComment,proto3" json:"miner_comment,omitempty"`
	Version                int32  `protobuf:"varint,17,opt,name=version" json:"version,omitempty"`
	MerkleRoot             []byte `protobuf:"bytes,18,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (m *BlockSummary) Reset()                    { *m = BlockSummary{} }
func (m *BlockSummary) String() string            { return proto.CompactTextString(m) }
func (*BlockSummary) ProtoMessage()               {}
func (*BlockSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *BlockSummary) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockSummary) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlockSummary) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *BlockSummary) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *BlockSummary) GetSecondPreviousHash() []byte {
	if m != nil {
		return m.SecondPreviousHash
	}
	return nil
}

func (m *BlockSummary) GetThirdPreviousHash() []byte {
	if m != nil {
		return m.ThirdPreviousHash
	}
	return nil
}

func (m *BlockSummary) GetDecodedDifficulty() uint64 {
	if m != nil {
		return m.DecodedDifficulty
	}
	return 0
}

func (m *BlockSummary) GetWinningNonce() int32 {
	if m != nil {
		return m.WinningNonce
	}
	return 0
}

func (m *BlockSummary) GetNumRegularTransactions() int32 {
	if m != nil {
		return m.NumRegularTransactions
	}
	return 0
}

func (m *BlockSummary) GetNumPopTransactions() int32 {
	if m != nil {
		return m.NumPopTransactions
	}
	return 0
}

func (m *BlockSummary) GetTotalFees() int64 {
	if m != nil {
		return m.TotalFees
	}
	return 0
}

func (m *BlockSummary) GetPowCoinbaseReward() int64 {
	if m != nil {
		return m.PowCoinbaseReward
	}
	return 0
}

func (m *BlockSummary) GetPopCoinbaseReward() int64 {
	if m != nil {
		return m.PopCoinbaseReward
	}
	return 0
}

func (m *BlockSummary) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *BlockSummary) GetLedgerHash() []byte {
	if m != nil {
		return m.LedgerHash
	}
	return nil
}

func (m *BlockSummary) GetMinerComment() []byte {
	if m != nil {
		return m.MinerComment
	}
	return nil
}

func (m *BlockSummary) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockSummary) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

type LightBlockSummary struct {
	Number                      int32  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Timestamp                   int32  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Hash                        []byte `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash                []byte `protobuf:"bytes,4,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	SecondPreviousHash          []byte `protobuf:"bytes,5,opt,name=second_previous_hash,json=secondPreviousHash,proto3" json:"second_previous_hash,omitempty"`
	ThirdPreviousHash           []byte `protobuf:"bytes,6,opt,name=third_previous_hash,json=thirdPreviousHash,proto3" json:"third_previous_hash,omitempty"`
	DecodedDifficulty           uint64 `protobuf:"fixed64,7,opt,name=decoded_difficulty,json=decodedDifficulty" json:"decoded_difficulty,omitempty"`
	WinningNonce                int32  `protobuf:"zigzag32,8,opt,name=winning_nonce,json=winningNonce" json:"winning_nonce,omitempty"`
	NumKnownRegularTransactions int32  `protobuf:"varint,9,opt,name=num_known_regular_transactions,json=numKnownRegularTransactions" json:"num_known_regular_transactions,omitempty"`
	NumPopTransactions          int32  `protobuf:"varint,10,opt,name=num_pop_transactions,json=numPopTransactions" json:"num_pop_transactions,omitempty"`
	PowCoinbaseReward           int64  `protobuf:"varint,11,opt,name=pow_coinbase_reward,json=powCoinbaseReward" json:"pow_coinbase_reward,omitempty"`
	PopCoinbaseReward           int64  `protobuf:"varint,12,opt,name=pop_coinbase_reward,json=popCoinbaseReward" json:"pop_coinbase_reward,omitempty"`
	LedgerHash                  []byte `protobuf:"bytes,13,opt,name=ledger_hash,json=ledgerHash,proto3" json:"ledger_hash,omitempty"`
	MinerComment                []byte `protobuf:"bytes,14,opt,name=miner_comment,json=minerComment,proto3" json:"miner_comment,omitempty"`
	NormalTransactionMerkleRoot []byte `protobuf:"bytes,15,opt,name=normal_transaction_merkle_root,json=normalTransactionMerkleRoot,proto3" json:"normal_transaction_merkle_root,omitempty"`
	Version                     int32  `protobuf:"varint,16,opt,name=version" json:"version,omitempty"`
	MerkleRoot                  []byte `protobuf:"bytes,17,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (m *LightBlockSummary) Reset()                    { *m = LightBlockSummary{} }
func (m *LightBlockSummary) String() string            { return proto.CompactTextString(m) }
func (*LightBlockSummary) ProtoMessage()               {}
func (*LightBlockSummary) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *LightBlockSummary) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *LightBlockSummary) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LightBlockSummary) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *LightBlockSummary) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *LightBlockSummary) GetSecondPreviousHash() []byte {
	if m != nil {
		return m.SecondPreviousHash
	}
	return nil
}

func (m *LightBlockSummary) GetThirdPreviousHash() []byte {
	if m != nil {
		return m.ThirdPreviousHash
	}
	return nil
}

func (m *LightBlockSummary) GetDecodedDifficulty() uint64 {
	if m != nil {
		return m.DecodedDifficulty
	}
	return 0
}

func (m *LightBlockSummary) GetWinningNonce() int32 {
	if m != nil {
		return m.WinningNonce
	}
	return 0
}

func (m *LightBlockSummary) GetNumKnownRegularTransactions() int32 {
	if m != nil {
		return m.NumKnownRegularTransactions
	}
	return 0
}

func (m *LightBlockSummary) GetNumPopTransactions() int32 {
	if m != nil {
		return m.NumPopTransactions
	}
	return 0
}

func (m *LightBlockSummary) GetPowCoinbaseReward() int64 {
	if m != nil {
		return m.PowCoinbaseReward
	}
	return 0
}

func (m *LightBlockSummary) GetPopCoinbaseReward() int64 {
	if m != nil {
		return m.PopCoinbaseReward
	}
	return 0
}

func (m *LightBlockSummary) GetLedgerHash() []byte {
	if m != nil {
		return m.LedgerHash
	}
	return nil
}

func (m *LightBlockSummary) GetMinerComment() []byte {
	if m != nil {
		return m.MinerComment
	}
	return nil
}

func (m *LightBlockSummary) GetNormalTransactionMerkleRoot() []byte {
	if m != nil {
		return m.NormalTransactionMerkleRoot
	}
	return nil
}

func (m *LightBlockSummary) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LightBlockSummary) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

type Block struct {
	Number                  int32                    `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Timestamp               int32                    `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Hash                    []byte                   `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash            []byte                   `protobuf:"bytes,4,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	SecondPreviousHash      []byte                   `protobuf:"bytes,5,opt,name=second_previous_hash,json=secondPreviousHash,proto3" json:"second_previous_hash,omitempty"`
	ThirdPreviousHash       []byte                   `protobuf:"bytes,6,opt,name=third_previous_hash,json=thirdPreviousHash,proto3" json:"third_previous_hash,omitempty"`
	EncodedDifficulty       int32                    `protobuf:"varint,7,opt,name=encoded_difficulty,json=encodedDifficulty" json:"encoded_difficulty,omitempty"`
	WinningNonce            int32                    `protobuf:"zigzag32,8,opt,name=winning_nonce,json=winningNonce" json:"winning_nonce,omitempty"`
	RegularTransactions     []*TransactionUnion      `protobuf:"bytes,9,rep,name=regular_transactions,json=regularTransactions" json:"regular_transactions,omitempty"`
	PopTransactions         []*TransactionUnion      `protobuf:"bytes,10,rep,name=pop_transactions,json=popTransactions" json:"pop_transactions,omitempty"`
	TotalFees               int64                    `protobuf:"varint,11,opt,name=total_fees,json=totalFees" json:"total_fees,omitempty"`
	PowCoinbaseReward       int64                    `protobuf:"varint,12,opt,name=pow_coinbase_reward,json=powCoinbaseReward" json:"pow_coinbase_reward,omitempty"`
	PopCoinbaseReward       int64                    `protobuf:"varint,13,opt,name=pop_coinbase_reward,json=popCoinbaseReward" json:"pop_coinbase_reward,omitempty"`
	BitcoinBlockHeaders     [][]byte                 `protobuf:"bytes,14,rep,name=bitcoin_block_headers,json=bitcoinBlockHeaders,proto3" json:"bitcoin_block_headers,omitempty"`
	BlockContentMetapackage *BlockContentMetapackage `protobuf:"bytes,15,opt,name=block_content_metapackage,json=blockContentMetapackage" json:"block_content_metapackage,omitempty"`
	Size                    int32                    `protobuf:"varint,16,opt,name=size" json:"size,omitempty"`
	Version                 int32                    `protobuf:"varint,17,opt,name=version" json:"version,omitempty"`
	MerkleRoot              []byte                   `protobuf:"bytes,18,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *Block) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Block) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Block) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *Block) GetSecondPreviousHash() []byte {
	if m != nil {
		return m.SecondPreviousHash
	}
	return nil
}

func (m *Block) GetThirdPreviousHash() []byte {
	if m != nil {
		return m.ThirdPreviousHash
	}
	return nil
}

func (m *Block) GetEncodedDifficulty() int32 {
	if m != nil {
		return m.EncodedDifficulty
	}
	return 0
}

func (m *Block) GetWinningNonce() int32 {
	if m != nil {
		return m.WinningNonce
	}
	return 0
}

func (m *Block) GetRegularTransactions() []*TransactionUnion {
	if m != nil {
		return m.RegularTransactions
	}
	return nil
}

func (m *Block) GetPopTransactions() []*TransactionUnion {
	if m != nil {
		return m.PopTransactions
	}
	return nil
}

func (m *Block) GetTotalFees() int64 {
	if m != nil {
		return m.TotalFees
	}
	return 0
}

func (m *Block) GetPowCoinbaseReward() int64 {
	if m != nil {
		return m.PowCoinbaseReward
	}
	return 0
}

func (m *Block) GetPopCoinbaseReward() int64 {
	if m != nil {
		return m.PopCoinbaseReward
	}
	return 0
}

func (m *Block) GetBitcoinBlockHeaders() [][]byte {
	if m != nil {
		return m.BitcoinBlockHeaders
	}
	return nil
}

func (m *Block) GetBlockContentMetapackage() *BlockContentMetapackage {
	if m != nil {
		return m.BlockContentMetapackage
	}
	return nil
}

func (m *Block) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Block) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Block) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

type BlockHeader struct {
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BlockHeader) Reset()                    { *m = BlockHeader{} }
func (m *BlockHeader) String() string            { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()               {}
func (*BlockHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *BlockHeader) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BlockHeader) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type FilteredBlock struct {
	Number                   int32    `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Version                  int32    `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	PreviousHash             []byte   `protobuf:"bytes,3,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	SecondPreviousHash       []byte   `protobuf:"bytes,4,opt,name=second_previous_hash,json=secondPreviousHash,proto3" json:"second_previous_hash,omitempty"`
	ThirdPreviousHash        []byte   `protobuf:"bytes,5,opt,name=third_previous_hash,json=thirdPreviousHash,proto3" json:"third_previous_hash,omitempty"`
	MerkleRoot               []byte   `protobuf:"bytes,6,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Timestamp                int32    `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	Difficulty               int32    `protobuf:"varint,8,opt,name=difficulty" json:"difficulty,omitempty"`
	Nonce                    int32    `protobuf:"zigzag32,9,opt,name=nonce" json:"nonce,omitempty"`
	TotalRegularTransactions int32    `protobuf:"varint,10,opt,name=total_regular_transactions,json=totalRegularTransactions" json:"total_regular_transactions,omitempty"`
	TotalPopTransactions     int32    `protobuf:"varint,11,opt,name=total_pop_transactions,json=totalPopTransactions" json:"total_pop_transactions,omitempty"`
	MerkleHashes             [][]byte `protobuf:"bytes,12,rep,name=merkle_hashes,json=merkleHashes,proto3" json:"merkle_hashes,omitempty"`
	MerkleFlags              []byte   `protobuf:"bytes,13,opt,name=merkle_flags,json=merkleFlags,proto3" json:"merkle_flags,omitempty"`
}

func (m *FilteredBlock) Reset()                    { *m = FilteredBlock{} }
func (m *FilteredBlock) String() string            { return proto.CompactTextString(m) }
func (*FilteredBlock) ProtoMessage()               {}
func (*FilteredBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *FilteredBlock) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *FilteredBlock) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *FilteredBlock) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *FilteredBlock) GetSecondPreviousHash() []byte {
	if m != nil {
		return m.SecondPreviousHash
	}
	return nil
}

func (m *FilteredBlock) GetThirdPreviousHash() []byte {
	if m != nil {
		return m.ThirdPreviousHash
	}
	return nil
}

func (m *FilteredBlock) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *FilteredBlock) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *FilteredBlock) GetDifficulty() int32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *FilteredBlock) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *FilteredBlock) GetTotalRegularTransactions() int32 {
	if m != nil {
		return m.TotalRegularTransactions
	}
	return 0
}

func (m *FilteredBlock) GetTotalPopTransactions() int32 {
	if m != nil {
		return m.TotalPopTransactions
	}
	return 0
}

func (m *FilteredBlock) GetMerkleHashes() [][]byte {
	if m != nil {
		return m.MerkleHashes
	}
	return nil
}

func (m *FilteredBlock) GetMerkleFlags() []byte {
	if m != nil {
		return m.MerkleFlags
	}
	return nil
}

type LightVBKBlock struct {
	Number                      int32                        `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Timestamp                   int32                        `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Hash                        []byte                       `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	PreviousHash                []byte                       `protobuf:"bytes,4,opt,name=previous_hash,json=previousHash,proto3" json:"previous_hash,omitempty"`
	SecondPreviousHash          []byte                       `protobuf:"bytes,5,opt,name=second_previous_hash,json=secondPreviousHash,proto3" json:"second_previous_hash,omitempty"`
	ThirdPreviousHash           []byte                       `protobuf:"bytes,6,opt,name=third_previous_hash,json=thirdPreviousHash,proto3" json:"third_previous_hash,omitempty"`
	EncodedDifficulty           int32                        `protobuf:"varint,7,opt,name=encoded_difficulty,json=encodedDifficulty" json:"encoded_difficulty,omitempty"`
	WinningNonce                int32                        `protobuf:"zigzag32,8,opt,name=winning_nonce,json=winningNonce" json:"winning_nonce,omitempty"`
	KnownRegularTransactions    []*VBKTransactionWithContext `protobuf:"bytes,9,rep,name=known_regular_transactions,json=knownRegularTransactions" json:"known_regular_transactions,omitempty"`
	PopTransactions             []*TransactionUnion          `protobuf:"bytes,10,rep,name=pop_transactions,json=popTransactions" json:"pop_transactions,omitempty"`
	PowCoinbaseReward           int64                        `protobuf:"varint,11,opt,name=pow_coinbase_reward,json=powCoinbaseReward" json:"pow_coinbase_reward,omitempty"`
	PopCoinbaseReward           int64                        `protobuf:"varint,12,opt,name=pop_coinbase_reward,json=popCoinbaseReward" json:"pop_coinbase_reward,omitempty"`
	BitcoinBlockHeaders         [][]byte                     `protobuf:"bytes,13,rep,name=bitcoin_block_headers,json=bitcoinBlockHeaders,proto3" json:"bitcoin_block_headers,omitempty"`
	BlockContentMetapackage     *BlockContentMetapackage     `protobuf:"bytes,14,opt,name=block_content_metapackage,json=blockContentMetapackage" json:"block_content_metapackage,omitempty"`
	NormalTransactionMerkleRoot []byte                       `protobuf:"bytes,15,opt,name=normal_transaction_merkle_root,json=normalTransactionMerkleRoot,proto3" json:"normal_transaction_merkle_root,omitempty"`
	Version                     int32                        `protobuf:"varint,16,opt,name=version" json:"version,omitempty"`
	MerkleRoot                  []byte                       `protobuf:"bytes,17,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
}

func (m *LightVBKBlock) Reset()                    { *m = LightVBKBlock{} }
func (m *LightVBKBlock) String() string            { return proto.CompactTextString(m) }
func (*LightVBKBlock) ProtoMessage()               {}
func (*LightVBKBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *LightVBKBlock) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *LightVBKBlock) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *LightVBKBlock) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *LightVBKBlock) GetPreviousHash() []byte {
	if m != nil {
		return m.PreviousHash
	}
	return nil
}

func (m *LightVBKBlock) GetSecondPreviousHash() []byte {
	if m != nil {
		return m.SecondPreviousHash
	}
	return nil
}

func (m *LightVBKBlock) GetThirdPreviousHash() []byte {
	if m != nil {
		return m.ThirdPreviousHash
	}
	return nil
}

func (m *LightVBKBlock) GetEncodedDifficulty() int32 {
	if m != nil {
		return m.EncodedDifficulty
	}
	return 0
}

func (m *LightVBKBlock) GetWinningNonce() int32 {
	if m != nil {
		return m.WinningNonce
	}
	return 0
}

func (m *LightVBKBlock) GetKnownRegularTransactions() []*VBKTransactionWithContext {
	if m != nil {
		return m.KnownRegularTransactions
	}
	return nil
}

func (m *LightVBKBlock) GetPopTransactions() []*TransactionUnion {
	if m != nil {
		return m.PopTransactions
	}
	return nil
}

func (m *LightVBKBlock) GetPowCoinbaseReward() int64 {
	if m != nil {
		return m.PowCoinbaseReward
	}
	return 0
}

func (m *LightVBKBlock) GetPopCoinbaseReward() int64 {
	if m != nil {
		return m.PopCoinbaseReward
	}
	return 0
}

func (m *LightVBKBlock) GetBitcoinBlockHeaders() [][]byte {
	if m != nil {
		return m.BitcoinBlockHeaders
	}
	return nil
}

func (m *LightVBKBlock) GetBlockContentMetapackage() *BlockContentMetapackage {
	if m != nil {
		return m.BlockContentMetapackage
	}
	return nil
}

func (m *LightVBKBlock) GetNormalTransactionMerkleRoot() []byte {
	if m != nil {
		return m.NormalTransactionMerkleRoot
	}
	return nil
}

func (m *LightVBKBlock) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *LightVBKBlock) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

type BlockFilter struct {
	// Types that are valid to be assigned to Filters:
	//	*BlockFilter_Hash
	//	*BlockFilter_Index
	//	*BlockFilter_Number
	Filters isBlockFilter_Filters `protobuf_oneof:"filters"`
}

func (m *BlockFilter) Reset()                    { *m = BlockFilter{} }
func (m *BlockFilter) String() string            { return proto.CompactTextString(m) }
func (*BlockFilter) ProtoMessage()               {}
func (*BlockFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type isBlockFilter_Filters interface {
	isBlockFilter_Filters()
}

type BlockFilter_Hash struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3,oneof"`
}
type BlockFilter_Index struct {
	Index int32 `protobuf:"varint,2,opt,name=index,oneof"`
}
type BlockFilter_Number struct {
	Number int32 `protobuf:"varint,3,opt,name=number,oneof"`
}

func (*BlockFilter_Hash) isBlockFilter_Filters()   {}
func (*BlockFilter_Index) isBlockFilter_Filters()  {}
func (*BlockFilter_Number) isBlockFilter_Filters() {}

func (m *BlockFilter) GetFilters() isBlockFilter_Filters {
	if m != nil {
		return m.Filters
	}
	return nil
}

func (m *BlockFilter) GetHash() []byte {
	if x, ok := m.GetFilters().(*BlockFilter_Hash); ok {
		return x.Hash
	}
	return nil
}

func (m *BlockFilter) GetIndex() int32 {
	if x, ok := m.GetFilters().(*BlockFilter_Index); ok {
		return x.Index
	}
	return 0
}

func (m *BlockFilter) GetNumber() int32 {
	if x, ok := m.GetFilters().(*BlockFilter_Number); ok {
		return x.Number
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*BlockFilter) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _BlockFilter_OneofMarshaler, _BlockFilter_OneofUnmarshaler, _BlockFilter_OneofSizer, []interface{}{
		(*BlockFilter_Hash)(nil),
		(*BlockFilter_Index)(nil),
		(*BlockFilter_Number)(nil),
	}
}

func _BlockFilter_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*BlockFilter)
	// filters
	switch x := m.Filters.(type) {
	case *BlockFilter_Hash:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Hash)
	case *BlockFilter_Index:
		b.EncodeVarint(2<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Index))
	case *BlockFilter_Number:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Number))
	case nil:
	default:
		return fmt.Errorf("BlockFilter.Filters has unexpected type %T", x)
	}
	return nil
}

func _BlockFilter_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*BlockFilter)
	switch tag {
	case 1: // filters.hash
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Filters = &BlockFilter_Hash{x}
		return true, err
	case 2: // filters.index
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Filters = &BlockFilter_Index{int32(x)}
		return true, err
	case 3: // filters.number
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Filters = &BlockFilter_Number{int32(x)}
		return true, err
	default:
		return false, nil
	}
}

func _BlockFilter_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*BlockFilter)
	// filters
	switch x := m.Filters.(type) {
	case *BlockFilter_Hash:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Hash)))
		n += len(x.Hash)
	case *BlockFilter_Index:
		n += proto.SizeVarint(2<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Index))
	case *BlockFilter_Number:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Number))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetBlocksRequest struct {
	SearchLength int32          `protobuf:"varint,1,opt,name=search_length,json=searchLength" json:"search_length,omitempty"`
	Filters      []*BlockFilter `protobuf:"bytes,2,rep,name=filters" json:"filters,omitempty"`
}

func (m *GetBlocksRequest) Reset()                    { *m = GetBlocksRequest{} }
func (m *GetBlocksRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlocksRequest) ProtoMessage()               {}
func (*GetBlocksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *GetBlocksRequest) GetSearchLength() int32 {
	if m != nil {
		return m.SearchLength
	}
	return 0
}

func (m *GetBlocksRequest) GetFilters() []*BlockFilter {
	if m != nil {
		return m.Filters
	}
	return nil
}

type Result struct {
	Error   bool   `protobuf:"varint,1,opt,name=error" json:"error,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	Details string `protobuf:"bytes,4,opt,name=details" json:"details,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *Result) GetError() bool {
	if m != nil {
		return m.Error
	}
	return false
}

func (m *Result) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Result) GetDetails() string {
	if m != nil {
		return m.Details
	}
	return ""
}

type ProtocolReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *ProtocolReply) Reset()                    { *m = ProtocolReply{} }
func (m *ProtocolReply) String() string            { return proto.CompactTextString(m) }
func (*ProtocolReply) ProtoMessage()               {}
func (*ProtocolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *ProtocolReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ProtocolReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetBlocksReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Blocks  []*Block  `protobuf:"bytes,3,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *GetBlocksReply) Reset()                    { *m = GetBlocksReply{} }
func (m *GetBlocksReply) String() string            { return proto.CompactTextString(m) }
func (*GetBlocksReply) ProtoMessage()               {}
func (*GetBlocksReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *GetBlocksReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetBlocksReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetBlocksReply) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BackupWalletRequest struct {
	TargetLocation []byte `protobuf:"bytes,1,opt,name=target_location,json=targetLocation,proto3" json:"target_location,omitempty"`
}

func (m *BackupWalletRequest) Reset()                    { *m = BackupWalletRequest{} }
func (m *BackupWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*BackupWalletRequest) ProtoMessage()               {}
func (*BackupWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *BackupWalletRequest) GetTargetLocation() []byte {
	if m != nil {
		return m.TargetLocation
	}
	return nil
}

type BackupWalletReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *BackupWalletReply) Reset()                    { *m = BackupWalletReply{} }
func (m *BackupWalletReply) String() string            { return proto.CompactTextString(m) }
func (*BackupWalletReply) ProtoMessage()               {}
func (*BackupWalletReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *BackupWalletReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *BackupWalletReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type ImportWalletRequest struct {
	SourceLocation []byte `protobuf:"bytes,1,opt,name=source_location,json=sourceLocation,proto3" json:"source_location,omitempty"`
	Passphrase     string `protobuf:"bytes,2,opt,name=passphrase" json:"passphrase,omitempty"`
}

func (m *ImportWalletRequest) Reset()                    { *m = ImportWalletRequest{} }
func (m *ImportWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportWalletRequest) ProtoMessage()               {}
func (*ImportWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ImportWalletRequest) GetSourceLocation() []byte {
	if m != nil {
		return m.SourceLocation
	}
	return nil
}

func (m *ImportWalletRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type ImportWalletReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *ImportWalletReply) Reset()                    { *m = ImportWalletReply{} }
func (m *ImportWalletReply) String() string            { return proto.CompactTextString(m) }
func (*ImportWalletReply) ProtoMessage()               {}
func (*ImportWalletReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *ImportWalletReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ImportWalletReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type Announce struct {
	Reply    bool      `protobuf:"varint,1,opt,name=reply" json:"reply,omitempty"`
	NodeInfo *NodeInfo `protobuf:"bytes,2,opt,name=node_info,json=nodeInfo" json:"node_info,omitempty"`
}

func (m *Announce) Reset()                    { *m = Announce{} }
func (m *Announce) String() string            { return proto.CompactTextString(m) }
func (*Announce) ProtoMessage()               {}
func (*Announce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *Announce) GetReply() bool {
	if m != nil {
		return m.Reply
	}
	return false
}

func (m *Announce) GetNodeInfo() *NodeInfo {
	if m != nil {
		return m.NodeInfo
	}
	return nil
}

type NodeInfo struct {
	Address         string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Port            int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Application     string `protobuf:"bytes,3,opt,name=application" json:"application,omitempty"`
	ProtocolVersion int32  `protobuf:"varint,4,opt,name=protocol_version,json=protocolVersion" json:"protocol_version,omitempty"`
	Platform        string `protobuf:"bytes,5,opt,name=platform" json:"platform,omitempty"`
	StartTimestamp  int32  `protobuf:"varint,6,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	Id              string `protobuf:"bytes,7,opt,name=id" json:"id,omitempty"`
	Share           bool   `protobuf:"varint,8,opt,name=share" json:"share,omitempty"`
	Capabilities    int64  `protobuf:"varint,9,opt,name=capabilities" json:"capabilities,omitempty"`
}

func (m *NodeInfo) Reset()                    { *m = NodeInfo{} }
func (m *NodeInfo) String() string            { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()               {}
func (*NodeInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *NodeInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *NodeInfo) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *NodeInfo) GetApplication() string {
	if m != nil {
		return m.Application
	}
	return ""
}

func (m *NodeInfo) GetProtocolVersion() int32 {
	if m != nil {
		return m.ProtocolVersion
	}
	return 0
}

func (m *NodeInfo) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *NodeInfo) GetStartTimestamp() int32 {
	if m != nil {
		return m.StartTimestamp
	}
	return 0
}

func (m *NodeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *NodeInfo) GetShare() bool {
	if m != nil {
		return m.Share
	}
	return false
}

func (m *NodeInfo) GetCapabilities() int64 {
	if m != nil {
		return m.Capabilities
	}
	return 0
}

type AddBlocksRequest struct {
	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *AddBlocksRequest) Reset()                    { *m = AddBlocksRequest{} }
func (m *AddBlocksRequest) String() string            { return proto.CompactTextString(m) }
func (*AddBlocksRequest) ProtoMessage()               {}
func (*AddBlocksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

func (m *AddBlocksRequest) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type BlockInfo struct {
	Number int32  `protobuf:"varint,1,opt,name=number" json:"number,omitempty"`
	Hash   []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (m *BlockInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *BlockInfo) GetNumber() int32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *BlockInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type AddTransactionsReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	TxIds   [][]byte  `protobuf:"bytes,3,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (m *AddTransactionsReply) Reset()                    { *m = AddTransactionsReply{} }
func (m *AddTransactionsReply) String() string            { return proto.CompactTextString(m) }
func (*AddTransactionsReply) ProtoMessage()               {}
func (*AddTransactionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *AddTransactionsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AddTransactionsReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *AddTransactionsReply) GetTxIds() [][]byte {
	if m != nil {
		return m.TxIds
	}
	return nil
}

type Heartbeat struct {
	Block *BlockInfo `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
}

func (m *Heartbeat) Reset()                    { *m = Heartbeat{} }
func (m *Heartbeat) String() string            { return proto.CompactTextString(m) }
func (*Heartbeat) ProtoMessage()               {}
func (*Heartbeat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *Heartbeat) GetBlock() *BlockInfo {
	if m != nil {
		return m.Block
	}
	return nil
}

type BlockQuery struct {
	Block *BlockInfo `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Id    string     `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *BlockQuery) Reset()                    { *m = BlockQuery{} }
func (m *BlockQuery) String() string            { return proto.CompactTextString(m) }
func (*BlockQuery) ProtoMessage()               {}
func (*BlockQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *BlockQuery) GetBlock() *BlockInfo {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockQuery) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BlockQueryReply struct {
	Matched bool       `protobuf:"varint,1,opt,name=matched" json:"matched,omitempty"`
	Block   *BlockInfo `protobuf:"bytes,2,opt,name=block" json:"block,omitempty"`
	Id      string     `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *BlockQueryReply) Reset()                    { *m = BlockQueryReply{} }
func (m *BlockQueryReply) String() string            { return proto.CompactTextString(m) }
func (*BlockQueryReply) ProtoMessage()               {}
func (*BlockQueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *BlockQueryReply) GetMatched() bool {
	if m != nil {
		return m.Matched
	}
	return false
}

func (m *BlockQueryReply) GetBlock() *BlockInfo {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockQueryReply) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type SyncRequest struct {
	StartingBlockHeight int32 `protobuf:"varint,1,opt,name=starting_block_height,json=startingBlockHeight" json:"starting_block_height,omitempty"`
	SyncTransactions    bool  `protobuf:"varint,2,opt,name=sync_transactions,json=syncTransactions" json:"sync_transactions,omitempty"`
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *SyncRequest) GetStartingBlockHeight() int32 {
	if m != nil {
		return m.StartingBlockHeight
	}
	return 0
}

func (m *SyncRequest) GetSyncTransactions() bool {
	if m != nil {
		return m.SyncTransactions
	}
	return false
}

type NetworkInfoRequest struct {
}

func (m *NetworkInfoRequest) Reset()                    { *m = NetworkInfoRequest{} }
func (m *NetworkInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfoRequest) ProtoMessage()               {}
func (*NetworkInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

type NetworkInfoReply struct {
	AvailableNodes []*NodeInfo `protobuf:"bytes,1,rep,name=available_nodes,json=availableNodes" json:"available_nodes,omitempty"`
}

func (m *NetworkInfoReply) Reset()                    { *m = NetworkInfoReply{} }
func (m *NetworkInfoReply) String() string            { return proto.CompactTextString(m) }
func (*NetworkInfoReply) ProtoMessage()               {}
func (*NetworkInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *NetworkInfoReply) GetAvailableNodes() []*NodeInfo {
	if m != nil {
		return m.AvailableNodes
	}
	return nil
}

type Acknowledgement struct {
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId" json:"message_id,omitempty"`
}

func (m *Acknowledgement) Reset()                    { *m = Acknowledgement{} }
func (m *Acknowledgement) String() string            { return proto.CompactTextString(m) }
func (*Acknowledgement) ProtoMessage()               {}
func (*Acknowledgement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *Acknowledgement) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type AdvertiseBlocks struct {
	Headers []*BlockHeader `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
}

func (m *AdvertiseBlocks) Reset()                    { *m = AdvertiseBlocks{} }
func (m *AdvertiseBlocks) String() string            { return proto.CompactTextString(m) }
func (*AdvertiseBlocks) ProtoMessage()               {}
func (*AdvertiseBlocks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *AdvertiseBlocks) GetHeaders() []*BlockHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

type TransactionAnnounce struct {
	Type TransactionAnnounce_Type `protobuf:"varint,1,opt,name=type,enum=core.TransactionAnnounce_Type" json:"type,omitempty"`
	TxId []byte                   `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *TransactionAnnounce) Reset()                    { *m = TransactionAnnounce{} }
func (m *TransactionAnnounce) String() string            { return proto.CompactTextString(m) }
func (*TransactionAnnounce) ProtoMessage()               {}
func (*TransactionAnnounce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

func (m *TransactionAnnounce) GetType() TransactionAnnounce_Type {
	if m != nil {
		return m.Type
	}
	return TransactionAnnounce_NORMAL
}

func (m *TransactionAnnounce) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

type AdvertiseTransaction struct {
	Transactions []*TransactionAnnounce `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *AdvertiseTransaction) Reset()                    { *m = AdvertiseTransaction{} }
func (m *AdvertiseTransaction) String() string            { return proto.CompactTextString(m) }
func (*AdvertiseTransaction) ProtoMessage()               {}
func (*AdvertiseTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *AdvertiseTransaction) GetTransactions() []*TransactionAnnounce {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type BlockRequest struct {
	Headers []*BlockHeader `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
}

func (m *BlockRequest) Reset()                    { *m = BlockRequest{} }
func (m *BlockRequest) String() string            { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()               {}
func (*BlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *BlockRequest) GetHeaders() []*BlockHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

type TransactionRequest struct {
	Transactions []*TransactionAnnounce `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionRequest) Reset()                    { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()               {}
func (*TransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *TransactionRequest) GetTransactions() []*TransactionAnnounce {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type KeystoneQuery struct {
	Headers []*BlockHeader `protobuf:"bytes,1,rep,name=headers" json:"headers,omitempty"`
}

func (m *KeystoneQuery) Reset()                    { *m = KeystoneQuery{} }
func (m *KeystoneQuery) String() string            { return proto.CompactTextString(m) }
func (*KeystoneQuery) ProtoMessage()               {}
func (*KeystoneQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *KeystoneQuery) GetHeaders() []*BlockHeader {
	if m != nil {
		return m.Headers
	}
	return nil
}

type NotFound struct {
	Type NotFound_Type `protobuf:"varint,1,opt,name=type,enum=core.NotFound_Type" json:"type,omitempty"`
	Id   []byte        `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *NotFound) Reset()                    { *m = NotFound{} }
func (m *NotFound) String() string            { return proto.CompactTextString(m) }
func (*NotFound) ProtoMessage()               {}
func (*NotFound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *NotFound) GetType() NotFound_Type {
	if m != nil {
		return m.Type
	}
	return NotFound_BLOCK
}

func (m *NotFound) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type CreateFilter struct {
	Filter         []byte `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	HashIterations int32  `protobuf:"varint,2,opt,name=hash_iterations,json=hashIterations" json:"hash_iterations,omitempty"`
	Tweak          int32  `protobuf:"varint,3,opt,name=tweak" json:"tweak,omitempty"`
	Flags          int32  `protobuf:"varint,4,opt,name=flags" json:"flags,omitempty"`
}

func (m *CreateFilter) Reset()                    { *m = CreateFilter{} }
func (m *CreateFilter) String() string            { return proto.CompactTextString(m) }
func (*CreateFilter) ProtoMessage()               {}
func (*CreateFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *CreateFilter) GetFilter() []byte {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *CreateFilter) GetHashIterations() int32 {
	if m != nil {
		return m.HashIterations
	}
	return 0
}

func (m *CreateFilter) GetTweak() int32 {
	if m != nil {
		return m.Tweak
	}
	return 0
}

func (m *CreateFilter) GetFlags() int32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

type AddFilter struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AddFilter) Reset()                    { *m = AddFilter{} }
func (m *AddFilter) String() string            { return proto.CompactTextString(m) }
func (*AddFilter) ProtoMessage()               {}
func (*AddFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *AddFilter) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ClearFilter struct {
}

func (m *ClearFilter) Reset()                    { *m = ClearFilter{} }
func (m *ClearFilter) String() string            { return proto.CompactTextString(m) }
func (*ClearFilter) ProtoMessage()               {}
func (*ClearFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

type Event struct {
	// Types that are valid to be assigned to Results:
	//	*Event_Block
	//	*Event_Transaction
	//	*Event_Announce
	//	*Event_Heartbeat
	//	*Event_BlockQuery
	//	*Event_BlockQueryReply
	//	*Event_NetworkInfoRequest
	//	*Event_NetworkInfoReply
	//	*Event_Acknowledgement
	//	*Event_AdvertiseBlocks
	//	*Event_BlockRequest
	//	*Event_KeystoneQuery
	//	*Event_AdvertiseTx
	//	*Event_TxRequest
	//	*Event_NotFound
	//	*Event_CreateFilter
	//	*Event_AddFilter
	//	*Event_ClearFilter
	//	*Event_FilteredBlockRequest
	//	*Event_FilteredBlock
	Results     isEvent_Results `protobuf_oneof:"results"`
	Id          string          `protobuf:"bytes,11,opt,name=id" json:"id,omitempty"`
	Acknowledge bool            `protobuf:"varint,12,opt,name=acknowledge" json:"acknowledge,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

type isEvent_Results interface {
	isEvent_Results()
}

type Event_Block struct {
	Block *Block `protobuf:"bytes,1,opt,name=block,oneof"`
}
type Event_Transaction struct {
	Transaction *TransactionUnion `protobuf:"bytes,2,opt,name=transaction,oneof"`
}
type Event_Announce struct {
	Announce *Announce `protobuf:"bytes,3,opt,name=announce,oneof"`
}
type Event_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,4,opt,name=heartbeat,oneof"`
}
type Event_BlockQuery struct {
	BlockQuery *BlockQuery `protobuf:"bytes,5,opt,name=block_query,json=blockQuery,oneof"`
}
type Event_BlockQueryReply struct {
	BlockQueryReply *BlockQueryReply `protobuf:"bytes,6,opt,name=block_query_reply,json=blockQueryReply,oneof"`
}
type Event_NetworkInfoRequest struct {
	NetworkInfoRequest *NetworkInfoRequest `protobuf:"bytes,8,opt,name=network_info_request,json=networkInfoRequest,oneof"`
}
type Event_NetworkInfoReply struct {
	NetworkInfoReply *NetworkInfoReply `protobuf:"bytes,9,opt,name=network_info_reply,json=networkInfoReply,oneof"`
}
type Event_Acknowledgement struct {
	Acknowledgement *Acknowledgement `protobuf:"bytes,10,opt,name=acknowledgement,oneof"`
}
type Event_AdvertiseBlocks struct {
	AdvertiseBlocks *AdvertiseBlocks `protobuf:"bytes,13,opt,name=advertise_blocks,json=advertiseBlocks,oneof"`
}
type Event_BlockRequest struct {
	BlockRequest *BlockRequest `protobuf:"bytes,14,opt,name=block_request,json=blockRequest,oneof"`
}
type Event_KeystoneQuery struct {
	KeystoneQuery *KeystoneQuery `protobuf:"bytes,15,opt,name=keystone_query,json=keystoneQuery,oneof"`
}
type Event_AdvertiseTx struct {
	AdvertiseTx *AdvertiseTransaction `protobuf:"bytes,16,opt,name=advertise_tx,json=advertiseTx,oneof"`
}
type Event_TxRequest struct {
	TxRequest *TransactionRequest `protobuf:"bytes,17,opt,name=tx_request,json=txRequest,oneof"`
}
type Event_NotFound struct {
	NotFound *NotFound `protobuf:"bytes,18,opt,name=not_found,json=notFound,oneof"`
}
type Event_CreateFilter struct {
	CreateFilter *CreateFilter `protobuf:"bytes,19,opt,name=create_filter,json=createFilter,oneof"`
}
type Event_AddFilter struct {
	AddFilter *AddFilter `protobuf:"bytes,20,opt,name=add_filter,json=addFilter,oneof"`
}
type Event_ClearFilter struct {
	ClearFilter *ClearFilter `protobuf:"bytes,21,opt,name=clear_filter,json=clearFilter,oneof"`
}
type Event_FilteredBlockRequest struct {
	FilteredBlockRequest *BlockRequest `protobuf:"bytes,22,opt,name=filtered_block_request,json=filteredBlockRequest,oneof"`
}
type Event_FilteredBlock struct {
	FilteredBlock *FilteredBlock `protobuf:"bytes,23,opt,name=filtered_block,json=filteredBlock,oneof"`
}

func (*Event_Block) isEvent_Results()                {}
func (*Event_Transaction) isEvent_Results()          {}
func (*Event_Announce) isEvent_Results()             {}
func (*Event_Heartbeat) isEvent_Results()            {}
func (*Event_BlockQuery) isEvent_Results()           {}
func (*Event_BlockQueryReply) isEvent_Results()      {}
func (*Event_NetworkInfoRequest) isEvent_Results()   {}
func (*Event_NetworkInfoReply) isEvent_Results()     {}
func (*Event_Acknowledgement) isEvent_Results()      {}
func (*Event_AdvertiseBlocks) isEvent_Results()      {}
func (*Event_BlockRequest) isEvent_Results()         {}
func (*Event_KeystoneQuery) isEvent_Results()        {}
func (*Event_AdvertiseTx) isEvent_Results()          {}
func (*Event_TxRequest) isEvent_Results()            {}
func (*Event_NotFound) isEvent_Results()             {}
func (*Event_CreateFilter) isEvent_Results()         {}
func (*Event_AddFilter) isEvent_Results()            {}
func (*Event_ClearFilter) isEvent_Results()          {}
func (*Event_FilteredBlockRequest) isEvent_Results() {}
func (*Event_FilteredBlock) isEvent_Results()        {}

func (m *Event) GetResults() isEvent_Results {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *Event) GetBlock() *Block {
	if x, ok := m.GetResults().(*Event_Block); ok {
		return x.Block
	}
	return nil
}

func (m *Event) GetTransaction() *TransactionUnion {
	if x, ok := m.GetResults().(*Event_Transaction); ok {
		return x.Transaction
	}
	return nil
}

func (m *Event) GetAnnounce() *Announce {
	if x, ok := m.GetResults().(*Event_Announce); ok {
		return x.Announce
	}
	return nil
}

func (m *Event) GetHeartbeat() *Heartbeat {
	if x, ok := m.GetResults().(*Event_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (m *Event) GetBlockQuery() *BlockQuery {
	if x, ok := m.GetResults().(*Event_BlockQuery); ok {
		return x.BlockQuery
	}
	return nil
}

func (m *Event) GetBlockQueryReply() *BlockQueryReply {
	if x, ok := m.GetResults().(*Event_BlockQueryReply); ok {
		return x.BlockQueryReply
	}
	return nil
}

func (m *Event) GetNetworkInfoRequest() *NetworkInfoRequest {
	if x, ok := m.GetResults().(*Event_NetworkInfoRequest); ok {
		return x.NetworkInfoRequest
	}
	return nil
}

func (m *Event) GetNetworkInfoReply() *NetworkInfoReply {
	if x, ok := m.GetResults().(*Event_NetworkInfoReply); ok {
		return x.NetworkInfoReply
	}
	return nil
}

func (m *Event) GetAcknowledgement() *Acknowledgement {
	if x, ok := m.GetResults().(*Event_Acknowledgement); ok {
		return x.Acknowledgement
	}
	return nil
}

func (m *Event) GetAdvertiseBlocks() *AdvertiseBlocks {
	if x, ok := m.GetResults().(*Event_AdvertiseBlocks); ok {
		return x.AdvertiseBlocks
	}
	return nil
}

func (m *Event) GetBlockRequest() *BlockRequest {
	if x, ok := m.GetResults().(*Event_BlockRequest); ok {
		return x.BlockRequest
	}
	return nil
}

func (m *Event) GetKeystoneQuery() *KeystoneQuery {
	if x, ok := m.GetResults().(*Event_KeystoneQuery); ok {
		return x.KeystoneQuery
	}
	return nil
}

func (m *Event) GetAdvertiseTx() *AdvertiseTransaction {
	if x, ok := m.GetResults().(*Event_AdvertiseTx); ok {
		return x.AdvertiseTx
	}
	return nil
}

func (m *Event) GetTxRequest() *TransactionRequest {
	if x, ok := m.GetResults().(*Event_TxRequest); ok {
		return x.TxRequest
	}
	return nil
}

func (m *Event) GetNotFound() *NotFound {
	if x, ok := m.GetResults().(*Event_NotFound); ok {
		return x.NotFound
	}
	return nil
}

func (m *Event) GetCreateFilter() *CreateFilter {
	if x, ok := m.GetResults().(*Event_CreateFilter); ok {
		return x.CreateFilter
	}
	return nil
}

func (m *Event) GetAddFilter() *AddFilter {
	if x, ok := m.GetResults().(*Event_AddFilter); ok {
		return x.AddFilter
	}
	return nil
}

func (m *Event) GetClearFilter() *ClearFilter {
	if x, ok := m.GetResults().(*Event_ClearFilter); ok {
		return x.ClearFilter
	}
	return nil
}

func (m *Event) GetFilteredBlockRequest() *BlockRequest {
	if x, ok := m.GetResults().(*Event_FilteredBlockRequest); ok {
		return x.FilteredBlockRequest
	}
	return nil
}

func (m *Event) GetFilteredBlock() *FilteredBlock {
	if x, ok := m.GetResults().(*Event_FilteredBlock); ok {
		return x.FilteredBlock
	}
	return nil
}

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetAcknowledge() bool {
	if m != nil {
		return m.Acknowledge
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Event) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Event_OneofMarshaler, _Event_OneofUnmarshaler, _Event_OneofSizer, []interface{}{
		(*Event_Block)(nil),
		(*Event_Transaction)(nil),
		(*Event_Announce)(nil),
		(*Event_Heartbeat)(nil),
		(*Event_BlockQuery)(nil),
		(*Event_BlockQueryReply)(nil),
		(*Event_NetworkInfoRequest)(nil),
		(*Event_NetworkInfoReply)(nil),
		(*Event_Acknowledgement)(nil),
		(*Event_AdvertiseBlocks)(nil),
		(*Event_BlockRequest)(nil),
		(*Event_KeystoneQuery)(nil),
		(*Event_AdvertiseTx)(nil),
		(*Event_TxRequest)(nil),
		(*Event_NotFound)(nil),
		(*Event_CreateFilter)(nil),
		(*Event_AddFilter)(nil),
		(*Event_ClearFilter)(nil),
		(*Event_FilteredBlockRequest)(nil),
		(*Event_FilteredBlock)(nil),
	}
}

func _Event_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Event)
	// results
	switch x := m.Results.(type) {
	case *Event_Block:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *Event_Transaction:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Transaction); err != nil {
			return err
		}
	case *Event_Announce:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Announce); err != nil {
			return err
		}
	case *Event_Heartbeat:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Heartbeat); err != nil {
			return err
		}
	case *Event_BlockQuery:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockQuery); err != nil {
			return err
		}
	case *Event_BlockQueryReply:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockQueryReply); err != nil {
			return err
		}
	case *Event_NetworkInfoRequest:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NetworkInfoRequest); err != nil {
			return err
		}
	case *Event_NetworkInfoReply:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NetworkInfoReply); err != nil {
			return err
		}
	case *Event_Acknowledgement:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Acknowledgement); err != nil {
			return err
		}
	case *Event_AdvertiseBlocks:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseBlocks); err != nil {
			return err
		}
	case *Event_BlockRequest:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BlockRequest); err != nil {
			return err
		}
	case *Event_KeystoneQuery:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.KeystoneQuery); err != nil {
			return err
		}
	case *Event_AdvertiseTx:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AdvertiseTx); err != nil {
			return err
		}
	case *Event_TxRequest:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TxRequest); err != nil {
			return err
		}
	case *Event_NotFound:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NotFound); err != nil {
			return err
		}
	case *Event_CreateFilter:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CreateFilter); err != nil {
			return err
		}
	case *Event_AddFilter:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.AddFilter); err != nil {
			return err
		}
	case *Event_ClearFilter:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ClearFilter); err != nil {
			return err
		}
	case *Event_FilteredBlockRequest:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FilteredBlockRequest); err != nil {
			return err
		}
	case *Event_FilteredBlock:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FilteredBlock); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Event.Results has unexpected type %T", x)
	}
	return nil
}

func _Event_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Event)
	switch tag {
	case 1: // results.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.Results = &Event_Block{msg}
		return true, err
	case 2: // results.transaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransactionUnion)
		err := b.DecodeMessage(msg)
		m.Results = &Event_Transaction{msg}
		return true, err
	case 3: // results.announce
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Announce)
		err := b.DecodeMessage(msg)
		m.Results = &Event_Announce{msg}
		return true, err
	case 4: // results.heartbeat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Heartbeat)
		err := b.DecodeMessage(msg)
		m.Results = &Event_Heartbeat{msg}
		return true, err
	case 5: // results.block_query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockQuery)
		err := b.DecodeMessage(msg)
		m.Results = &Event_BlockQuery{msg}
		return true, err
	case 6: // results.block_query_reply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockQueryReply)
		err := b.DecodeMessage(msg)
		m.Results = &Event_BlockQueryReply{msg}
		return true, err
	case 8: // results.network_info_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NetworkInfoRequest)
		err := b.DecodeMessage(msg)
		m.Results = &Event_NetworkInfoRequest{msg}
		return true, err
	case 9: // results.network_info_reply
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NetworkInfoReply)
		err := b.DecodeMessage(msg)
		m.Results = &Event_NetworkInfoReply{msg}
		return true, err
	case 10: // results.acknowledgement
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Acknowledgement)
		err := b.DecodeMessage(msg)
		m.Results = &Event_Acknowledgement{msg}
		return true, err
	case 13: // results.advertise_blocks
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdvertiseBlocks)
		err := b.DecodeMessage(msg)
		m.Results = &Event_AdvertiseBlocks{msg}
		return true, err
	case 14: // results.block_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockRequest)
		err := b.DecodeMessage(msg)
		m.Results = &Event_BlockRequest{msg}
		return true, err
	case 15: // results.keystone_query
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(KeystoneQuery)
		err := b.DecodeMessage(msg)
		m.Results = &Event_KeystoneQuery{msg}
		return true, err
	case 16: // results.advertise_tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AdvertiseTransaction)
		err := b.DecodeMessage(msg)
		m.Results = &Event_AdvertiseTx{msg}
		return true, err
	case 17: // results.tx_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransactionRequest)
		err := b.DecodeMessage(msg)
		m.Results = &Event_TxRequest{msg}
		return true, err
	case 18: // results.not_found
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NotFound)
		err := b.DecodeMessage(msg)
		m.Results = &Event_NotFound{msg}
		return true, err
	case 19: // results.create_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CreateFilter)
		err := b.DecodeMessage(msg)
		m.Results = &Event_CreateFilter{msg}
		return true, err
	case 20: // results.add_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(AddFilter)
		err := b.DecodeMessage(msg)
		m.Results = &Event_AddFilter{msg}
		return true, err
	case 21: // results.clear_filter
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ClearFilter)
		err := b.DecodeMessage(msg)
		m.Results = &Event_ClearFilter{msg}
		return true, err
	case 22: // results.filtered_block_request
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BlockRequest)
		err := b.DecodeMessage(msg)
		m.Results = &Event_FilteredBlockRequest{msg}
		return true, err
	case 23: // results.filtered_block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(FilteredBlock)
		err := b.DecodeMessage(msg)
		m.Results = &Event_FilteredBlock{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Event_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Event)
	// results
	switch x := m.Results.(type) {
	case *Event_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Transaction:
		s := proto.Size(x.Transaction)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Announce:
		s := proto.Size(x.Announce)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Heartbeat:
		s := proto.Size(x.Heartbeat)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_BlockQuery:
		s := proto.Size(x.BlockQuery)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_BlockQueryReply:
		s := proto.Size(x.BlockQueryReply)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_NetworkInfoRequest:
		s := proto.Size(x.NetworkInfoRequest)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_NetworkInfoReply:
		s := proto.Size(x.NetworkInfoReply)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_Acknowledgement:
		s := proto.Size(x.Acknowledgement)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_AdvertiseBlocks:
		s := proto.Size(x.AdvertiseBlocks)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_BlockRequest:
		s := proto.Size(x.BlockRequest)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_KeystoneQuery:
		s := proto.Size(x.KeystoneQuery)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_AdvertiseTx:
		s := proto.Size(x.AdvertiseTx)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_TxRequest:
		s := proto.Size(x.TxRequest)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_NotFound:
		s := proto.Size(x.NotFound)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_CreateFilter:
		s := proto.Size(x.CreateFilter)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_AddFilter:
		s := proto.Size(x.AddFilter)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_ClearFilter:
		s := proto.Size(x.ClearFilter)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_FilteredBlockRequest:
		s := proto.Size(x.FilteredBlockRequest)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Event_FilteredBlock:
		s := proto.Size(x.FilteredBlock)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type NodeRequest struct {
	Endpoint []*Endpoint `protobuf:"bytes,1,rep,name=endpoint" json:"endpoint,omitempty"`
}

func (m *NodeRequest) Reset()                    { *m = NodeRequest{} }
func (m *NodeRequest) String() string            { return proto.CompactTextString(m) }
func (*NodeRequest) ProtoMessage()               {}
func (*NodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *NodeRequest) GetEndpoint() []*Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

type StartPoolRequest struct {
	Type []byte `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *StartPoolRequest) Reset()                    { *m = StartPoolRequest{} }
func (m *StartPoolRequest) String() string            { return proto.CompactTextString(m) }
func (*StartPoolRequest) ProtoMessage()               {}
func (*StartPoolRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

func (m *StartPoolRequest) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

type StartPoolReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *StartPoolReply) Reset()                    { *m = StartPoolReply{} }
func (m *StartPoolReply) String() string            { return proto.CompactTextString(m) }
func (*StartPoolReply) ProtoMessage()               {}
func (*StartPoolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *StartPoolReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *StartPoolReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type StopPoolRequest struct {
}

func (m *StopPoolRequest) Reset()                    { *m = StopPoolRequest{} }
func (m *StopPoolRequest) String() string            { return proto.CompactTextString(m) }
func (*StopPoolRequest) ProtoMessage()               {}
func (*StopPoolRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

type StopPoolReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *StopPoolReply) Reset()                    { *m = StopPoolReply{} }
func (m *StopPoolReply) String() string            { return proto.CompactTextString(m) }
func (*StopPoolReply) ProtoMessage()               {}
func (*StopPoolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *StopPoolReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *StopPoolReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type RestartPoolWebServerRequest struct {
}

func (m *RestartPoolWebServerRequest) Reset()                    { *m = RestartPoolWebServerRequest{} }
func (m *RestartPoolWebServerRequest) String() string            { return proto.CompactTextString(m) }
func (*RestartPoolWebServerRequest) ProtoMessage()               {}
func (*RestartPoolWebServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

type RestartPoolWebServerReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *RestartPoolWebServerReply) Reset()                    { *m = RestartPoolWebServerReply{} }
func (m *RestartPoolWebServerReply) String() string            { return proto.CompactTextString(m) }
func (*RestartPoolWebServerReply) ProtoMessage()               {}
func (*RestartPoolWebServerReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *RestartPoolWebServerReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RestartPoolWebServerReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetPopRequest struct {
	BlockNum int32 `protobuf:"varint,1,opt,name=block_num,json=blockNum" json:"block_num,omitempty"`
}

func (m *GetPopRequest) Reset()                    { *m = GetPopRequest{} }
func (m *GetPopRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPopRequest) ProtoMessage()               {}
func (*GetPopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *GetPopRequest) GetBlockNum() int32 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

type GetPopReply struct {
	Success                 bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results                 []*Result             `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	BlockHeight             int32                 `protobuf:"varint,3,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	Version                 int32                 `protobuf:"varint,4,opt,name=version" json:"version,omitempty"`
	PreviousBlockHash       []byte                `protobuf:"bytes,5,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	SecondPreviousBlockHash []byte                `protobuf:"bytes,6,opt,name=second_previous_block_hash,json=secondPreviousBlockHash,proto3" json:"second_previous_block_hash,omitempty"`
	ThirdPreviousBlockHash  []byte                `protobuf:"bytes,7,opt,name=third_previous_block_hash,json=thirdPreviousBlockHash,proto3" json:"third_previous_block_hash,omitempty"`
	MerkleRoot              []byte                `protobuf:"bytes,8,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Timestamp               int32                 `protobuf:"varint,9,opt,name=timestamp" json:"timestamp,omitempty"`
	EncodedDifficulty       int32                 `protobuf:"varint,10,opt,name=encoded_difficulty,json=encodedDifficulty" json:"encoded_difficulty,omitempty"`
	Nonce                   int32                 `protobuf:"zigzag32,11,opt,name=nonce" json:"nonce,omitempty"`
	PopMinerAddress         []byte                `protobuf:"bytes,12,opt,name=pop_miner_address,json=popMinerAddress,proto3" json:"pop_miner_address,omitempty"`
	FullPop                 []byte                `protobuf:"bytes,13,opt,name=full_pop,json=fullPop,proto3" json:"full_pop,omitempty"`
	LastKnownBlock          *BitcoinBlockHeader   `protobuf:"bytes,14,opt,name=last_known_block,json=lastKnownBlock" json:"last_known_block,omitempty"`
	LastKnownBlockContext   []*BitcoinBlockHeader `protobuf:"bytes,15,rep,name=last_known_block_context,json=lastKnownBlockContext" json:"last_known_block_context,omitempty"`
}

func (m *GetPopReply) Reset()                    { *m = GetPopReply{} }
func (m *GetPopReply) String() string            { return proto.CompactTextString(m) }
func (*GetPopReply) ProtoMessage()               {}
func (*GetPopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *GetPopReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetPopReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetPopReply) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *GetPopReply) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GetPopReply) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

func (m *GetPopReply) GetSecondPreviousBlockHash() []byte {
	if m != nil {
		return m.SecondPreviousBlockHash
	}
	return nil
}

func (m *GetPopReply) GetThirdPreviousBlockHash() []byte {
	if m != nil {
		return m.ThirdPreviousBlockHash
	}
	return nil
}

func (m *GetPopReply) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *GetPopReply) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *GetPopReply) GetEncodedDifficulty() int32 {
	if m != nil {
		return m.EncodedDifficulty
	}
	return 0
}

func (m *GetPopReply) GetNonce() int32 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *GetPopReply) GetPopMinerAddress() []byte {
	if m != nil {
		return m.PopMinerAddress
	}
	return nil
}

func (m *GetPopReply) GetFullPop() []byte {
	if m != nil {
		return m.FullPop
	}
	return nil
}

func (m *GetPopReply) GetLastKnownBlock() *BitcoinBlockHeader {
	if m != nil {
		return m.LastKnownBlock
	}
	return nil
}

func (m *GetPopReply) GetLastKnownBlockContext() []*BitcoinBlockHeader {
	if m != nil {
		return m.LastKnownBlockContext
	}
	return nil
}

type GetInfoRequest struct {
}

func (m *GetInfoRequest) Reset()                    { *m = GetInfoRequest{} }
func (m *GetInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetInfoRequest) ProtoMessage()               {}
func (*GetInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

type GetDiagnosticInfoRequest struct {
}

func (m *GetDiagnosticInfoRequest) Reset()                    { *m = GetDiagnosticInfoRequest{} }
func (m *GetDiagnosticInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDiagnosticInfoRequest) ProtoMessage()               {}
func (*GetDiagnosticInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

type GetBalanceRequest struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *GetBalanceRequest) Reset()                    { *m = GetBalanceRequest{} }
func (m *GetBalanceRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBalanceRequest) ProtoMessage()               {}
func (*GetBalanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *GetBalanceRequest) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type GetBalanceReply struct {
	Success     bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results     []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Confirmed   []*Output `protobuf:"bytes,3,rep,name=confirmed" json:"confirmed,omitempty"`
	Unconfirmed []*Output `protobuf:"bytes,4,rep,name=unconfirmed" json:"unconfirmed,omitempty"`
}

func (m *GetBalanceReply) Reset()                    { *m = GetBalanceReply{} }
func (m *GetBalanceReply) String() string            { return proto.CompactTextString(m) }
func (*GetBalanceReply) ProtoMessage()               {}
func (*GetBalanceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

func (m *GetBalanceReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetBalanceReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetBalanceReply) GetConfirmed() []*Output {
	if m != nil {
		return m.Confirmed
	}
	return nil
}

func (m *GetBalanceReply) GetUnconfirmed() []*Output {
	if m != nil {
		return m.Unconfirmed
	}
	return nil
}

type SubmitPopRequest struct {
	EndorsedBlockHeader        []byte                `protobuf:"bytes,1,opt,name=endorsed_block_header,json=endorsedBlockHeader,proto3" json:"endorsed_block_header,omitempty"`
	BitcoinTransaction         []byte                `protobuf:"bytes,2,opt,name=bitcoin_transaction,json=bitcoinTransaction,proto3" json:"bitcoin_transaction,omitempty"`
	BitcoinMerklePathToRoot    []byte                `protobuf:"bytes,3,opt,name=bitcoin_merkle_path_to_root,json=bitcoinMerklePathToRoot,proto3" json:"bitcoin_merkle_path_to_root,omitempty"`
	BitcoinBlockHeaderOfProof  *BitcoinBlockHeader   `protobuf:"bytes,4,opt,name=bitcoin_block_header_of_proof,json=bitcoinBlockHeaderOfProof" json:"bitcoin_block_header_of_proof,omitempty"`
	ContextBitcoinBlockHeaders []*BitcoinBlockHeader `protobuf:"bytes,5,rep,name=context_bitcoin_block_headers,json=contextBitcoinBlockHeaders" json:"context_bitcoin_block_headers,omitempty"`
	Address                    []byte                `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SubmitPopRequest) Reset()                    { *m = SubmitPopRequest{} }
func (m *SubmitPopRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitPopRequest) ProtoMessage()               {}
func (*SubmitPopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *SubmitPopRequest) GetEndorsedBlockHeader() []byte {
	if m != nil {
		return m.EndorsedBlockHeader
	}
	return nil
}

func (m *SubmitPopRequest) GetBitcoinTransaction() []byte {
	if m != nil {
		return m.BitcoinTransaction
	}
	return nil
}

func (m *SubmitPopRequest) GetBitcoinMerklePathToRoot() []byte {
	if m != nil {
		return m.BitcoinMerklePathToRoot
	}
	return nil
}

func (m *SubmitPopRequest) GetBitcoinBlockHeaderOfProof() *BitcoinBlockHeader {
	if m != nil {
		return m.BitcoinBlockHeaderOfProof
	}
	return nil
}

func (m *SubmitPopRequest) GetContextBitcoinBlockHeaders() []*BitcoinBlockHeader {
	if m != nil {
		return m.ContextBitcoinBlockHeaders
	}
	return nil
}

func (m *SubmitPopRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type PoPEndorsement struct {
	EndorsedBlockHeader       []byte              `protobuf:"bytes,1,opt,name=endorsed_block_header,json=endorsedBlockHeader,proto3" json:"endorsed_block_header,omitempty"`
	BitcoinTransaction        []byte              `protobuf:"bytes,2,opt,name=bitcoin_transaction,json=bitcoinTransaction,proto3" json:"bitcoin_transaction,omitempty"`
	BitcoinMerklePathToRoot   []byte              `protobuf:"bytes,3,opt,name=bitcoin_merkle_path_to_root,json=bitcoinMerklePathToRoot,proto3" json:"bitcoin_merkle_path_to_root,omitempty"`
	BitcoinBlockHeaderOfProof *BitcoinBlockHeader `protobuf:"bytes,4,opt,name=bitcoin_block_header_of_proof,json=bitcoinBlockHeaderOfProof" json:"bitcoin_block_header_of_proof,omitempty"`
	Address                   []byte              `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *PoPEndorsement) Reset()                    { *m = PoPEndorsement{} }
func (m *PoPEndorsement) String() string            { return proto.CompactTextString(m) }
func (*PoPEndorsement) ProtoMessage()               {}
func (*PoPEndorsement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *PoPEndorsement) GetEndorsedBlockHeader() []byte {
	if m != nil {
		return m.EndorsedBlockHeader
	}
	return nil
}

func (m *PoPEndorsement) GetBitcoinTransaction() []byte {
	if m != nil {
		return m.BitcoinTransaction
	}
	return nil
}

func (m *PoPEndorsement) GetBitcoinMerklePathToRoot() []byte {
	if m != nil {
		return m.BitcoinMerklePathToRoot
	}
	return nil
}

func (m *PoPEndorsement) GetBitcoinBlockHeaderOfProof() *BitcoinBlockHeader {
	if m != nil {
		return m.BitcoinBlockHeaderOfProof
	}
	return nil
}

func (m *PoPEndorsement) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type GetEndorsementsOfBlockRequest struct {
	Filter *BlockFilter `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *GetEndorsementsOfBlockRequest) Reset()                    { *m = GetEndorsementsOfBlockRequest{} }
func (m *GetEndorsementsOfBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetEndorsementsOfBlockRequest) ProtoMessage()               {}
func (*GetEndorsementsOfBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *GetEndorsementsOfBlockRequest) GetFilter() *BlockFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

type GetEndorsementsOfBlockReply struct {
	Success      bool              `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Endorsements []*PoPEndorsement `protobuf:"bytes,2,rep,name=endorsements" json:"endorsements,omitempty"`
}

func (m *GetEndorsementsOfBlockReply) Reset()                    { *m = GetEndorsementsOfBlockReply{} }
func (m *GetEndorsementsOfBlockReply) String() string            { return proto.CompactTextString(m) }
func (*GetEndorsementsOfBlockReply) ProtoMessage()               {}
func (*GetEndorsementsOfBlockReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *GetEndorsementsOfBlockReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetEndorsementsOfBlockReply) GetEndorsements() []*PoPEndorsement {
	if m != nil {
		return m.Endorsements
	}
	return nil
}

type SendCoinsRequest struct {
	SourceAddress []byte    `protobuf:"bytes,1,opt,name=source_address,json=sourceAddress,proto3" json:"source_address,omitempty"`
	Amounts       []*Output `protobuf:"bytes,2,rep,name=amounts" json:"amounts,omitempty"`
}

func (m *SendCoinsRequest) Reset()                    { *m = SendCoinsRequest{} }
func (m *SendCoinsRequest) String() string            { return proto.CompactTextString(m) }
func (*SendCoinsRequest) ProtoMessage()               {}
func (*SendCoinsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *SendCoinsRequest) GetSourceAddress() []byte {
	if m != nil {
		return m.SourceAddress
	}
	return nil
}

func (m *SendCoinsRequest) GetAmounts() []*Output {
	if m != nil {
		return m.Amounts
	}
	return nil
}

type SendCoinsReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	TxIds   [][]byte  `protobuf:"bytes,3,rep,name=tx_ids,json=txIds,proto3" json:"tx_ids,omitempty"`
}

func (m *SendCoinsReply) Reset()                    { *m = SendCoinsReply{} }
func (m *SendCoinsReply) String() string            { return proto.CompactTextString(m) }
func (*SendCoinsReply) ProtoMessage()               {}
func (*SendCoinsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *SendCoinsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SendCoinsReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SendCoinsReply) GetTxIds() [][]byte {
	if m != nil {
		return m.TxIds
	}
	return nil
}

type SendAltChainEndorsementRequest struct {
	PublicationData []byte `protobuf:"bytes,1,opt,name=publication_data,json=publicationData,proto3" json:"publication_data,omitempty"`
}

func (m *SendAltChainEndorsementRequest) Reset()                    { *m = SendAltChainEndorsementRequest{} }
func (m *SendAltChainEndorsementRequest) String() string            { return proto.CompactTextString(m) }
func (*SendAltChainEndorsementRequest) ProtoMessage()               {}
func (*SendAltChainEndorsementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *SendAltChainEndorsementRequest) GetPublicationData() []byte {
	if m != nil {
		return m.PublicationData
	}
	return nil
}

type SendAltChainEndorsementReply struct {
	Success     bool               `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results     []*Result          `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Transaction *SignedTransaction `protobuf:"bytes,3,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *SendAltChainEndorsementReply) Reset()                    { *m = SendAltChainEndorsementReply{} }
func (m *SendAltChainEndorsementReply) String() string            { return proto.CompactTextString(m) }
func (*SendAltChainEndorsementReply) ProtoMessage()               {}
func (*SendAltChainEndorsementReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *SendAltChainEndorsementReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SendAltChainEndorsementReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SendAltChainEndorsementReply) GetTransaction() *SignedTransaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type GetHistoryRequest struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *GetHistoryRequest) Reset()                    { *m = GetHistoryRequest{} }
func (m *GetHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryRequest) ProtoMessage()               {}
func (*GetHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *GetHistoryRequest) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type AddressHistory struct {
	Address               []byte              `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Balance               int64               `protobuf:"varint,2,opt,name=balance" json:"balance,omitempty"`
	BlocksMined           int32               `protobuf:"varint,3,opt,name=blocks_mined,json=blocksMined" json:"blocks_mined,omitempty"`
	ConfirmedTransactions []*TransactionUnion `protobuf:"bytes,4,rep,name=confirmed_transactions,json=confirmedTransactions" json:"confirmed_transactions,omitempty"`
	PendingTransactions   []*TransactionUnion `protobuf:"bytes,5,rep,name=pending_transactions,json=pendingTransactions" json:"pending_transactions,omitempty"`
}

func (m *AddressHistory) Reset()                    { *m = AddressHistory{} }
func (m *AddressHistory) String() string            { return proto.CompactTextString(m) }
func (*AddressHistory) ProtoMessage()               {}
func (*AddressHistory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *AddressHistory) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AddressHistory) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *AddressHistory) GetBlocksMined() int32 {
	if m != nil {
		return m.BlocksMined
	}
	return 0
}

func (m *AddressHistory) GetConfirmedTransactions() []*TransactionUnion {
	if m != nil {
		return m.ConfirmedTransactions
	}
	return nil
}

func (m *AddressHistory) GetPendingTransactions() []*TransactionUnion {
	if m != nil {
		return m.PendingTransactions
	}
	return nil
}

type GetHistoryReply struct {
	Success   bool              `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results   []*Result         `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Addresses []*AddressHistory `protobuf:"bytes,3,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *GetHistoryReply) Reset()                    { *m = GetHistoryReply{} }
func (m *GetHistoryReply) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryReply) ProtoMessage()               {}
func (*GetHistoryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

func (m *GetHistoryReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetHistoryReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetHistoryReply) GetAddresses() []*AddressHistory {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type GetPeerInfoRequest struct {
}

func (m *GetPeerInfoRequest) Reset()                    { *m = GetPeerInfoRequest{} }
func (m *GetPeerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPeerInfoRequest) ProtoMessage()               {}
func (*GetPeerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

type NodeHeight struct {
	Peer   string `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	Height int32  `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
}

func (m *NodeHeight) Reset()                    { *m = NodeHeight{} }
func (m *NodeHeight) String() string            { return proto.CompactTextString(m) }
func (*NodeHeight) ProtoMessage()               {}
func (*NodeHeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *NodeHeight) GetPeer() string {
	if m != nil {
		return m.Peer
	}
	return ""
}

func (m *NodeHeight) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

type GetPeerInfoReply struct {
	Success           bool          `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results           []*Result     `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Endpoints         []*Endpoint   `protobuf:"bytes,3,rep,name=endpoints" json:"endpoints,omitempty"`
	ConnectedNodes    []*NodeInfo   `protobuf:"bytes,4,rep,name=connected_nodes,json=connectedNodes" json:"connected_nodes,omitempty"`
	DisconnectedNodes []*NodeInfo   `protobuf:"bytes,5,rep,name=disconnected_nodes,json=disconnectedNodes" json:"disconnected_nodes,omitempty"`
	CandidateNodes    []*NodeInfo   `protobuf:"bytes,6,rep,name=candidate_nodes,json=candidateNodes" json:"candidate_nodes,omitempty"`
	NodeHeights       []*NodeHeight `protobuf:"bytes,7,rep,name=node_heights,json=nodeHeights" json:"node_heights,omitempty"`
}

func (m *GetPeerInfoReply) Reset()                    { *m = GetPeerInfoReply{} }
func (m *GetPeerInfoReply) String() string            { return proto.CompactTextString(m) }
func (*GetPeerInfoReply) ProtoMessage()               {}
func (*GetPeerInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *GetPeerInfoReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetPeerInfoReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetPeerInfoReply) GetEndpoints() []*Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *GetPeerInfoReply) GetConnectedNodes() []*NodeInfo {
	if m != nil {
		return m.ConnectedNodes
	}
	return nil
}

func (m *GetPeerInfoReply) GetDisconnectedNodes() []*NodeInfo {
	if m != nil {
		return m.DisconnectedNodes
	}
	return nil
}

func (m *GetPeerInfoReply) GetCandidateNodes() []*NodeInfo {
	if m != nil {
		return m.CandidateNodes
	}
	return nil
}

func (m *GetPeerInfoReply) GetNodeHeights() []*NodeHeight {
	if m != nil {
		return m.NodeHeights
	}
	return nil
}

type GetBlockchainsRequest struct {
}

func (m *GetBlockchainsRequest) Reset()                    { *m = GetBlockchainsRequest{} }
func (m *GetBlockchainsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockchainsRequest) ProtoMessage()               {}
func (*GetBlockchainsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

type GetBlockchainsReply struct {
	Success                 bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results                 []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	BestBlockchainLength    int32     `protobuf:"varint,3,opt,name=best_blockchain_length,json=bestBlockchainLength" json:"best_blockchain_length,omitempty"`
	LongestBlockchainLength int32     `protobuf:"varint,4,opt,name=longest_blockchain_length,json=longestBlockchainLength" json:"longest_blockchain_length,omitempty"`
}

func (m *GetBlockchainsReply) Reset()                    { *m = GetBlockchainsReply{} }
func (m *GetBlockchainsReply) String() string            { return proto.CompactTextString(m) }
func (*GetBlockchainsReply) ProtoMessage()               {}
func (*GetBlockchainsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *GetBlockchainsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetBlockchainsReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetBlockchainsReply) GetBestBlockchainLength() int32 {
	if m != nil {
		return m.BestBlockchainLength
	}
	return 0
}

func (m *GetBlockchainsReply) GetLongestBlockchainLength() int32 {
	if m != nil {
		return m.LongestBlockchainLength
	}
	return 0
}

type SubmitBlocksRequest struct {
	Blocks []*Block `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *SubmitBlocksRequest) Reset()                    { *m = SubmitBlocksRequest{} }
func (m *SubmitBlocksRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitBlocksRequest) ProtoMessage()               {}
func (*SubmitBlocksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *SubmitBlocksRequest) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type GetBlockTimesRequest struct {
	HistoryLength int32 `protobuf:"varint,1,opt,name=history_length,json=historyLength" json:"history_length,omitempty"`
}

func (m *GetBlockTimesRequest) Reset()                    { *m = GetBlockTimesRequest{} }
func (m *GetBlockTimesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockTimesRequest) ProtoMessage()               {}
func (*GetBlockTimesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *GetBlockTimesRequest) GetHistoryLength() int32 {
	if m != nil {
		return m.HistoryLength
	}
	return 0
}

type GetBlockTimesReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Times   []int32   `protobuf:"zigzag32,3,rep,packed,name=times" json:"times,omitempty"`
}

func (m *GetBlockTimesReply) Reset()                    { *m = GetBlockTimesReply{} }
func (m *GetBlockTimesReply) String() string            { return proto.CompactTextString(m) }
func (*GetBlockTimesReply) ProtoMessage()               {}
func (*GetBlockTimesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *GetBlockTimesReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetBlockTimesReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetBlockTimesReply) GetTimes() []int32 {
	if m != nil {
		return m.Times
	}
	return nil
}

type StartSoloPoolRequest struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *StartSoloPoolRequest) Reset()                    { *m = StartSoloPoolRequest{} }
func (m *StartSoloPoolRequest) String() string            { return proto.CompactTextString(m) }
func (*StartSoloPoolRequest) ProtoMessage()               {}
func (*StartSoloPoolRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *StartSoloPoolRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type StartSoloPoolReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *StartSoloPoolReply) Reset()                    { *m = StartSoloPoolReply{} }
func (m *StartSoloPoolReply) String() string            { return proto.CompactTextString(m) }
func (*StartSoloPoolReply) ProtoMessage()               {}
func (*StartSoloPoolReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *StartSoloPoolReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *StartSoloPoolReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetSignatureIndexRequest struct {
	Addresses [][]byte `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *GetSignatureIndexRequest) Reset()                    { *m = GetSignatureIndexRequest{} }
func (m *GetSignatureIndexRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSignatureIndexRequest) ProtoMessage()               {}
func (*GetSignatureIndexRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

func (m *GetSignatureIndexRequest) GetAddresses() [][]byte {
	if m != nil {
		return m.Addresses
	}
	return nil
}

type SetDefaultAddressRequest struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SetDefaultAddressRequest) Reset()                    { *m = SetDefaultAddressRequest{} }
func (m *SetDefaultAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*SetDefaultAddressRequest) ProtoMessage()               {}
func (*SetDefaultAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *SetDefaultAddressRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type AddressSignatureIndexes struct {
	Address         []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PoolIndex       int64  `protobuf:"varint,3,opt,name=pool_index,json=poolIndex" json:"pool_index,omitempty"`
	BlockchainIndex int64  `protobuf:"varint,2,opt,name=blockchain_index,json=blockchainIndex" json:"blockchain_index,omitempty"`
}

func (m *AddressSignatureIndexes) Reset()                    { *m = AddressSignatureIndexes{} }
func (m *AddressSignatureIndexes) String() string            { return proto.CompactTextString(m) }
func (*AddressSignatureIndexes) ProtoMessage()               {}
func (*AddressSignatureIndexes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

func (m *AddressSignatureIndexes) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *AddressSignatureIndexes) GetPoolIndex() int64 {
	if m != nil {
		return m.PoolIndex
	}
	return 0
}

func (m *AddressSignatureIndexes) GetBlockchainIndex() int64 {
	if m != nil {
		return m.BlockchainIndex
	}
	return 0
}

type GetSignatureIndexReply struct {
	Success bool                       `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result                  `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Indexes []*AddressSignatureIndexes `protobuf:"bytes,3,rep,name=indexes" json:"indexes,omitempty"`
}

func (m *GetSignatureIndexReply) Reset()                    { *m = GetSignatureIndexReply{} }
func (m *GetSignatureIndexReply) String() string            { return proto.CompactTextString(m) }
func (*GetSignatureIndexReply) ProtoMessage()               {}
func (*GetSignatureIndexReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

func (m *GetSignatureIndexReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetSignatureIndexReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetSignatureIndexReply) GetIndexes() []*AddressSignatureIndexes {
	if m != nil {
		return m.Indexes
	}
	return nil
}

type SetDefaultAddressReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *SetDefaultAddressReply) Reset()                    { *m = SetDefaultAddressReply{} }
func (m *SetDefaultAddressReply) String() string            { return proto.CompactTextString(m) }
func (*SetDefaultAddressReply) ProtoMessage()               {}
func (*SetDefaultAddressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *SetDefaultAddressReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SetDefaultAddressReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type GetTransactionsRequest struct {
	SearchLength int32    `protobuf:"varint,1,opt,name=search_length,json=searchLength" json:"search_length,omitempty"`
	Ids          [][]byte `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (m *GetTransactionsRequest) Reset()                    { *m = GetTransactionsRequest{} }
func (m *GetTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsRequest) ProtoMessage()               {}
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *GetTransactionsRequest) GetSearchLength() int32 {
	if m != nil {
		return m.SearchLength
	}
	return 0
}

func (m *GetTransactionsRequest) GetIds() [][]byte {
	if m != nil {
		return m.Ids
	}
	return nil
}

type TransactionInfo struct {
	Confirmations     int32        `protobuf:"varint,1,opt,name=confirmations" json:"confirmations,omitempty"`
	Transaction       *Transaction `protobuf:"bytes,2,opt,name=transaction" json:"transaction,omitempty"`
	BlockNumber       int32        `protobuf:"varint,3,opt,name=block_number,json=blockNumber" json:"block_number,omitempty"`
	Timestamp         int32        `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
	EndorsedBlockHash []byte       `protobuf:"bytes,5,opt,name=endorsed_block_hash,json=endorsedBlockHash,proto3" json:"endorsed_block_hash,omitempty"`
	BitcoinBlockHash  []byte       `protobuf:"bytes,6,opt,name=bitcoin_block_hash,json=bitcoinBlockHash,proto3" json:"bitcoin_block_hash,omitempty"`
	BitcoinTxId       []byte       `protobuf:"bytes,7,opt,name=bitcoin_tx_id,json=bitcoinTxId,proto3" json:"bitcoin_tx_id,omitempty"`
}

func (m *TransactionInfo) Reset()                    { *m = TransactionInfo{} }
func (m *TransactionInfo) String() string            { return proto.CompactTextString(m) }
func (*TransactionInfo) ProtoMessage()               {}
func (*TransactionInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *TransactionInfo) GetConfirmations() int32 {
	if m != nil {
		return m.Confirmations
	}
	return 0
}

func (m *TransactionInfo) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TransactionInfo) GetBlockNumber() int32 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *TransactionInfo) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *TransactionInfo) GetEndorsedBlockHash() []byte {
	if m != nil {
		return m.EndorsedBlockHash
	}
	return nil
}

func (m *TransactionInfo) GetBitcoinBlockHash() []byte {
	if m != nil {
		return m.BitcoinBlockHash
	}
	return nil
}

func (m *TransactionInfo) GetBitcoinTxId() []byte {
	if m != nil {
		return m.BitcoinTxId
	}
	return nil
}

type GetTransactionsReply struct {
	Success      bool               `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results      []*Result          `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Transactions []*TransactionInfo `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *GetTransactionsReply) Reset()                    { *m = GetTransactionsReply{} }
func (m *GetTransactionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionsReply) ProtoMessage()               {}
func (*GetTransactionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *GetTransactionsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetTransactionsReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetTransactionsReply) GetTransactions() []*TransactionInfo {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type SetTransactionFeeRequest struct {
	Amount int64 `protobuf:"varint,1,opt,name=amount" json:"amount,omitempty"`
}

func (m *SetTransactionFeeRequest) Reset()                    { *m = SetTransactionFeeRequest{} }
func (m *SetTransactionFeeRequest) String() string            { return proto.CompactTextString(m) }
func (*SetTransactionFeeRequest) ProtoMessage()               {}
func (*SetTransactionFeeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *SetTransactionFeeRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type DumpPrivateKeyRequest struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *DumpPrivateKeyRequest) Reset()                    { *m = DumpPrivateKeyRequest{} }
func (m *DumpPrivateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*DumpPrivateKeyRequest) ProtoMessage()               {}
func (*DumpPrivateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *DumpPrivateKeyRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type DumpPrivateKeyReply struct {
	Success    bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results    []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Address    []byte    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	PrivateKey []byte    `protobuf:"bytes,4,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (m *DumpPrivateKeyReply) Reset()                    { *m = DumpPrivateKeyReply{} }
func (m *DumpPrivateKeyReply) String() string            { return proto.CompactTextString(m) }
func (*DumpPrivateKeyReply) ProtoMessage()               {}
func (*DumpPrivateKeyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *DumpPrivateKeyReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *DumpPrivateKeyReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *DumpPrivateKeyReply) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *DumpPrivateKeyReply) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

type ImportPrivateKeyRequest struct {
	PrivateKey []byte `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
}

func (m *ImportPrivateKeyRequest) Reset()                    { *m = ImportPrivateKeyRequest{} }
func (m *ImportPrivateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*ImportPrivateKeyRequest) ProtoMessage()               {}
func (*ImportPrivateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

func (m *ImportPrivateKeyRequest) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

type ImportPrivateKeyReply struct {
	Success          bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results          []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	ResultantAddress []byte    `protobuf:"bytes,3,opt,name=resultant_address,json=resultantAddress,proto3" json:"resultant_address,omitempty"`
}

func (m *ImportPrivateKeyReply) Reset()                    { *m = ImportPrivateKeyReply{} }
func (m *ImportPrivateKeyReply) String() string            { return proto.CompactTextString(m) }
func (*ImportPrivateKeyReply) ProtoMessage()               {}
func (*ImportPrivateKeyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *ImportPrivateKeyReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ImportPrivateKeyReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ImportPrivateKeyReply) GetResultantAddress() []byte {
	if m != nil {
		return m.ResultantAddress
	}
	return nil
}

type GetLastBitcoinBlockRequest struct {
}

func (m *GetLastBitcoinBlockRequest) Reset()                    { *m = GetLastBitcoinBlockRequest{} }
func (m *GetLastBitcoinBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLastBitcoinBlockRequest) ProtoMessage()               {}
func (*GetLastBitcoinBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

type GetLastBlockRequest struct {
}

func (m *GetLastBlockRequest) Reset()                    { *m = GetLastBlockRequest{} }
func (m *GetLastBlockRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLastBlockRequest) ProtoMessage()               {}
func (*GetLastBlockRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

type GetLastBitcoinBlockReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Header  []byte    `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (m *GetLastBitcoinBlockReply) Reset()                    { *m = GetLastBitcoinBlockReply{} }
func (m *GetLastBitcoinBlockReply) String() string            { return proto.CompactTextString(m) }
func (*GetLastBitcoinBlockReply) ProtoMessage()               {}
func (*GetLastBitcoinBlockReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *GetLastBitcoinBlockReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetLastBitcoinBlockReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetLastBitcoinBlockReply) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

type GetLastBlockReply struct {
	Success bool         `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result    `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Header  *BlockHeader `protobuf:"bytes,3,opt,name=header" json:"header,omitempty"`
}

func (m *GetLastBlockReply) Reset()                    { *m = GetLastBlockReply{} }
func (m *GetLastBlockReply) String() string            { return proto.CompactTextString(m) }
func (*GetLastBlockReply) ProtoMessage()               {}
func (*GetLastBlockReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *GetLastBlockReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetLastBlockReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetLastBlockReply) GetHeader() *BlockHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type ListBlocksSinceRequest struct {
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *ListBlocksSinceRequest) Reset()                    { *m = ListBlocksSinceRequest{} }
func (m *ListBlocksSinceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBlocksSinceRequest) ProtoMessage()               {}
func (*ListBlocksSinceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{125} }

func (m *ListBlocksSinceRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

type ListBlocksSinceReply struct {
	Success bool           `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result      `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Removed []*BlockHeader `protobuf:"bytes,3,rep,name=removed" json:"removed,omitempty"`
	Added   []*BlockHeader `protobuf:"bytes,4,rep,name=added" json:"added,omitempty"`
}

func (m *ListBlocksSinceReply) Reset()                    { *m = ListBlocksSinceReply{} }
func (m *ListBlocksSinceReply) String() string            { return proto.CompactTextString(m) }
func (*ListBlocksSinceReply) ProtoMessage()               {}
func (*ListBlocksSinceReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{126} }

func (m *ListBlocksSinceReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ListBlocksSinceReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListBlocksSinceReply) GetRemoved() []*BlockHeader {
	if m != nil {
		return m.Removed
	}
	return nil
}

func (m *ListBlocksSinceReply) GetAdded() []*BlockHeader {
	if m != nil {
		return m.Added
	}
	return nil
}

type SubmitTransactionsRequest struct {
	Transactions []*TransactionUnion `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *SubmitTransactionsRequest) Reset()                    { *m = SubmitTransactionsRequest{} }
func (m *SubmitTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitTransactionsRequest) ProtoMessage()               {}
func (*SubmitTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{127} }

func (m *SubmitTransactionsRequest) GetTransactions() []*TransactionUnion {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetInfoReply struct {
	Success           bool          `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results           []*Result     `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	NumberOfBlocks    int32         `protobuf:"varint,3,opt,name=number_of_blocks,json=numberOfBlocks" json:"number_of_blocks,omitempty"`
	LastBlock         *BlockSummary `protobuf:"bytes,4,opt,name=last_block,json=lastBlock" json:"last_block,omitempty"`
	DefaultAddress    *Output       `protobuf:"bytes,5,opt,name=default_address,json=defaultAddress" json:"default_address,omitempty"`
	TransactionFee    int64         `protobuf:"varint,6,opt,name=transaction_fee,json=transactionFee" json:"transaction_fee,omitempty"`
	EstimatedHashrate int64         `protobuf:"varint,7,opt,name=estimated_hashrate,json=estimatedHashrate" json:"estimated_hashrate,omitempty"`
	DecodedDifficulty uint64        `protobuf:"fixed64,8,opt,name=decoded_difficulty,json=decodedDifficulty" json:"decoded_difficulty,omitempty"`
}

func (m *GetInfoReply) Reset()                    { *m = GetInfoReply{} }
func (m *GetInfoReply) String() string            { return proto.CompactTextString(m) }
func (*GetInfoReply) ProtoMessage()               {}
func (*GetInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *GetInfoReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetInfoReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetInfoReply) GetNumberOfBlocks() int32 {
	if m != nil {
		return m.NumberOfBlocks
	}
	return 0
}

func (m *GetInfoReply) GetLastBlock() *BlockSummary {
	if m != nil {
		return m.LastBlock
	}
	return nil
}

func (m *GetInfoReply) GetDefaultAddress() *Output {
	if m != nil {
		return m.DefaultAddress
	}
	return nil
}

func (m *GetInfoReply) GetTransactionFee() int64 {
	if m != nil {
		return m.TransactionFee
	}
	return 0
}

func (m *GetInfoReply) GetEstimatedHashrate() int64 {
	if m != nil {
		return m.EstimatedHashrate
	}
	return 0
}

func (m *GetInfoReply) GetDecodedDifficulty() uint64 {
	if m != nil {
		return m.DecodedDifficulty
	}
	return 0
}

type GetDiagnosticInfoReply struct {
	Success                  bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results                  []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	UserLanguage             string    `protobuf:"bytes,3,opt,name=user_language,json=userLanguage" json:"user_language,omitempty"`
	JavaRuntimeName          string    `protobuf:"bytes,4,opt,name=java_runtime_name,json=javaRuntimeName" json:"java_runtime_name,omitempty"`
	SunBootLibraryPath       string    `protobuf:"bytes,5,opt,name=sun_boot_library_path,json=sunBootLibraryPath" json:"sun_boot_library_path,omitempty"`
	JavaRuntimeVersion       string    `protobuf:"bytes,6,opt,name=java_runtime_version,json=javaRuntimeVersion" json:"java_runtime_version,omitempty"`
	JavaSpecificationVersion string    `protobuf:"bytes,7,opt,name=java_specification_version,json=javaSpecificationVersion" json:"java_specification_version,omitempty"`
	OsName                   string    `protobuf:"bytes,8,opt,name=os_name,json=osName" json:"os_name,omitempty"`
	OsArch                   string    `protobuf:"bytes,9,opt,name=os_arch,json=osArch" json:"os_arch,omitempty"`
	OsVersion                string    `protobuf:"bytes,10,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	MemoryTotalGb            string    `protobuf:"bytes,11,opt,name=memory_total_gb,json=memoryTotalGb" json:"memory_total_gb,omitempty"`
	MemoryMaxGb              string    `protobuf:"bytes,12,opt,name=memory_max_gb,json=memoryMaxGb" json:"memory_max_gb,omitempty"`
	ProcessorCount           string    `protobuf:"bytes,13,opt,name=processor_count,json=processorCount" json:"processor_count,omitempty"`
	ProcessorType            string    `protobuf:"bytes,14,opt,name=processor_type,json=processorType" json:"processor_type,omitempty"`
	WorkingDirectory         string    `protobuf:"bytes,15,opt,name=working_directory,json=workingDirectory" json:"working_directory,omitempty"`
	DatetimeNowUtc           string    `protobuf:"bytes,16,opt,name=datetime_now_utc,json=datetimeNowUtc" json:"datetime_now_utc,omitempty"`
	NodecorePropertiesSource string    `protobuf:"bytes,17,opt,name=nodecore_properties_source,json=nodecorePropertiesSource" json:"nodecore_properties_source,omitempty"`
	NodecorePropertiesValues []string  `protobuf:"bytes,18,rep,name=nodecore_properties_values,json=nodecorePropertiesValues" json:"nodecore_properties_values,omitempty"`
}

func (m *GetDiagnosticInfoReply) Reset()                    { *m = GetDiagnosticInfoReply{} }
func (m *GetDiagnosticInfoReply) String() string            { return proto.CompactTextString(m) }
func (*GetDiagnosticInfoReply) ProtoMessage()               {}
func (*GetDiagnosticInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *GetDiagnosticInfoReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetDiagnosticInfoReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetDiagnosticInfoReply) GetUserLanguage() string {
	if m != nil {
		return m.UserLanguage
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetJavaRuntimeName() string {
	if m != nil {
		return m.JavaRuntimeName
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetSunBootLibraryPath() string {
	if m != nil {
		return m.SunBootLibraryPath
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetJavaRuntimeVersion() string {
	if m != nil {
		return m.JavaRuntimeVersion
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetJavaSpecificationVersion() string {
	if m != nil {
		return m.JavaSpecificationVersion
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetOsName() string {
	if m != nil {
		return m.OsName
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetOsArch() string {
	if m != nil {
		return m.OsArch
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetOsVersion() string {
	if m != nil {
		return m.OsVersion
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetMemoryTotalGb() string {
	if m != nil {
		return m.MemoryTotalGb
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetMemoryMaxGb() string {
	if m != nil {
		return m.MemoryMaxGb
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetProcessorCount() string {
	if m != nil {
		return m.ProcessorCount
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetProcessorType() string {
	if m != nil {
		return m.ProcessorType
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetWorkingDirectory() string {
	if m != nil {
		return m.WorkingDirectory
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetDatetimeNowUtc() string {
	if m != nil {
		return m.DatetimeNowUtc
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetNodecorePropertiesSource() string {
	if m != nil {
		return m.NodecorePropertiesSource
	}
	return ""
}

func (m *GetDiagnosticInfoReply) GetNodecorePropertiesValues() []string {
	if m != nil {
		return m.NodecorePropertiesValues
	}
	return nil
}

type GetPendingTransactionsRequest struct {
}

func (m *GetPendingTransactionsRequest) Reset()                    { *m = GetPendingTransactionsRequest{} }
func (m *GetPendingTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPendingTransactionsRequest) ProtoMessage()               {}
func (*GetPendingTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{130} }

type GetPendingTransactionsReply struct {
	Success      bool           `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results      []*Result      `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *GetPendingTransactionsReply) Reset()                    { *m = GetPendingTransactionsReply{} }
func (m *GetPendingTransactionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetPendingTransactionsReply) ProtoMessage()               {}
func (*GetPendingTransactionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{131} }

func (m *GetPendingTransactionsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetPendingTransactionsReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetPendingTransactionsReply) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetNewAddressRequest struct {
}

func (m *GetNewAddressRequest) Reset()                    { *m = GetNewAddressRequest{} }
func (m *GetNewAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNewAddressRequest) ProtoMessage()               {}
func (*GetNewAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{132} }

type GetNewAddressReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Address []byte    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *GetNewAddressReply) Reset()                    { *m = GetNewAddressReply{} }
func (m *GetNewAddressReply) String() string            { return proto.CompactTextString(m) }
func (*GetNewAddressReply) ProtoMessage()               {}
func (*GetNewAddressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{133} }

func (m *GetNewAddressReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetNewAddressReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetNewAddressReply) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type ValidateAddressRequest struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *ValidateAddressRequest) Reset()                    { *m = ValidateAddressRequest{} }
func (m *ValidateAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidateAddressRequest) ProtoMessage()               {}
func (*ValidateAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{134} }

func (m *ValidateAddressRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type ValidateAddressReply struct {
	Success   bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results   []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Address   []byte    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	PublicKey []byte    `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	IsRemote  bool      `protobuf:"varint,5,opt,name=is_remote,json=isRemote" json:"is_remote,omitempty"`
}

func (m *ValidateAddressReply) Reset()                    { *m = ValidateAddressReply{} }
func (m *ValidateAddressReply) String() string            { return proto.CompactTextString(m) }
func (*ValidateAddressReply) ProtoMessage()               {}
func (*ValidateAddressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{135} }

func (m *ValidateAddressReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ValidateAddressReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ValidateAddressReply) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *ValidateAddressReply) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ValidateAddressReply) GetIsRemote() bool {
	if m != nil {
		return m.IsRemote
	}
	return false
}

type GenerateMultisigAddressRequest struct {
	SourceAddresses     [][]byte `protobuf:"bytes,1,rep,name=sourceAddresses,proto3" json:"sourceAddresses,omitempty"`
	SignatureThresholdM int32    `protobuf:"varint,2,opt,name=signatureThresholdM" json:"signatureThresholdM,omitempty"`
}

func (m *GenerateMultisigAddressRequest) Reset()         { *m = GenerateMultisigAddressRequest{} }
func (m *GenerateMultisigAddressRequest) String() string { return proto.CompactTextString(m) }
func (*GenerateMultisigAddressRequest) ProtoMessage()    {}
func (*GenerateMultisigAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{136}
}

func (m *GenerateMultisigAddressRequest) GetSourceAddresses() [][]byte {
	if m != nil {
		return m.SourceAddresses
	}
	return nil
}

func (m *GenerateMultisigAddressRequest) GetSignatureThresholdM() int32 {
	if m != nil {
		return m.SignatureThresholdM
	}
	return 0
}

type GenerateMultisigAddressReply struct {
	Success             bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results             []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	SourceAddresses     [][]byte  `protobuf:"bytes,3,rep,name=sourceAddresses,proto3" json:"sourceAddresses,omitempty"`
	SignatureThresholdM int32     `protobuf:"varint,4,opt,name=signatureThresholdM" json:"signatureThresholdM,omitempty"`
	MultisigAddress     []byte    `protobuf:"bytes,5,opt,name=multisigAddress,proto3" json:"multisigAddress,omitempty"`
}

func (m *GenerateMultisigAddressReply) Reset()                    { *m = GenerateMultisigAddressReply{} }
func (m *GenerateMultisigAddressReply) String() string            { return proto.CompactTextString(m) }
func (*GenerateMultisigAddressReply) ProtoMessage()               {}
func (*GenerateMultisigAddressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{137} }

func (m *GenerateMultisigAddressReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GenerateMultisigAddressReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GenerateMultisigAddressReply) GetSourceAddresses() [][]byte {
	if m != nil {
		return m.SourceAddresses
	}
	return nil
}

func (m *GenerateMultisigAddressReply) GetSignatureThresholdM() int32 {
	if m != nil {
		return m.SignatureThresholdM
	}
	return 0
}

func (m *GenerateMultisigAddressReply) GetMultisigAddress() []byte {
	if m != nil {
		return m.MultisigAddress
	}
	return nil
}

type MakeUnsignedMultisigTxRequest struct {
	SourceMultisigAddress []byte    `protobuf:"bytes,1,opt,name=source_multisig_address,json=sourceMultisigAddress,proto3" json:"source_multisig_address,omitempty"`
	Amounts               []*Output `protobuf:"bytes,2,rep,name=amounts" json:"amounts,omitempty"`
	Fee                   int64     `protobuf:"varint,3,opt,name=fee" json:"fee,omitempty"`
	SignatureIndexString  []byte    `protobuf:"bytes,4,opt,name=signature_index_string,json=signatureIndexString,proto3" json:"signature_index_string,omitempty"`
}

func (m *MakeUnsignedMultisigTxRequest) Reset()                    { *m = MakeUnsignedMultisigTxRequest{} }
func (m *MakeUnsignedMultisigTxRequest) String() string            { return proto.CompactTextString(m) }
func (*MakeUnsignedMultisigTxRequest) ProtoMessage()               {}
func (*MakeUnsignedMultisigTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{138} }

func (m *MakeUnsignedMultisigTxRequest) GetSourceMultisigAddress() []byte {
	if m != nil {
		return m.SourceMultisigAddress
	}
	return nil
}

func (m *MakeUnsignedMultisigTxRequest) GetAmounts() []*Output {
	if m != nil {
		return m.Amounts
	}
	return nil
}

func (m *MakeUnsignedMultisigTxRequest) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *MakeUnsignedMultisigTxRequest) GetSignatureIndexString() []byte {
	if m != nil {
		return m.SignatureIndexString
	}
	return nil
}

type MakeUnsignedMultisigTxReply struct {
	Success                              bool                                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results                              []*Result                             `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	SignatureThresholdM                  int32                                 `protobuf:"varint,3,opt,name=signature_threshold_m,json=signatureThresholdM" json:"signature_threshold_m,omitempty"`
	AddressCompositionCountN             int32                                 `protobuf:"varint,4,opt,name=address_composition_count_n,json=addressCompositionCountN" json:"address_composition_count_n,omitempty"`
	UnsignedMultisigTransactionWithIndex *UnsignedMultisigTransactionWithIndex `protobuf:"bytes,5,opt,name=unsigned_multisig_transaction_with_index,json=unsignedMultisigTransactionWithIndex" json:"unsigned_multisig_transaction_with_index,omitempty"`
	Txid                                 []byte                                `protobuf:"bytes,6,opt,name=txid,proto3" json:"txid,omitempty"`
	SignatureIndex                       int64                                 `protobuf:"varint,7,opt,name=signature_index,json=signatureIndex" json:"signature_index,omitempty"`
}

func (m *MakeUnsignedMultisigTxReply) Reset()                    { *m = MakeUnsignedMultisigTxReply{} }
func (m *MakeUnsignedMultisigTxReply) String() string            { return proto.CompactTextString(m) }
func (*MakeUnsignedMultisigTxReply) ProtoMessage()               {}
func (*MakeUnsignedMultisigTxReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{139} }

func (m *MakeUnsignedMultisigTxReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *MakeUnsignedMultisigTxReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *MakeUnsignedMultisigTxReply) GetSignatureThresholdM() int32 {
	if m != nil {
		return m.SignatureThresholdM
	}
	return 0
}

func (m *MakeUnsignedMultisigTxReply) GetAddressCompositionCountN() int32 {
	if m != nil {
		return m.AddressCompositionCountN
	}
	return 0
}

func (m *MakeUnsignedMultisigTxReply) GetUnsignedMultisigTransactionWithIndex() *UnsignedMultisigTransactionWithIndex {
	if m != nil {
		return m.UnsignedMultisigTransactionWithIndex
	}
	return nil
}

func (m *MakeUnsignedMultisigTxReply) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *MakeUnsignedMultisigTxReply) GetSignatureIndex() int64 {
	if m != nil {
		return m.SignatureIndex
	}
	return 0
}

type SubmitMultisigTxRequest struct {
	MultisigTransaction *SignedMultisigTransaction `protobuf:"bytes,3,opt,name=multisig_transaction,json=multisigTransaction" json:"multisig_transaction,omitempty"`
}

func (m *SubmitMultisigTxRequest) Reset()                    { *m = SubmitMultisigTxRequest{} }
func (m *SubmitMultisigTxRequest) String() string            { return proto.CompactTextString(m) }
func (*SubmitMultisigTxRequest) ProtoMessage()               {}
func (*SubmitMultisigTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{140} }

func (m *SubmitMultisigTxRequest) GetMultisigTransaction() *SignedMultisigTransaction {
	if m != nil {
		return m.MultisigTransaction
	}
	return nil
}

type SubmitMultisigTxReply struct {
	Success                   bool                       `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results                   []*Result                  `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Txid                      []byte                     `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	SignedMultisigTransaction *SignedMultisigTransaction `protobuf:"bytes,4,opt,name=signed_multisig_transaction,json=signedMultisigTransaction" json:"signed_multisig_transaction,omitempty"`
}

func (m *SubmitMultisigTxReply) Reset()                    { *m = SubmitMultisigTxReply{} }
func (m *SubmitMultisigTxReply) String() string            { return proto.CompactTextString(m) }
func (*SubmitMultisigTxReply) ProtoMessage()               {}
func (*SubmitMultisigTxReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{141} }

func (m *SubmitMultisigTxReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SubmitMultisigTxReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SubmitMultisigTxReply) GetTxid() []byte {
	if m != nil {
		return m.Txid
	}
	return nil
}

func (m *SubmitMultisigTxReply) GetSignedMultisigTransaction() *SignedMultisigTransaction {
	if m != nil {
		return m.SignedMultisigTransaction
	}
	return nil
}

type SignMessageRequest struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *SignMessageRequest) Reset()                    { *m = SignMessageRequest{} }
func (m *SignMessageRequest) String() string            { return proto.CompactTextString(m) }
func (*SignMessageRequest) ProtoMessage()               {}
func (*SignMessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{142} }

func (m *SignMessageRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *SignMessageRequest) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type SignMessageReply struct {
	Success       bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results       []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	SignedMessage []byte    `protobuf:"bytes,3,opt,name=signed_message,json=signedMessage,proto3" json:"signed_message,omitempty"`
	PublicKey     []byte    `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (m *SignMessageReply) Reset()                    { *m = SignMessageReply{} }
func (m *SignMessageReply) String() string            { return proto.CompactTextString(m) }
func (*SignMessageReply) ProtoMessage()               {}
func (*SignMessageReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{143} }

func (m *SignMessageReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *SignMessageReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *SignMessageReply) GetSignedMessage() []byte {
	if m != nil {
		return m.SignedMessage
	}
	return nil
}

func (m *SignMessageReply) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type GetBlockTemplateRequest struct {
	Mode         string   `protobuf:"bytes,1,opt,name=mode" json:"mode,omitempty"`
	Capabilities []string `protobuf:"bytes,2,rep,name=capabilities" json:"capabilities,omitempty"`
}

func (m *GetBlockTemplateRequest) Reset()                    { *m = GetBlockTemplateRequest{} }
func (m *GetBlockTemplateRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBlockTemplateRequest) ProtoMessage()               {}
func (*GetBlockTemplateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{144} }

func (m *GetBlockTemplateRequest) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

func (m *GetBlockTemplateRequest) GetCapabilities() []string {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

type CandidateTransaction struct {
	Fee         int64             `protobuf:"varint,1,opt,name=fee" json:"fee,omitempty"`
	Weight      int64             `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
	Required    bool              `protobuf:"varint,3,opt,name=required" json:"required,omitempty"`
	TxId        []byte            `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Depends     []int32           `protobuf:"varint,5,rep,packed,name=depends" json:"depends,omitempty"`
	Transaction *TransactionUnion `protobuf:"bytes,6,opt,name=transaction" json:"transaction,omitempty"`
}

func (m *CandidateTransaction) Reset()                    { *m = CandidateTransaction{} }
func (m *CandidateTransaction) String() string            { return proto.CompactTextString(m) }
func (*CandidateTransaction) ProtoMessage()               {}
func (*CandidateTransaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{145} }

func (m *CandidateTransaction) GetFee() int64 {
	if m != nil {
		return m.Fee
	}
	return 0
}

func (m *CandidateTransaction) GetWeight() int64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *CandidateTransaction) GetRequired() bool {
	if m != nil {
		return m.Required
	}
	return false
}

func (m *CandidateTransaction) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

func (m *CandidateTransaction) GetDepends() []int32 {
	if m != nil {
		return m.Depends
	}
	return nil
}

func (m *CandidateTransaction) GetTransaction() *TransactionUnion {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type GetBlockTemplateReply struct {
	Success                 bool                    `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results                 []*Result               `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Target                  int64                   `protobuf:"varint,3,opt,name=target" json:"target,omitempty"`
	SizeLimit               int64                   `protobuf:"varint,4,opt,name=size_limit,json=sizeLimit" json:"size_limit,omitempty"`
	BlockHeight             int32                   `protobuf:"varint,5,opt,name=block_height,json=blockHeight" json:"block_height,omitempty"`
	CoinbaseValue           int64                   `protobuf:"varint,6,opt,name=coinbase_value,json=coinbaseValue" json:"coinbase_value,omitempty"`
	MinimumTimestamp        int32                   `protobuf:"varint,7,opt,name=minimum_timestamp,json=minimumTimestamp" json:"minimum_timestamp,omitempty"`
	CurrentTimestamp        int32                   `protobuf:"varint,8,opt,name=current_timestamp,json=currentTimestamp" json:"current_timestamp,omitempty"`
	Mutable                 []string                `protobuf:"bytes,9,rep,name=mutable" json:"mutable,omitempty"`
	PreviousBlockHash       []byte                  `protobuf:"bytes,10,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	SecondPreviousBlockHash []byte                  `protobuf:"bytes,11,opt,name=second_previous_block_hash,json=secondPreviousBlockHash,proto3" json:"second_previous_block_hash,omitempty"`
	ThirdPreviousBlockHash  []byte                  `protobuf:"bytes,12,opt,name=third_previous_block_hash,json=thirdPreviousBlockHash,proto3" json:"third_previous_block_hash,omitempty"`
	PreviousLedgerHash      []byte                  `protobuf:"bytes,13,opt,name=previous_ledger_hash,json=previousLedgerHash,proto3" json:"previous_ledger_hash,omitempty"`
	Transactions            []*CandidateTransaction `protobuf:"bytes,14,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *GetBlockTemplateReply) Reset()                    { *m = GetBlockTemplateReply{} }
func (m *GetBlockTemplateReply) String() string            { return proto.CompactTextString(m) }
func (*GetBlockTemplateReply) ProtoMessage()               {}
func (*GetBlockTemplateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{146} }

func (m *GetBlockTemplateReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetBlockTemplateReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetBlockTemplateReply) GetTarget() int64 {
	if m != nil {
		return m.Target
	}
	return 0
}

func (m *GetBlockTemplateReply) GetSizeLimit() int64 {
	if m != nil {
		return m.SizeLimit
	}
	return 0
}

func (m *GetBlockTemplateReply) GetBlockHeight() int32 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *GetBlockTemplateReply) GetCoinbaseValue() int64 {
	if m != nil {
		return m.CoinbaseValue
	}
	return 0
}

func (m *GetBlockTemplateReply) GetMinimumTimestamp() int32 {
	if m != nil {
		return m.MinimumTimestamp
	}
	return 0
}

func (m *GetBlockTemplateReply) GetCurrentTimestamp() int32 {
	if m != nil {
		return m.CurrentTimestamp
	}
	return 0
}

func (m *GetBlockTemplateReply) GetMutable() []string {
	if m != nil {
		return m.Mutable
	}
	return nil
}

func (m *GetBlockTemplateReply) GetPreviousBlockHash() []byte {
	if m != nil {
		return m.PreviousBlockHash
	}
	return nil
}

func (m *GetBlockTemplateReply) GetSecondPreviousBlockHash() []byte {
	if m != nil {
		return m.SecondPreviousBlockHash
	}
	return nil
}

func (m *GetBlockTemplateReply) GetThirdPreviousBlockHash() []byte {
	if m != nil {
		return m.ThirdPreviousBlockHash
	}
	return nil
}

func (m *GetBlockTemplateReply) GetPreviousLedgerHash() []byte {
	if m != nil {
		return m.PreviousLedgerHash
	}
	return nil
}

func (m *GetBlockTemplateReply) GetTransactions() []*CandidateTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type SetBanRequest struct {
	Command         SetBanRequest_Command `protobuf:"varint,1,opt,name=command,enum=core.SetBanRequest_Command" json:"command,omitempty"`
	Value           string                `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Reason          string                `protobuf:"bytes,3,opt,name=reason" json:"reason,omitempty"`
	ExpiryTimestamp int32                 `protobuf:"varint,4,opt,name=expiry_timestamp,json=expiryTimestamp" json:"expiry_timestamp,omitempty"`
}

func (m *SetBanRequest) Reset()                    { *m = SetBanRequest{} }
func (m *SetBanRequest) String() string            { return proto.CompactTextString(m) }
func (*SetBanRequest) ProtoMessage()               {}
func (*SetBanRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{147} }

func (m *SetBanRequest) GetCommand() SetBanRequest_Command {
	if m != nil {
		return m.Command
	}
	return SetBanRequest_ADD
}

func (m *SetBanRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *SetBanRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *SetBanRequest) GetExpiryTimestamp() int32 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

type SetAllowedRequest struct {
	Command SetAllowedRequest_Command `protobuf:"varint,1,opt,name=command,enum=core.SetAllowedRequest_Command" json:"command,omitempty"`
	Value   string                    `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *SetAllowedRequest) Reset()                    { *m = SetAllowedRequest{} }
func (m *SetAllowedRequest) String() string            { return proto.CompactTextString(m) }
func (*SetAllowedRequest) ProtoMessage()               {}
func (*SetAllowedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{148} }

func (m *SetAllowedRequest) GetCommand() SetAllowedRequest_Command {
	if m != nil {
		return m.Command
	}
	return SetAllowedRequest_ADD
}

func (m *SetAllowedRequest) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type BlackListInfo struct {
	Id              int32              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type            BlackListInfo_Type `protobuf:"varint,2,opt,name=type,enum=core.BlackListInfo_Type" json:"type,omitempty"`
	Value           string             `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Reason          string             `protobuf:"bytes,4,opt,name=reason" json:"reason,omitempty"`
	Timestamp       int32              `protobuf:"varint,5,opt,name=timestamp" json:"timestamp,omitempty"`
	ExpiryTimestamp int32              `protobuf:"varint,6,opt,name=expiry_timestamp,json=expiryTimestamp" json:"expiry_timestamp,omitempty"`
}

func (m *BlackListInfo) Reset()                    { *m = BlackListInfo{} }
func (m *BlackListInfo) String() string            { return proto.CompactTextString(m) }
func (*BlackListInfo) ProtoMessage()               {}
func (*BlackListInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{149} }

func (m *BlackListInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BlackListInfo) GetType() BlackListInfo_Type {
	if m != nil {
		return m.Type
	}
	return BlackListInfo_ADDRESS
}

func (m *BlackListInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *BlackListInfo) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *BlackListInfo) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlackListInfo) GetExpiryTimestamp() int32 {
	if m != nil {
		return m.ExpiryTimestamp
	}
	return 0
}

type WhiteListInfo struct {
	Id        int32              `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Type      WhiteListInfo_Type `protobuf:"varint,2,opt,name=type,enum=core.WhiteListInfo_Type" json:"type,omitempty"`
	Value     string             `protobuf:"bytes,3,opt,name=value" json:"value,omitempty"`
	Timestamp int32              `protobuf:"varint,4,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *WhiteListInfo) Reset()                    { *m = WhiteListInfo{} }
func (m *WhiteListInfo) String() string            { return proto.CompactTextString(m) }
func (*WhiteListInfo) ProtoMessage()               {}
func (*WhiteListInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{150} }

func (m *WhiteListInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *WhiteListInfo) GetType() WhiteListInfo_Type {
	if m != nil {
		return m.Type
	}
	return WhiteListInfo_ADDRESS
}

func (m *WhiteListInfo) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *WhiteListInfo) GetTimestamp() int32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type ListBannedRequest struct {
}

func (m *ListBannedRequest) Reset()                    { *m = ListBannedRequest{} }
func (m *ListBannedRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBannedRequest) ProtoMessage()               {}
func (*ListBannedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{151} }

type ListAllowedRequest struct {
}

func (m *ListAllowedRequest) Reset()                    { *m = ListAllowedRequest{} }
func (m *ListAllowedRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAllowedRequest) ProtoMessage()               {}
func (*ListAllowedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{152} }

type ListBannedReply struct {
	Success bool             `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result        `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Entries []*BlackListInfo `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

func (m *ListBannedReply) Reset()                    { *m = ListBannedReply{} }
func (m *ListBannedReply) String() string            { return proto.CompactTextString(m) }
func (*ListBannedReply) ProtoMessage()               {}
func (*ListBannedReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{153} }

func (m *ListBannedReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ListBannedReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListBannedReply) GetEntries() []*BlackListInfo {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListAllowedReply struct {
	Success bool             `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result        `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Entries []*WhiteListInfo `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
}

func (m *ListAllowedReply) Reset()                    { *m = ListAllowedReply{} }
func (m *ListAllowedReply) String() string            { return proto.CompactTextString(m) }
func (*ListAllowedReply) ProtoMessage()               {}
func (*ListAllowedReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{154} }

func (m *ListAllowedReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ListAllowedReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListAllowedReply) GetEntries() []*WhiteListInfo {
	if m != nil {
		return m.Entries
	}
	return nil
}

type ListBannedMinersRequest struct {
}

func (m *ListBannedMinersRequest) Reset()                    { *m = ListBannedMinersRequest{} }
func (m *ListBannedMinersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBannedMinersRequest) ProtoMessage()               {}
func (*ListBannedMinersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{155} }

type ListBannedMinersReply struct {
	Success bool      `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	Results []*Result `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
	Clients []string  `protobuf:"bytes,3,rep,name=clients" json:"clients,omitempty"`
}

func (m *ListBannedMinersReply) Reset()                    { *m = ListBannedMinersReply{} }
func (m *ListBannedMinersReply) String() string            { return proto.CompactTextString(m) }
func (*ListBannedMinersReply) ProtoMessage()               {}
func (*ListBannedMinersReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{156} }

func (m *ListBannedMinersReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ListBannedMinersReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListBannedMinersReply) GetClients() []string {
	if m != nil {
		return m.Clients
	}
	return nil
}

type ClearBannedRequest struct {
}

func (m *ClearBannedRequest) Reset()                    { *m = ClearBannedRequest{} }
func (m *ClearBannedRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearBannedRequest) ProtoMessage()               {}
func (*ClearBannedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{157} }

type ClearBannedMinersRequest struct {
}

func (m *ClearBannedMinersRequest) Reset()                    { *m = ClearBannedMinersRequest{} }
func (m *ClearBannedMinersRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearBannedMinersRequest) ProtoMessage()               {}
func (*ClearBannedMinersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{158} }

type ClearAllowedRequest struct {
}

func (m *ClearAllowedRequest) Reset()                    { *m = ClearAllowedRequest{} }
func (m *ClearAllowedRequest) String() string            { return proto.CompactTextString(m) }
func (*ClearAllowedRequest) ProtoMessage()               {}
func (*ClearAllowedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{159} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{160} }

type PingReply struct {
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{161} }

type GetBitcoinBlockIndexRequest struct {
	BlockHeader  []byte `protobuf:"bytes,1,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
	SearchLength int32  `protobuf:"varint,2,opt,name=search_length,json=searchLength" json:"search_length,omitempty"`
}

func (m *GetBitcoinBlockIndexRequest) Reset()                    { *m = GetBitcoinBlockIndexRequest{} }
func (m *GetBitcoinBlockIndexRequest) String() string            { return proto.CompactTextString(m) }
func (*GetBitcoinBlockIndexRequest) ProtoMessage()               {}
func (*GetBitcoinBlockIndexRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{162} }

func (m *GetBitcoinBlockIndexRequest) GetBlockHeader() []byte {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *GetBitcoinBlockIndexRequest) GetSearchLength() int32 {
	if m != nil {
		return m.SearchLength
	}
	return 0
}

type GetWalletTransactionsRequest struct {
	RequestType     GetWalletTransactionsRequest_Type `protobuf:"varint,1,opt,name=request_type,json=requestType,enum=core.GetWalletTransactionsRequest_Type" json:"request_type,omitempty"`
	Address         []byte                            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	TransactionType WalletTransaction_Type            `protobuf:"varint,3,opt,name=transaction_type,json=transactionType,enum=core.WalletTransaction_Type" json:"transaction_type,omitempty"`
	Status          TransactionMeta_Status            `protobuf:"varint,4,opt,name=status,enum=core.TransactionMeta_Status" json:"status,omitempty"`
	AmountFilter    *NumericFilter                    `protobuf:"bytes,5,opt,name=amount_filter,json=amountFilter" json:"amount_filter,omitempty"`
	TimestampFilter *NumericFilter                    `protobuf:"bytes,6,opt,name=timestamp_filter,json=timestampFilter" json:"timestamp_filter,omitempty"`
	Page            *Paging                           `protobuf:"bytes,7,opt,name=page" json:"page,omitempty"`
}

func (m *GetWalletTransactionsRequest) Reset()                    { *m = GetWalletTransactionsRequest{} }
func (m *GetWalletTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWalletTransactionsRequest) ProtoMessage()               {}
func (*GetWalletTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{163} }

func (m *GetWalletTransactionsRequest) GetRequestType() GetWalletTransactionsRequest_Type {
	if m != nil {
		return m.RequestType
	}
	return GetWalletTransactionsRequest_LIST
}

func (m *GetWalletTransactionsRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *GetWalletTransactionsRequest) GetTransactionType() WalletTransaction_Type {
	if m != nil {
		return m.TransactionType
	}
	return WalletTransaction_NOT_SET
}

func (m *GetWalletTransactionsRequest) GetStatus() TransactionMeta_Status {
	if m != nil {
		return m.Status
	}
	return TransactionMeta_UNKNOWN
}

func (m *GetWalletTransactionsRequest) GetAmountFilter() *NumericFilter {
	if m != nil {
		return m.AmountFilter
	}
	return nil
}

func (m *GetWalletTransactionsRequest) GetTimestampFilter() *NumericFilter {
	if m != nil {
		return m.TimestampFilter
	}
	return nil
}

func (m *GetWalletTransactionsRequest) GetPage() *Paging {
	if m != nil {
		return m.Page
	}
	return nil
}

type GetWalletTransactionsReply struct {
	Next         *Paging                               `protobuf:"bytes,1,opt,name=next" json:"next,omitempty"`
	Transactions []*WalletTransaction                  `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
	CacheState   GetWalletTransactionsReply_CacheState `protobuf:"varint,3,opt,name=cache_state,json=cacheState,enum=core.GetWalletTransactionsReply_CacheState" json:"cache_state,omitempty"`
	Message      string                                `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	Success      bool                                  `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
	Results      []*Result                             `protobuf:"bytes,6,rep,name=results" json:"results,omitempty"`
}

func (m *GetWalletTransactionsReply) Reset()                    { *m = GetWalletTransactionsReply{} }
func (m *GetWalletTransactionsReply) String() string            { return proto.CompactTextString(m) }
func (*GetWalletTransactionsReply) ProtoMessage()               {}
func (*GetWalletTransactionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{164} }

func (m *GetWalletTransactionsReply) GetNext() *Paging {
	if m != nil {
		return m.Next
	}
	return nil
}

func (m *GetWalletTransactionsReply) GetTransactions() []*WalletTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *GetWalletTransactionsReply) GetCacheState() GetWalletTransactionsReply_CacheState {
	if m != nil {
		return m.CacheState
	}
	return GetWalletTransactionsReply_UNKNOWN
}

func (m *GetWalletTransactionsReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *GetWalletTransactionsReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetWalletTransactionsReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

type BlockchainStateInfo struct {
	State BlockchainStateInfo_State `protobuf:"varint,1,opt,name=state,enum=core.BlockchainStateInfo_State" json:"state,omitempty"`
}

func (m *BlockchainStateInfo) Reset()                    { *m = BlockchainStateInfo{} }
func (m *BlockchainStateInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockchainStateInfo) ProtoMessage()               {}
func (*BlockchainStateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{165} }

func (m *BlockchainStateInfo) GetState() BlockchainStateInfo_State {
	if m != nil {
		return m.State
	}
	return BlockchainStateInfo_LOADING
}

type OperatingStateInfo struct {
	State OperatingStateInfo_State `protobuf:"varint,1,opt,name=state,enum=core.OperatingStateInfo_State" json:"state,omitempty"`
}

func (m *OperatingStateInfo) Reset()                    { *m = OperatingStateInfo{} }
func (m *OperatingStateInfo) String() string            { return proto.CompactTextString(m) }
func (*OperatingStateInfo) ProtoMessage()               {}
func (*OperatingStateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{166} }

func (m *OperatingStateInfo) GetState() OperatingStateInfo_State {
	if m != nil {
		return m.State
	}
	return OperatingStateInfo_STARTED
}

type NetworkStateInfo struct {
	State NetworkStateInfo_State `protobuf:"varint,1,opt,name=state,enum=core.NetworkStateInfo_State" json:"state,omitempty"`
}

func (m *NetworkStateInfo) Reset()                    { *m = NetworkStateInfo{} }
func (m *NetworkStateInfo) String() string            { return proto.CompactTextString(m) }
func (*NetworkStateInfo) ProtoMessage()               {}
func (*NetworkStateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{167} }

func (m *NetworkStateInfo) GetState() NetworkStateInfo_State {
	if m != nil {
		return m.State
	}
	return NetworkStateInfo_DISCONNECTED
}

type GetStateInfoRequest struct {
}

func (m *GetStateInfoRequest) Reset()                    { *m = GetStateInfoRequest{} }
func (m *GetStateInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*GetStateInfoRequest) ProtoMessage()               {}
func (*GetStateInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{168} }

type GetStateInfoReply struct {
	BlockchainState       *BlockchainStateInfo `protobuf:"bytes,1,opt,name=blockchain_state,json=blockchainState" json:"blockchain_state,omitempty"`
	OperatingState        *OperatingStateInfo  `protobuf:"bytes,2,opt,name=operating_state,json=operatingState" json:"operating_state,omitempty"`
	NetworkState          *NetworkStateInfo    `protobuf:"bytes,3,opt,name=network_state,json=networkState" json:"network_state,omitempty"`
	ConnectedPeerCount    int32                `protobuf:"varint,4,opt,name=connected_peer_count,json=connectedPeerCount" json:"connected_peer_count,omitempty"`
	CurrentSyncPeer       string               `protobuf:"bytes,5,opt,name=current_sync_peer,json=currentSyncPeer" json:"current_sync_peer,omitempty"`
	NetworkHeight         int32                `protobuf:"varint,6,opt,name=network_height,json=networkHeight" json:"network_height,omitempty"`
	LocalBlockchainHeight int32                `protobuf:"varint,7,opt,name=local_blockchain_height,json=localBlockchainHeight" json:"local_blockchain_height,omitempty"`
	Success               bool                 `protobuf:"varint,8,opt,name=success" json:"success,omitempty"`
	Results               []*Result            `protobuf:"bytes,9,rep,name=results" json:"results,omitempty"`
	NetworkVersion        string               `protobuf:"bytes,10,opt,name=network_version,json=networkVersion" json:"network_version,omitempty"`
	DataDirectory         string               `protobuf:"bytes,11,opt,name=data_directory,json=dataDirectory" json:"data_directory,omitempty"`
	ProgramVersion        string               `protobuf:"bytes,12,opt,name=program_version,json=programVersion" json:"program_version,omitempty"`
	NodecoreStarttime     int64                `protobuf:"varint,13,opt,name=nodecore_starttime,json=nodecoreStarttime" json:"nodecore_starttime,omitempty"`
	WalletCacheSyncHeight int32                `protobuf:"varint,14,opt,name=wallet_cache_sync_height,json=walletCacheSyncHeight" json:"wallet_cache_sync_height,omitempty"`
}

func (m *GetStateInfoReply) Reset()                    { *m = GetStateInfoReply{} }
func (m *GetStateInfoReply) String() string            { return proto.CompactTextString(m) }
func (*GetStateInfoReply) ProtoMessage()               {}
func (*GetStateInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{169} }

func (m *GetStateInfoReply) GetBlockchainState() *BlockchainStateInfo {
	if m != nil {
		return m.BlockchainState
	}
	return nil
}

func (m *GetStateInfoReply) GetOperatingState() *OperatingStateInfo {
	if m != nil {
		return m.OperatingState
	}
	return nil
}

func (m *GetStateInfoReply) GetNetworkState() *NetworkStateInfo {
	if m != nil {
		return m.NetworkState
	}
	return nil
}

func (m *GetStateInfoReply) GetConnectedPeerCount() int32 {
	if m != nil {
		return m.ConnectedPeerCount
	}
	return 0
}

func (m *GetStateInfoReply) GetCurrentSyncPeer() string {
	if m != nil {
		return m.CurrentSyncPeer
	}
	return ""
}

func (m *GetStateInfoReply) GetNetworkHeight() int32 {
	if m != nil {
		return m.NetworkHeight
	}
	return 0
}

func (m *GetStateInfoReply) GetLocalBlockchainHeight() int32 {
	if m != nil {
		return m.LocalBlockchainHeight
	}
	return 0
}

func (m *GetStateInfoReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GetStateInfoReply) GetResults() []*Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *GetStateInfoReply) GetNetworkVersion() string {
	if m != nil {
		return m.NetworkVersion
	}
	return ""
}

func (m *GetStateInfoReply) GetDataDirectory() string {
	if m != nil {
		return m.DataDirectory
	}
	return ""
}

func (m *GetStateInfoReply) GetProgramVersion() string {
	if m != nil {
		return m.ProgramVersion
	}
	return ""
}

func (m *GetStateInfoReply) GetNodecoreStarttime() int64 {
	if m != nil {
		return m.NodecoreStarttime
	}
	return 0
}

func (m *GetStateInfoReply) GetWalletCacheSyncHeight() int32 {
	if m != nil {
		return m.WalletCacheSyncHeight
	}
	return 0
}

type StopNodeCoreRequest struct {
}

func (m *StopNodeCoreRequest) Reset()                    { *m = StopNodeCoreRequest{} }
func (m *StopNodeCoreRequest) String() string            { return proto.CompactTextString(m) }
func (*StopNodeCoreRequest) ProtoMessage()               {}
func (*StopNodeCoreRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{170} }

type RefreshWalletCacheRequest struct {
}

func (m *RefreshWalletCacheRequest) Reset()                    { *m = RefreshWalletCacheRequest{} }
func (m *RefreshWalletCacheRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshWalletCacheRequest) ProtoMessage()               {}
func (*RefreshWalletCacheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{171} }

type EncryptWalletRequest struct {
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase" json:"passphrase,omitempty"`
}

func (m *EncryptWalletRequest) Reset()                    { *m = EncryptWalletRequest{} }
func (m *EncryptWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*EncryptWalletRequest) ProtoMessage()               {}
func (*EncryptWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{172} }

func (m *EncryptWalletRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type DecryptWalletRequest struct {
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase" json:"passphrase,omitempty"`
}

func (m *DecryptWalletRequest) Reset()                    { *m = DecryptWalletRequest{} }
func (m *DecryptWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*DecryptWalletRequest) ProtoMessage()               {}
func (*DecryptWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{173} }

func (m *DecryptWalletRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type UnlockWalletRequest struct {
	Passphrase string `protobuf:"bytes,1,opt,name=passphrase" json:"passphrase,omitempty"`
}

func (m *UnlockWalletRequest) Reset()                    { *m = UnlockWalletRequest{} }
func (m *UnlockWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*UnlockWalletRequest) ProtoMessage()               {}
func (*UnlockWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{174} }

func (m *UnlockWalletRequest) GetPassphrase() string {
	if m != nil {
		return m.Passphrase
	}
	return ""
}

type LockWalletRequest struct {
}

func (m *LockWalletRequest) Reset()                    { *m = LockWalletRequest{} }
func (m *LockWalletRequest) String() string            { return proto.CompactTextString(m) }
func (*LockWalletRequest) ProtoMessage()               {}
func (*LockWalletRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{175} }

func init() {
	proto.RegisterType((*Output)(nil), "core.Output")
	proto.RegisterType((*Paging)(nil), "core.Paging")
	proto.RegisterType((*NumericFilter)(nil), "core.NumericFilter")
	proto.RegisterType((*Endpoint)(nil), "core.Endpoint")
	proto.RegisterType((*MultisigSlot)(nil), "core.MultisigSlot")
	proto.RegisterType((*MultisigBundle)(nil), "core.MultisigBundle")
	proto.RegisterType((*SignedTransaction)(nil), "core.SignedTransaction")
	proto.RegisterType((*SignedMultisigTransaction)(nil), "core.SignedMultisigTransaction")
	proto.RegisterType((*CoinbaseTransaction)(nil), "core.CoinbaseTransaction")
	proto.RegisterType((*BitcoinBlockHeader)(nil), "core.BitcoinBlockHeader")
	proto.RegisterType((*PoPEndorsementInfo)(nil), "core.PoPEndorsementInfo")
	proto.RegisterType((*StandardAddress)(nil), "core.StandardAddress")
	proto.RegisterType((*TroubleshootPoPTransactionsRequest)(nil), "core.TroubleshootPoPTransactionsRequest")
	proto.RegisterType((*AddressSet)(nil), "core.AddressSet")
	proto.RegisterType((*TransactionSet)(nil), "core.TransactionSet")
	proto.RegisterType((*TroubleshootPoPTransactionsReply)(nil), "core.TroubleshootPoPTransactionsReply")
	proto.RegisterType((*PoPTransactionProblemReport)(nil), "core.PoPTransactionProblemReport")
	proto.RegisterType((*GetPoPEndorsementsInfoRequest)(nil), "core.GetPoPEndorsementsInfoRequest")
	proto.RegisterType((*GetPoPEndorsementsInfoReply)(nil), "core.GetPoPEndorsementsInfoReply")
	proto.RegisterType((*GetProtectedChildrenRequest)(nil), "core.GetProtectedChildrenRequest")
	proto.RegisterType((*GetProtectedChildrenReply)(nil), "core.GetProtectedChildrenReply")
	proto.RegisterType((*GetProtectingParentsRequest)(nil), "core.GetProtectingParentsRequest")
	proto.RegisterType((*GetProtectingParentsReply)(nil), "core.GetProtectingParentsReply")
	proto.RegisterType((*Transaction)(nil), "core.Transaction")
	proto.RegisterType((*UnsignedMultisigTransactionWithIndex)(nil), "core.UnsignedMultisigTransactionWithIndex")
	proto.RegisterType((*TransactionUnion)(nil), "core.TransactionUnion")
	proto.RegisterType((*VBKTransactionWithContext)(nil), "core.VBKTransactionWithContext")
	proto.RegisterType((*VBKMerklePath)(nil), "core.VBKMerklePath")
	proto.RegisterType((*TransactionMeta)(nil), "core.TransactionMeta")
	proto.RegisterType((*WalletTransaction)(nil), "core.WalletTransaction")
	proto.RegisterType((*PoPDatastore)(nil), "core.PoPDatastore")
	proto.RegisterType((*AltchainIdAltchainHeaderEndorsementCountsPair)(nil), "core.AltchainIdAltchainHeaderEndorsementCountsPair")
	proto.RegisterType((*BitcoinHeaderVeriBlockEndorsementCountsPair)(nil), "core.BitcoinHeaderVeriBlockEndorsementCountsPair")
	proto.RegisterType((*VeriBlockHeaderEndorsementCountPair)(nil), "core.VeriBlockHeaderEndorsementCountPair")
	proto.RegisterType((*AltchainHeaderEndorsementCountPair)(nil), "core.AltchainHeaderEndorsementCountPair")
	proto.RegisterType((*BlockContentMetapackage)(nil), "core.BlockContentMetapackage")
	proto.RegisterType((*BlockSummary)(nil), "core.BlockSummary")
	proto.RegisterType((*LightBlockSummary)(nil), "core.LightBlockSummary")
	proto.RegisterType((*Block)(nil), "core.Block")
	proto.RegisterType((*BlockHeader)(nil), "core.BlockHeader")
	proto.RegisterType((*FilteredBlock)(nil), "core.FilteredBlock")
	proto.RegisterType((*LightVBKBlock)(nil), "core.LightVBKBlock")
	proto.RegisterType((*BlockFilter)(nil), "core.BlockFilter")
	proto.RegisterType((*GetBlocksRequest)(nil), "core.GetBlocksRequest")
	proto.RegisterType((*Result)(nil), "core.Result")
	proto.RegisterType((*ProtocolReply)(nil), "core.ProtocolReply")
	proto.RegisterType((*GetBlocksReply)(nil), "core.GetBlocksReply")
	proto.RegisterType((*BackupWalletRequest)(nil), "core.BackupWalletRequest")
	proto.RegisterType((*BackupWalletReply)(nil), "core.BackupWalletReply")
	proto.RegisterType((*ImportWalletRequest)(nil), "core.ImportWalletRequest")
	proto.RegisterType((*ImportWalletReply)(nil), "core.ImportWalletReply")
	proto.RegisterType((*Announce)(nil), "core.Announce")
	proto.RegisterType((*NodeInfo)(nil), "core.NodeInfo")
	proto.RegisterType((*AddBlocksRequest)(nil), "core.AddBlocksRequest")
	proto.RegisterType((*BlockInfo)(nil), "core.BlockInfo")
	proto.RegisterType((*AddTransactionsReply)(nil), "core.AddTransactionsReply")
	proto.RegisterType((*Heartbeat)(nil), "core.Heartbeat")
	proto.RegisterType((*BlockQuery)(nil), "core.BlockQuery")
	proto.RegisterType((*BlockQueryReply)(nil), "core.BlockQueryReply")
	proto.RegisterType((*SyncRequest)(nil), "core.SyncRequest")
	proto.RegisterType((*NetworkInfoRequest)(nil), "core.NetworkInfoRequest")
	proto.RegisterType((*NetworkInfoReply)(nil), "core.NetworkInfoReply")
	proto.RegisterType((*Acknowledgement)(nil), "core.Acknowledgement")
	proto.RegisterType((*AdvertiseBlocks)(nil), "core.AdvertiseBlocks")
	proto.RegisterType((*TransactionAnnounce)(nil), "core.TransactionAnnounce")
	proto.RegisterType((*AdvertiseTransaction)(nil), "core.AdvertiseTransaction")
	proto.RegisterType((*BlockRequest)(nil), "core.BlockRequest")
	proto.RegisterType((*TransactionRequest)(nil), "core.TransactionRequest")
	proto.RegisterType((*KeystoneQuery)(nil), "core.KeystoneQuery")
	proto.RegisterType((*NotFound)(nil), "core.NotFound")
	proto.RegisterType((*CreateFilter)(nil), "core.CreateFilter")
	proto.RegisterType((*AddFilter)(nil), "core.AddFilter")
	proto.RegisterType((*ClearFilter)(nil), "core.ClearFilter")
	proto.RegisterType((*Event)(nil), "core.Event")
	proto.RegisterType((*NodeRequest)(nil), "core.NodeRequest")
	proto.RegisterType((*StartPoolRequest)(nil), "core.StartPoolRequest")
	proto.RegisterType((*StartPoolReply)(nil), "core.StartPoolReply")
	proto.RegisterType((*StopPoolRequest)(nil), "core.StopPoolRequest")
	proto.RegisterType((*StopPoolReply)(nil), "core.StopPoolReply")
	proto.RegisterType((*RestartPoolWebServerRequest)(nil), "core.RestartPoolWebServerRequest")
	proto.RegisterType((*RestartPoolWebServerReply)(nil), "core.RestartPoolWebServerReply")
	proto.RegisterType((*GetPopRequest)(nil), "core.GetPopRequest")
	proto.RegisterType((*GetPopReply)(nil), "core.GetPopReply")
	proto.RegisterType((*GetInfoRequest)(nil), "core.GetInfoRequest")
	proto.RegisterType((*GetDiagnosticInfoRequest)(nil), "core.GetDiagnosticInfoRequest")
	proto.RegisterType((*GetBalanceRequest)(nil), "core.GetBalanceRequest")
	proto.RegisterType((*GetBalanceReply)(nil), "core.GetBalanceReply")
	proto.RegisterType((*SubmitPopRequest)(nil), "core.SubmitPopRequest")
	proto.RegisterType((*PoPEndorsement)(nil), "core.PoPEndorsement")
	proto.RegisterType((*GetEndorsementsOfBlockRequest)(nil), "core.GetEndorsementsOfBlockRequest")
	proto.RegisterType((*GetEndorsementsOfBlockReply)(nil), "core.GetEndorsementsOfBlockReply")
	proto.RegisterType((*SendCoinsRequest)(nil), "core.SendCoinsRequest")
	proto.RegisterType((*SendCoinsReply)(nil), "core.SendCoinsReply")
	proto.RegisterType((*SendAltChainEndorsementRequest)(nil), "core.SendAltChainEndorsementRequest")
	proto.RegisterType((*SendAltChainEndorsementReply)(nil), "core.SendAltChainEndorsementReply")
	proto.RegisterType((*GetHistoryRequest)(nil), "core.GetHistoryRequest")
	proto.RegisterType((*AddressHistory)(nil), "core.AddressHistory")
	proto.RegisterType((*GetHistoryReply)(nil), "core.GetHistoryReply")
	proto.RegisterType((*GetPeerInfoRequest)(nil), "core.GetPeerInfoRequest")
	proto.RegisterType((*NodeHeight)(nil), "core.NodeHeight")
	proto.RegisterType((*GetPeerInfoReply)(nil), "core.GetPeerInfoReply")
	proto.RegisterType((*GetBlockchainsRequest)(nil), "core.GetBlockchainsRequest")
	proto.RegisterType((*GetBlockchainsReply)(nil), "core.GetBlockchainsReply")
	proto.RegisterType((*SubmitBlocksRequest)(nil), "core.SubmitBlocksRequest")
	proto.RegisterType((*GetBlockTimesRequest)(nil), "core.GetBlockTimesRequest")
	proto.RegisterType((*GetBlockTimesReply)(nil), "core.GetBlockTimesReply")
	proto.RegisterType((*StartSoloPoolRequest)(nil), "core.StartSoloPoolRequest")
	proto.RegisterType((*StartSoloPoolReply)(nil), "core.StartSoloPoolReply")
	proto.RegisterType((*GetSignatureIndexRequest)(nil), "core.GetSignatureIndexRequest")
	proto.RegisterType((*SetDefaultAddressRequest)(nil), "core.SetDefaultAddressRequest")
	proto.RegisterType((*AddressSignatureIndexes)(nil), "core.AddressSignatureIndexes")
	proto.RegisterType((*GetSignatureIndexReply)(nil), "core.GetSignatureIndexReply")
	proto.RegisterType((*SetDefaultAddressReply)(nil), "core.SetDefaultAddressReply")
	proto.RegisterType((*GetTransactionsRequest)(nil), "core.GetTransactionsRequest")
	proto.RegisterType((*TransactionInfo)(nil), "core.TransactionInfo")
	proto.RegisterType((*GetTransactionsReply)(nil), "core.GetTransactionsReply")
	proto.RegisterType((*SetTransactionFeeRequest)(nil), "core.SetTransactionFeeRequest")
	proto.RegisterType((*DumpPrivateKeyRequest)(nil), "core.DumpPrivateKeyRequest")
	proto.RegisterType((*DumpPrivateKeyReply)(nil), "core.DumpPrivateKeyReply")
	proto.RegisterType((*ImportPrivateKeyRequest)(nil), "core.ImportPrivateKeyRequest")
	proto.RegisterType((*ImportPrivateKeyReply)(nil), "core.ImportPrivateKeyReply")
	proto.RegisterType((*GetLastBitcoinBlockRequest)(nil), "core.GetLastBitcoinBlockRequest")
	proto.RegisterType((*GetLastBlockRequest)(nil), "core.GetLastBlockRequest")
	proto.RegisterType((*GetLastBitcoinBlockReply)(nil), "core.GetLastBitcoinBlockReply")
	proto.RegisterType((*GetLastBlockReply)(nil), "core.GetLastBlockReply")
	proto.RegisterType((*ListBlocksSinceRequest)(nil), "core.ListBlocksSinceRequest")
	proto.RegisterType((*ListBlocksSinceReply)(nil), "core.ListBlocksSinceReply")
	proto.RegisterType((*SubmitTransactionsRequest)(nil), "core.SubmitTransactionsRequest")
	proto.RegisterType((*GetInfoReply)(nil), "core.GetInfoReply")
	proto.RegisterType((*GetDiagnosticInfoReply)(nil), "core.GetDiagnosticInfoReply")
	proto.RegisterType((*GetPendingTransactionsRequest)(nil), "core.GetPendingTransactionsRequest")
	proto.RegisterType((*GetPendingTransactionsReply)(nil), "core.GetPendingTransactionsReply")
	proto.RegisterType((*GetNewAddressRequest)(nil), "core.GetNewAddressRequest")
	proto.RegisterType((*GetNewAddressReply)(nil), "core.GetNewAddressReply")
	proto.RegisterType((*ValidateAddressRequest)(nil), "core.ValidateAddressRequest")
	proto.RegisterType((*ValidateAddressReply)(nil), "core.ValidateAddressReply")
	proto.RegisterType((*GenerateMultisigAddressRequest)(nil), "core.GenerateMultisigAddressRequest")
	proto.RegisterType((*GenerateMultisigAddressReply)(nil), "core.GenerateMultisigAddressReply")
	proto.RegisterType((*MakeUnsignedMultisigTxRequest)(nil), "core.MakeUnsignedMultisigTxRequest")
	proto.RegisterType((*MakeUnsignedMultisigTxReply)(nil), "core.MakeUnsignedMultisigTxReply")
	proto.RegisterType((*SubmitMultisigTxRequest)(nil), "core.SubmitMultisigTxRequest")
	proto.RegisterType((*SubmitMultisigTxReply)(nil), "core.SubmitMultisigTxReply")
	proto.RegisterType((*SignMessageRequest)(nil), "core.SignMessageRequest")
	proto.RegisterType((*SignMessageReply)(nil), "core.SignMessageReply")
	proto.RegisterType((*GetBlockTemplateRequest)(nil), "core.GetBlockTemplateRequest")
	proto.RegisterType((*CandidateTransaction)(nil), "core.CandidateTransaction")
	proto.RegisterType((*GetBlockTemplateReply)(nil), "core.GetBlockTemplateReply")
	proto.RegisterType((*SetBanRequest)(nil), "core.SetBanRequest")
	proto.RegisterType((*SetAllowedRequest)(nil), "core.SetAllowedRequest")
	proto.RegisterType((*BlackListInfo)(nil), "core.BlackListInfo")
	proto.RegisterType((*WhiteListInfo)(nil), "core.WhiteListInfo")
	proto.RegisterType((*ListBannedRequest)(nil), "core.ListBannedRequest")
	proto.RegisterType((*ListAllowedRequest)(nil), "core.ListAllowedRequest")
	proto.RegisterType((*ListBannedReply)(nil), "core.ListBannedReply")
	proto.RegisterType((*ListAllowedReply)(nil), "core.ListAllowedReply")
	proto.RegisterType((*ListBannedMinersRequest)(nil), "core.ListBannedMinersRequest")
	proto.RegisterType((*ListBannedMinersReply)(nil), "core.ListBannedMinersReply")
	proto.RegisterType((*ClearBannedRequest)(nil), "core.ClearBannedRequest")
	proto.RegisterType((*ClearBannedMinersRequest)(nil), "core.ClearBannedMinersRequest")
	proto.RegisterType((*ClearAllowedRequest)(nil), "core.ClearAllowedRequest")
	proto.RegisterType((*PingRequest)(nil), "core.PingRequest")
	proto.RegisterType((*PingReply)(nil), "core.PingReply")
	proto.RegisterType((*GetBitcoinBlockIndexRequest)(nil), "core.GetBitcoinBlockIndexRequest")
	proto.RegisterType((*GetWalletTransactionsRequest)(nil), "core.GetWalletTransactionsRequest")
	proto.RegisterType((*GetWalletTransactionsReply)(nil), "core.GetWalletTransactionsReply")
	proto.RegisterType((*BlockchainStateInfo)(nil), "core.BlockchainStateInfo")
	proto.RegisterType((*OperatingStateInfo)(nil), "core.OperatingStateInfo")
	proto.RegisterType((*NetworkStateInfo)(nil), "core.NetworkStateInfo")
	proto.RegisterType((*GetStateInfoRequest)(nil), "core.GetStateInfoRequest")
	proto.RegisterType((*GetStateInfoReply)(nil), "core.GetStateInfoReply")
	proto.RegisterType((*StopNodeCoreRequest)(nil), "core.StopNodeCoreRequest")
	proto.RegisterType((*RefreshWalletCacheRequest)(nil), "core.RefreshWalletCacheRequest")
	proto.RegisterType((*EncryptWalletRequest)(nil), "core.EncryptWalletRequest")
	proto.RegisterType((*DecryptWalletRequest)(nil), "core.DecryptWalletRequest")
	proto.RegisterType((*UnlockWalletRequest)(nil), "core.UnlockWalletRequest")
	proto.RegisterType((*LockWalletRequest)(nil), "core.LockWalletRequest")
	proto.RegisterEnum("core.NumericFilter_Operator", NumericFilter_Operator_name, NumericFilter_Operator_value)
	proto.RegisterEnum("core.Transaction_Type", Transaction_Type_name, Transaction_Type_value)
	proto.RegisterEnum("core.TransactionMeta_Status", TransactionMeta_Status_name, TransactionMeta_Status_value)
	proto.RegisterEnum("core.WalletTransaction_Type", WalletTransaction_Type_name, WalletTransaction_Type_value)
	proto.RegisterEnum("core.TransactionAnnounce_Type", TransactionAnnounce_Type_name, TransactionAnnounce_Type_value)
	proto.RegisterEnum("core.NotFound_Type", NotFound_Type_name, NotFound_Type_value)
	proto.RegisterEnum("core.SetBanRequest_Command", SetBanRequest_Command_name, SetBanRequest_Command_value)
	proto.RegisterEnum("core.SetAllowedRequest_Command", SetAllowedRequest_Command_name, SetAllowedRequest_Command_value)
	proto.RegisterEnum("core.BlackListInfo_Type", BlackListInfo_Type_name, BlackListInfo_Type_value)
	proto.RegisterEnum("core.WhiteListInfo_Type", WhiteListInfo_Type_name, WhiteListInfo_Type_value)
	proto.RegisterEnum("core.GetWalletTransactionsRequest_Type", GetWalletTransactionsRequest_Type_name, GetWalletTransactionsRequest_Type_value)
	proto.RegisterEnum("core.GetWalletTransactionsReply_CacheState", GetWalletTransactionsReply_CacheState_name, GetWalletTransactionsReply_CacheState_value)
	proto.RegisterEnum("core.BlockchainStateInfo_State", BlockchainStateInfo_State_name, BlockchainStateInfo_State_value)
	proto.RegisterEnum("core.OperatingStateInfo_State", OperatingStateInfo_State_name, OperatingStateInfo_State_value)
	proto.RegisterEnum("core.NetworkStateInfo_State", NetworkStateInfo_State_name, NetworkStateInfo_State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Peer service

type PeerClient interface {
	EventStream(ctx context.Context, opts ...grpc.CallOption) (Peer_EventStreamClient, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (Peer_EventStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[0], c.cc, "/core.Peer/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerEventStreamClient{stream}
	return x, nil
}

type Peer_EventStreamClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type peerEventStreamClient struct {
	grpc.ClientStream
}

func (x *peerEventStreamClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerEventStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Peer service

type PeerServer interface {
	EventStream(Peer_EventStreamServer) error
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).EventStream(&peerEventStreamServer{stream})
}

type Peer_EventStreamServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type peerEventStreamServer struct {
	grpc.ServerStream
}

func (x *peerEventStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerEventStreamServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _Peer_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "veriblock.proto",
}

// Client API for Admin service

type AdminClient interface {
	GetPop(ctx context.Context, in *GetPopRequest, opts ...grpc.CallOption) (*GetPopReply, error)
	AddNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	SetBan(ctx context.Context, in *SetBanRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error)
	GetDiagnosticInfo(ctx context.Context, in *GetDiagnosticInfoRequest, opts ...grpc.CallOption) (*GetDiagnosticInfoReply, error)
	RemoveNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	StopPool(ctx context.Context, in *StopPoolRequest, opts ...grpc.CallOption) (*StopPoolReply, error)
	SubmitPop(ctx context.Context, in *SubmitPopRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	SendCoins(ctx context.Context, in *SendCoinsRequest, opts ...grpc.CallOption) (*SendCoinsReply, error)
	SendAltChainEndorsement(ctx context.Context, in *SendAltChainEndorsementRequest, opts ...grpc.CallOption) (*SendAltChainEndorsementReply, error)
	GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksReply, error)
	StartPool(ctx context.Context, in *StartPoolRequest, opts ...grpc.CallOption) (*StartPoolReply, error)
	RestartPoolWebServer(ctx context.Context, in *RestartPoolWebServerRequest, opts ...grpc.CallOption) (*RestartPoolWebServerReply, error)
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryReply, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error)
	SetAllowed(ctx context.Context, in *SetAllowedRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	ListBanned(ctx context.Context, in *ListBannedRequest, opts ...grpc.CallOption) (*ListBannedReply, error)
	ListBannedMiners(ctx context.Context, in *ListBannedMinersRequest, opts ...grpc.CallOption) (*ListBannedMinersReply, error)
	ClearBanned(ctx context.Context, in *ClearBannedRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	ClearBannedMiners(ctx context.Context, in *ClearBannedMinersRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	SubmitBlocks(ctx context.Context, in *SubmitBlocksRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	ClearAllowed(ctx context.Context, in *ClearAllowedRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	GetPeerInfo(ctx context.Context, in *GetPeerInfoRequest, opts ...grpc.CallOption) (*GetPeerInfoReply, error)
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageReply, error)
	ListAllowed(ctx context.Context, in *ListAllowedRequest, opts ...grpc.CallOption) (*ListAllowedReply, error)
	BackupWallet(ctx context.Context, in *BackupWalletRequest, opts ...grpc.CallOption) (*BackupWalletReply, error)
	ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*ImportWalletReply, error)
	GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressReply, error)
	GetBlockTimes(ctx context.Context, in *GetBlockTimesRequest, opts ...grpc.CallOption) (*GetBlockTimesReply, error)
	StartSoloPool(ctx context.Context, in *StartSoloPoolRequest, opts ...grpc.CallOption) (*StartSoloPoolReply, error)
	GetBlockchains(ctx context.Context, in *GetBlockchainsRequest, opts ...grpc.CallOption) (*GetBlockchainsReply, error)
	SetTransactionFee(ctx context.Context, in *SetTransactionFeeRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	DumpPrivateKey(ctx context.Context, in *DumpPrivateKeyRequest, opts ...grpc.CallOption) (*DumpPrivateKeyReply, error)
	ImportPrivateKey(ctx context.Context, in *ImportPrivateKeyRequest, opts ...grpc.CallOption) (*ImportPrivateKeyReply, error)
	SubmitTransactions(ctx context.Context, in *SubmitTransactionsRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsReply, error)
	ValidateAddress(ctx context.Context, in *ValidateAddressRequest, opts ...grpc.CallOption) (*ValidateAddressReply, error)
	GenerateMultisigAddress(ctx context.Context, in *GenerateMultisigAddressRequest, opts ...grpc.CallOption) (*GenerateMultisigAddressReply, error)
	MakeUnsignedMultisigTx(ctx context.Context, in *MakeUnsignedMultisigTxRequest, opts ...grpc.CallOption) (*MakeUnsignedMultisigTxReply, error)
	SubmitMultisigTx(ctx context.Context, in *SubmitMultisigTxRequest, opts ...grpc.CallOption) (*SubmitMultisigTxReply, error)
	GetBitcoinBlockIndex(ctx context.Context, in *GetBitcoinBlockIndexRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	GetBlockTemplate(ctx context.Context, in *GetBlockTemplateRequest, opts ...grpc.CallOption) (*GetBlockTemplateReply, error)
	GetSignatureIndex(ctx context.Context, in *GetSignatureIndexRequest, opts ...grpc.CallOption) (*GetSignatureIndexReply, error)
	SetDefaultAddress(ctx context.Context, in *SetDefaultAddressRequest, opts ...grpc.CallOption) (*SetDefaultAddressReply, error)
	GetLastBitcoinBlock(ctx context.Context, in *GetLastBitcoinBlockRequest, opts ...grpc.CallOption) (*GetLastBitcoinBlockReply, error)
	GetProtectedChildren(ctx context.Context, in *GetProtectedChildrenRequest, opts ...grpc.CallOption) (*GetProtectedChildrenReply, error)
	GetProtectingParents(ctx context.Context, in *GetProtectingParentsRequest, opts ...grpc.CallOption) (*GetProtectingParentsReply, error)
	GetWalletTransactions(ctx context.Context, in *GetWalletTransactionsRequest, opts ...grpc.CallOption) (*GetWalletTransactionsReply, error)
	GetEndorsementsOfBlock(ctx context.Context, in *GetEndorsementsOfBlockRequest, opts ...grpc.CallOption) (*GetEndorsementsOfBlockReply, error)
	GetPendingTransactions(ctx context.Context, in *GetPendingTransactionsRequest, opts ...grpc.CallOption) (*GetPendingTransactionsReply, error)
	GetPoPEndorsementsInfo(ctx context.Context, in *GetPoPEndorsementsInfoRequest, opts ...grpc.CallOption) (*GetPoPEndorsementsInfoReply, error)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	GetStateInfo(ctx context.Context, in *GetStateInfoRequest, opts ...grpc.CallOption) (*GetStateInfoReply, error)
	GetLastBlock(ctx context.Context, in *GetLastBlockRequest, opts ...grpc.CallOption) (*GetLastBlockReply, error)
	ListBlocksSince(ctx context.Context, in *ListBlocksSinceRequest, opts ...grpc.CallOption) (*ListBlocksSinceReply, error)
	TroubleshootPoPTransactions(ctx context.Context, in *TroubleshootPoPTransactionsRequest, opts ...grpc.CallOption) (*TroubleshootPoPTransactionsReply, error)
	StopNodeCore(ctx context.Context, in *StopNodeCoreRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	RefreshWalletCache(ctx context.Context, in *RefreshWalletCacheRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	EncryptWallet(ctx context.Context, in *EncryptWalletRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	DecryptWallet(ctx context.Context, in *DecryptWalletRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	UnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
	LockWallet(ctx context.Context, in *LockWalletRequest, opts ...grpc.CallOption) (*ProtocolReply, error)
}

type adminClient struct {
	cc *grpc.ClientConn
}

func NewAdminClient(cc *grpc.ClientConn) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) GetPop(ctx context.Context, in *GetPopRequest, opts ...grpc.CallOption) (*GetPopReply, error) {
	out := new(GetPopReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetPop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) AddNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetBan(ctx context.Context, in *SetBanRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/SetBan", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error) {
	out := new(GetInfoReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDiagnosticInfo(ctx context.Context, in *GetDiagnosticInfoRequest, opts ...grpc.CallOption) (*GetDiagnosticInfoReply, error) {
	out := new(GetDiagnosticInfoReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetDiagnosticInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RemoveNode(ctx context.Context, in *NodeRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/RemoveNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StopPool(ctx context.Context, in *StopPoolRequest, opts ...grpc.CallOption) (*StopPoolReply, error) {
	out := new(StopPoolReply)
	err := grpc.Invoke(ctx, "/core.Admin/StopPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SubmitPop(ctx context.Context, in *SubmitPopRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/SubmitPop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendCoins(ctx context.Context, in *SendCoinsRequest, opts ...grpc.CallOption) (*SendCoinsReply, error) {
	out := new(SendCoinsReply)
	err := grpc.Invoke(ctx, "/core.Admin/SendCoins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendAltChainEndorsement(ctx context.Context, in *SendAltChainEndorsementRequest, opts ...grpc.CallOption) (*SendAltChainEndorsementReply, error) {
	out := new(SendAltChainEndorsementReply)
	err := grpc.Invoke(ctx, "/core.Admin/SendAltChainEndorsement", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBlocks(ctx context.Context, in *GetBlocksRequest, opts ...grpc.CallOption) (*GetBlocksReply, error) {
	out := new(GetBlocksReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StartPool(ctx context.Context, in *StartPoolRequest, opts ...grpc.CallOption) (*StartPoolReply, error) {
	out := new(StartPoolReply)
	err := grpc.Invoke(ctx, "/core.Admin/StartPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RestartPoolWebServer(ctx context.Context, in *RestartPoolWebServerRequest, opts ...grpc.CallOption) (*RestartPoolWebServerReply, error) {
	out := new(RestartPoolWebServerReply)
	err := grpc.Invoke(ctx, "/core.Admin/RestartPoolWebServer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryReply, error) {
	out := new(GetHistoryReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error) {
	out := new(GetBalanceReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetBalance", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetAllowed(ctx context.Context, in *SetAllowedRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/SetAllowed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListBanned(ctx context.Context, in *ListBannedRequest, opts ...grpc.CallOption) (*ListBannedReply, error) {
	out := new(ListBannedReply)
	err := grpc.Invoke(ctx, "/core.Admin/ListBanned", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListBannedMiners(ctx context.Context, in *ListBannedMinersRequest, opts ...grpc.CallOption) (*ListBannedMinersReply, error) {
	out := new(ListBannedMinersReply)
	err := grpc.Invoke(ctx, "/core.Admin/ListBannedMiners", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ClearBanned(ctx context.Context, in *ClearBannedRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/ClearBanned", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ClearBannedMiners(ctx context.Context, in *ClearBannedMinersRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/ClearBannedMiners", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SubmitBlocks(ctx context.Context, in *SubmitBlocksRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/SubmitBlocks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ClearAllowed(ctx context.Context, in *ClearAllowedRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/ClearAllowed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPeerInfo(ctx context.Context, in *GetPeerInfoRequest, opts ...grpc.CallOption) (*GetPeerInfoReply, error) {
	out := new(GetPeerInfoReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetPeerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageReply, error) {
	out := new(SignMessageReply)
	err := grpc.Invoke(ctx, "/core.Admin/SignMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListAllowed(ctx context.Context, in *ListAllowedRequest, opts ...grpc.CallOption) (*ListAllowedReply, error) {
	out := new(ListAllowedReply)
	err := grpc.Invoke(ctx, "/core.Admin/ListAllowed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) BackupWallet(ctx context.Context, in *BackupWalletRequest, opts ...grpc.CallOption) (*BackupWalletReply, error) {
	out := new(BackupWalletReply)
	err := grpc.Invoke(ctx, "/core.Admin/BackupWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ImportWallet(ctx context.Context, in *ImportWalletRequest, opts ...grpc.CallOption) (*ImportWalletReply, error) {
	out := new(ImportWalletReply)
	err := grpc.Invoke(ctx, "/core.Admin/ImportWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetNewAddress(ctx context.Context, in *GetNewAddressRequest, opts ...grpc.CallOption) (*GetNewAddressReply, error) {
	out := new(GetNewAddressReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetNewAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBlockTimes(ctx context.Context, in *GetBlockTimesRequest, opts ...grpc.CallOption) (*GetBlockTimesReply, error) {
	out := new(GetBlockTimesReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetBlockTimes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StartSoloPool(ctx context.Context, in *StartSoloPoolRequest, opts ...grpc.CallOption) (*StartSoloPoolReply, error) {
	out := new(StartSoloPoolReply)
	err := grpc.Invoke(ctx, "/core.Admin/StartSoloPool", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBlockchains(ctx context.Context, in *GetBlockchainsRequest, opts ...grpc.CallOption) (*GetBlockchainsReply, error) {
	out := new(GetBlockchainsReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetBlockchains", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetTransactionFee(ctx context.Context, in *SetTransactionFeeRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/SetTransactionFee", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DumpPrivateKey(ctx context.Context, in *DumpPrivateKeyRequest, opts ...grpc.CallOption) (*DumpPrivateKeyReply, error) {
	out := new(DumpPrivateKeyReply)
	err := grpc.Invoke(ctx, "/core.Admin/DumpPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ImportPrivateKey(ctx context.Context, in *ImportPrivateKeyRequest, opts ...grpc.CallOption) (*ImportPrivateKeyReply, error) {
	out := new(ImportPrivateKeyReply)
	err := grpc.Invoke(ctx, "/core.Admin/ImportPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SubmitTransactions(ctx context.Context, in *SubmitTransactionsRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/SubmitTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (*GetTransactionsReply, error) {
	out := new(GetTransactionsReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ValidateAddress(ctx context.Context, in *ValidateAddressRequest, opts ...grpc.CallOption) (*ValidateAddressReply, error) {
	out := new(ValidateAddressReply)
	err := grpc.Invoke(ctx, "/core.Admin/ValidateAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GenerateMultisigAddress(ctx context.Context, in *GenerateMultisigAddressRequest, opts ...grpc.CallOption) (*GenerateMultisigAddressReply, error) {
	out := new(GenerateMultisigAddressReply)
	err := grpc.Invoke(ctx, "/core.Admin/GenerateMultisigAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) MakeUnsignedMultisigTx(ctx context.Context, in *MakeUnsignedMultisigTxRequest, opts ...grpc.CallOption) (*MakeUnsignedMultisigTxReply, error) {
	out := new(MakeUnsignedMultisigTxReply)
	err := grpc.Invoke(ctx, "/core.Admin/MakeUnsignedMultisigTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SubmitMultisigTx(ctx context.Context, in *SubmitMultisigTxRequest, opts ...grpc.CallOption) (*SubmitMultisigTxReply, error) {
	out := new(SubmitMultisigTxReply)
	err := grpc.Invoke(ctx, "/core.Admin/SubmitMultisigTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBitcoinBlockIndex(ctx context.Context, in *GetBitcoinBlockIndexRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetBitcoinBlockIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetBlockTemplate(ctx context.Context, in *GetBlockTemplateRequest, opts ...grpc.CallOption) (*GetBlockTemplateReply, error) {
	out := new(GetBlockTemplateReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetBlockTemplate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSignatureIndex(ctx context.Context, in *GetSignatureIndexRequest, opts ...grpc.CallOption) (*GetSignatureIndexReply, error) {
	out := new(GetSignatureIndexReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetSignatureIndex", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SetDefaultAddress(ctx context.Context, in *SetDefaultAddressRequest, opts ...grpc.CallOption) (*SetDefaultAddressReply, error) {
	out := new(SetDefaultAddressReply)
	err := grpc.Invoke(ctx, "/core.Admin/SetDefaultAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetLastBitcoinBlock(ctx context.Context, in *GetLastBitcoinBlockRequest, opts ...grpc.CallOption) (*GetLastBitcoinBlockReply, error) {
	out := new(GetLastBitcoinBlockReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetLastBitcoinBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProtectedChildren(ctx context.Context, in *GetProtectedChildrenRequest, opts ...grpc.CallOption) (*GetProtectedChildrenReply, error) {
	out := new(GetProtectedChildrenReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetProtectedChildren", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProtectingParents(ctx context.Context, in *GetProtectingParentsRequest, opts ...grpc.CallOption) (*GetProtectingParentsReply, error) {
	out := new(GetProtectingParentsReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetProtectingParents", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetWalletTransactions(ctx context.Context, in *GetWalletTransactionsRequest, opts ...grpc.CallOption) (*GetWalletTransactionsReply, error) {
	out := new(GetWalletTransactionsReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetWalletTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetEndorsementsOfBlock(ctx context.Context, in *GetEndorsementsOfBlockRequest, opts ...grpc.CallOption) (*GetEndorsementsOfBlockReply, error) {
	out := new(GetEndorsementsOfBlockReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetEndorsementsOfBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPendingTransactions(ctx context.Context, in *GetPendingTransactionsRequest, opts ...grpc.CallOption) (*GetPendingTransactionsReply, error) {
	out := new(GetPendingTransactionsReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetPendingTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetPoPEndorsementsInfo(ctx context.Context, in *GetPoPEndorsementsInfoRequest, opts ...grpc.CallOption) (*GetPoPEndorsementsInfoReply, error) {
	out := new(GetPoPEndorsementsInfoReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetPoPEndorsementsInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/core.Admin/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetStateInfo(ctx context.Context, in *GetStateInfoRequest, opts ...grpc.CallOption) (*GetStateInfoReply, error) {
	out := new(GetStateInfoReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetStateInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetLastBlock(ctx context.Context, in *GetLastBlockRequest, opts ...grpc.CallOption) (*GetLastBlockReply, error) {
	out := new(GetLastBlockReply)
	err := grpc.Invoke(ctx, "/core.Admin/GetLastBlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ListBlocksSince(ctx context.Context, in *ListBlocksSinceRequest, opts ...grpc.CallOption) (*ListBlocksSinceReply, error) {
	out := new(ListBlocksSinceReply)
	err := grpc.Invoke(ctx, "/core.Admin/ListBlocksSince", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) TroubleshootPoPTransactions(ctx context.Context, in *TroubleshootPoPTransactionsRequest, opts ...grpc.CallOption) (*TroubleshootPoPTransactionsReply, error) {
	out := new(TroubleshootPoPTransactionsReply)
	err := grpc.Invoke(ctx, "/core.Admin/TroubleshootPoPTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) StopNodeCore(ctx context.Context, in *StopNodeCoreRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/StopNodeCore", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) RefreshWalletCache(ctx context.Context, in *RefreshWalletCacheRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/RefreshWalletCache", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) EncryptWallet(ctx context.Context, in *EncryptWalletRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/EncryptWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DecryptWallet(ctx context.Context, in *DecryptWalletRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/DecryptWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UnlockWallet(ctx context.Context, in *UnlockWalletRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/UnlockWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LockWallet(ctx context.Context, in *LockWalletRequest, opts ...grpc.CallOption) (*ProtocolReply, error) {
	out := new(ProtocolReply)
	err := grpc.Invoke(ctx, "/core.Admin/LockWallet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Admin service

type AdminServer interface {
	GetPop(context.Context, *GetPopRequest) (*GetPopReply, error)
	AddNode(context.Context, *NodeRequest) (*ProtocolReply, error)
	SetBan(context.Context, *SetBanRequest) (*ProtocolReply, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoReply, error)
	GetDiagnosticInfo(context.Context, *GetDiagnosticInfoRequest) (*GetDiagnosticInfoReply, error)
	RemoveNode(context.Context, *NodeRequest) (*ProtocolReply, error)
	StopPool(context.Context, *StopPoolRequest) (*StopPoolReply, error)
	SubmitPop(context.Context, *SubmitPopRequest) (*ProtocolReply, error)
	SendCoins(context.Context, *SendCoinsRequest) (*SendCoinsReply, error)
	SendAltChainEndorsement(context.Context, *SendAltChainEndorsementRequest) (*SendAltChainEndorsementReply, error)
	GetBlocks(context.Context, *GetBlocksRequest) (*GetBlocksReply, error)
	StartPool(context.Context, *StartPoolRequest) (*StartPoolReply, error)
	RestartPoolWebServer(context.Context, *RestartPoolWebServerRequest) (*RestartPoolWebServerReply, error)
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryReply, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error)
	SetAllowed(context.Context, *SetAllowedRequest) (*ProtocolReply, error)
	ListBanned(context.Context, *ListBannedRequest) (*ListBannedReply, error)
	ListBannedMiners(context.Context, *ListBannedMinersRequest) (*ListBannedMinersReply, error)
	ClearBanned(context.Context, *ClearBannedRequest) (*ProtocolReply, error)
	ClearBannedMiners(context.Context, *ClearBannedMinersRequest) (*ProtocolReply, error)
	SubmitBlocks(context.Context, *SubmitBlocksRequest) (*ProtocolReply, error)
	ClearAllowed(context.Context, *ClearAllowedRequest) (*ProtocolReply, error)
	GetPeerInfo(context.Context, *GetPeerInfoRequest) (*GetPeerInfoReply, error)
	SignMessage(context.Context, *SignMessageRequest) (*SignMessageReply, error)
	ListAllowed(context.Context, *ListAllowedRequest) (*ListAllowedReply, error)
	BackupWallet(context.Context, *BackupWalletRequest) (*BackupWalletReply, error)
	ImportWallet(context.Context, *ImportWalletRequest) (*ImportWalletReply, error)
	GetNewAddress(context.Context, *GetNewAddressRequest) (*GetNewAddressReply, error)
	GetBlockTimes(context.Context, *GetBlockTimesRequest) (*GetBlockTimesReply, error)
	StartSoloPool(context.Context, *StartSoloPoolRequest) (*StartSoloPoolReply, error)
	GetBlockchains(context.Context, *GetBlockchainsRequest) (*GetBlockchainsReply, error)
	SetTransactionFee(context.Context, *SetTransactionFeeRequest) (*ProtocolReply, error)
	DumpPrivateKey(context.Context, *DumpPrivateKeyRequest) (*DumpPrivateKeyReply, error)
	ImportPrivateKey(context.Context, *ImportPrivateKeyRequest) (*ImportPrivateKeyReply, error)
	SubmitTransactions(context.Context, *SubmitTransactionsRequest) (*ProtocolReply, error)
	GetTransactions(context.Context, *GetTransactionsRequest) (*GetTransactionsReply, error)
	ValidateAddress(context.Context, *ValidateAddressRequest) (*ValidateAddressReply, error)
	GenerateMultisigAddress(context.Context, *GenerateMultisigAddressRequest) (*GenerateMultisigAddressReply, error)
	MakeUnsignedMultisigTx(context.Context, *MakeUnsignedMultisigTxRequest) (*MakeUnsignedMultisigTxReply, error)
	SubmitMultisigTx(context.Context, *SubmitMultisigTxRequest) (*SubmitMultisigTxReply, error)
	GetBitcoinBlockIndex(context.Context, *GetBitcoinBlockIndexRequest) (*ProtocolReply, error)
	GetBlockTemplate(context.Context, *GetBlockTemplateRequest) (*GetBlockTemplateReply, error)
	GetSignatureIndex(context.Context, *GetSignatureIndexRequest) (*GetSignatureIndexReply, error)
	SetDefaultAddress(context.Context, *SetDefaultAddressRequest) (*SetDefaultAddressReply, error)
	GetLastBitcoinBlock(context.Context, *GetLastBitcoinBlockRequest) (*GetLastBitcoinBlockReply, error)
	GetProtectedChildren(context.Context, *GetProtectedChildrenRequest) (*GetProtectedChildrenReply, error)
	GetProtectingParents(context.Context, *GetProtectingParentsRequest) (*GetProtectingParentsReply, error)
	GetWalletTransactions(context.Context, *GetWalletTransactionsRequest) (*GetWalletTransactionsReply, error)
	GetEndorsementsOfBlock(context.Context, *GetEndorsementsOfBlockRequest) (*GetEndorsementsOfBlockReply, error)
	GetPendingTransactions(context.Context, *GetPendingTransactionsRequest) (*GetPendingTransactionsReply, error)
	GetPoPEndorsementsInfo(context.Context, *GetPoPEndorsementsInfoRequest) (*GetPoPEndorsementsInfoReply, error)
	Ping(context.Context, *PingRequest) (*PingReply, error)
	GetStateInfo(context.Context, *GetStateInfoRequest) (*GetStateInfoReply, error)
	GetLastBlock(context.Context, *GetLastBlockRequest) (*GetLastBlockReply, error)
	ListBlocksSince(context.Context, *ListBlocksSinceRequest) (*ListBlocksSinceReply, error)
	TroubleshootPoPTransactions(context.Context, *TroubleshootPoPTransactionsRequest) (*TroubleshootPoPTransactionsReply, error)
	StopNodeCore(context.Context, *StopNodeCoreRequest) (*ProtocolReply, error)
	RefreshWalletCache(context.Context, *RefreshWalletCacheRequest) (*ProtocolReply, error)
	EncryptWallet(context.Context, *EncryptWalletRequest) (*ProtocolReply, error)
	DecryptWallet(context.Context, *DecryptWalletRequest) (*ProtocolReply, error)
	UnlockWallet(context.Context, *UnlockWalletRequest) (*ProtocolReply, error)
	LockWallet(context.Context, *LockWalletRequest) (*ProtocolReply, error)
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_GetPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPop(ctx, req.(*GetPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).AddNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetBan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetBan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SetBan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetBan(ctx, req.(*SetBanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDiagnosticInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiagnosticInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDiagnosticInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetDiagnosticInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDiagnosticInfo(ctx, req.(*GetDiagnosticInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RemoveNode(ctx, req.(*NodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StopPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StopPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/StopPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StopPool(ctx, req.(*StopPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SubmitPop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitPopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SubmitPop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SubmitPop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SubmitPop(ctx, req.(*SubmitPopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SendCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendCoins(ctx, req.(*SendCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendAltChainEndorsement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAltChainEndorsementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendAltChainEndorsement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SendAltChainEndorsement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendAltChainEndorsement(ctx, req.(*SendAltChainEndorsementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetBlocks(ctx, req.(*GetBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StartPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StartPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/StartPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StartPool(ctx, req.(*StartPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RestartPoolWebServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartPoolWebServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RestartPoolWebServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/RestartPoolWebServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RestartPoolWebServer(ctx, req.(*RestartPoolWebServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SetAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetAllowed(ctx, req.(*SetAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBannedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ListBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListBanned(ctx, req.(*ListBannedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListBannedMiners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBannedMinersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListBannedMiners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ListBannedMiners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListBannedMiners(ctx, req.(*ListBannedMinersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ClearBanned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearBannedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ClearBanned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ClearBanned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ClearBanned(ctx, req.(*ClearBannedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ClearBannedMiners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearBannedMinersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ClearBannedMiners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ClearBannedMiners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ClearBannedMiners(ctx, req.(*ClearBannedMinersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SubmitBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SubmitBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SubmitBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SubmitBlocks(ctx, req.(*SubmitBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ClearAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ClearAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ClearAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ClearAllowed(ctx, req.(*ClearAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPeerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPeerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetPeerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPeerInfo(ctx, req.(*GetPeerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SignMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllowedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ListAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListAllowed(ctx, req.(*ListAllowedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_BackupWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).BackupWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/BackupWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).BackupWallet(ctx, req.(*BackupWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ImportWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ImportWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ImportWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ImportWallet(ctx, req.(*ImportWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetNewAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNewAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetNewAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetNewAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetNewAddress(ctx, req.(*GetNewAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetBlockTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockTimesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetBlockTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetBlockTimes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetBlockTimes(ctx, req.(*GetBlockTimesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StartSoloPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartSoloPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StartSoloPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/StartSoloPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StartSoloPool(ctx, req.(*StartSoloPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetBlockchains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockchainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetBlockchains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetBlockchains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetBlockchains(ctx, req.(*GetBlockchainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetTransactionFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTransactionFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetTransactionFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SetTransactionFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetTransactionFee(ctx, req.(*SetTransactionFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DumpPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DumpPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/DumpPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DumpPrivateKey(ctx, req.(*DumpPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ImportPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ImportPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ImportPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ImportPrivateKey(ctx, req.(*ImportPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SubmitTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SubmitTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SubmitTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SubmitTransactions(ctx, req.(*SubmitTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetTransactions(ctx, req.(*GetTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ValidateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ValidateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ValidateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ValidateAddress(ctx, req.(*ValidateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GenerateMultisigAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMultisigAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GenerateMultisigAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GenerateMultisigAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GenerateMultisigAddress(ctx, req.(*GenerateMultisigAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_MakeUnsignedMultisigTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeUnsignedMultisigTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).MakeUnsignedMultisigTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/MakeUnsignedMultisigTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).MakeUnsignedMultisigTx(ctx, req.(*MakeUnsignedMultisigTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SubmitMultisigTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitMultisigTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SubmitMultisigTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SubmitMultisigTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SubmitMultisigTx(ctx, req.(*SubmitMultisigTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetBitcoinBlockIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBitcoinBlockIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetBitcoinBlockIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetBitcoinBlockIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetBitcoinBlockIndex(ctx, req.(*GetBitcoinBlockIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetBlockTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetBlockTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetBlockTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetBlockTemplate(ctx, req.(*GetBlockTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSignatureIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignatureIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSignatureIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetSignatureIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSignatureIndex(ctx, req.(*GetSignatureIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SetDefaultAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SetDefaultAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/SetDefaultAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SetDefaultAddress(ctx, req.(*SetDefaultAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetLastBitcoinBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastBitcoinBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetLastBitcoinBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetLastBitcoinBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetLastBitcoinBlock(ctx, req.(*GetLastBitcoinBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProtectedChildren_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtectedChildrenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProtectedChildren(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetProtectedChildren",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProtectedChildren(ctx, req.(*GetProtectedChildrenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProtectingParents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProtectingParentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProtectingParents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetProtectingParents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProtectingParents(ctx, req.(*GetProtectingParentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetWalletTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWalletTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetWalletTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetWalletTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetWalletTransactions(ctx, req.(*GetWalletTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetEndorsementsOfBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEndorsementsOfBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetEndorsementsOfBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetEndorsementsOfBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetEndorsementsOfBlock(ctx, req.(*GetEndorsementsOfBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPendingTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetPendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPendingTransactions(ctx, req.(*GetPendingTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetPoPEndorsementsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoPEndorsementsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetPoPEndorsementsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetPoPEndorsementsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetPoPEndorsementsInfo(ctx, req.(*GetPoPEndorsementsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetStateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetStateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetStateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetStateInfo(ctx, req.(*GetStateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetLastBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetLastBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/GetLastBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetLastBlock(ctx, req.(*GetLastBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ListBlocksSince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlocksSinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ListBlocksSince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/ListBlocksSince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ListBlocksSince(ctx, req.(*ListBlocksSinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_TroubleshootPoPTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TroubleshootPoPTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).TroubleshootPoPTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/TroubleshootPoPTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).TroubleshootPoPTransactions(ctx, req.(*TroubleshootPoPTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_StopNodeCore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNodeCoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).StopNodeCore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/StopNodeCore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).StopNodeCore(ctx, req.(*StopNodeCoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_RefreshWalletCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshWalletCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).RefreshWalletCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/RefreshWalletCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).RefreshWalletCache(ctx, req.(*RefreshWalletCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_EncryptWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncryptWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).EncryptWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/EncryptWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).EncryptWallet(ctx, req.(*EncryptWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DecryptWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecryptWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DecryptWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/DecryptWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DecryptWallet(ctx, req.(*DecryptWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UnlockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UnlockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/UnlockWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UnlockWallet(ctx, req.(*UnlockWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LockWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LockWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.Admin/LockWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LockWallet(ctx, req.(*LockWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPop",
			Handler:    _Admin_GetPop_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _Admin_AddNode_Handler,
		},
		{
			MethodName: "SetBan",
			Handler:    _Admin_SetBan_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Admin_GetInfo_Handler,
		},
		{
			MethodName: "GetDiagnosticInfo",
			Handler:    _Admin_GetDiagnosticInfo_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _Admin_RemoveNode_Handler,
		},
		{
			MethodName: "StopPool",
			Handler:    _Admin_StopPool_Handler,
		},
		{
			MethodName: "SubmitPop",
			Handler:    _Admin_SubmitPop_Handler,
		},
		{
			MethodName: "SendCoins",
			Handler:    _Admin_SendCoins_Handler,
		},
		{
			MethodName: "SendAltChainEndorsement",
			Handler:    _Admin_SendAltChainEndorsement_Handler,
		},
		{
			MethodName: "GetBlocks",
			Handler:    _Admin_GetBlocks_Handler,
		},
		{
			MethodName: "StartPool",
			Handler:    _Admin_StartPool_Handler,
		},
		{
			MethodName: "RestartPoolWebServer",
			Handler:    _Admin_RestartPoolWebServer_Handler,
		},
		{
			MethodName: "GetHistory",
			Handler:    _Admin_GetHistory_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _Admin_GetBalance_Handler,
		},
		{
			MethodName: "SetAllowed",
			Handler:    _Admin_SetAllowed_Handler,
		},
		{
			MethodName: "ListBanned",
			Handler:    _Admin_ListBanned_Handler,
		},
		{
			MethodName: "ListBannedMiners",
			Handler:    _Admin_ListBannedMiners_Handler,
		},
		{
			MethodName: "ClearBanned",
			Handler:    _Admin_ClearBanned_Handler,
		},
		{
			MethodName: "ClearBannedMiners",
			Handler:    _Admin_ClearBannedMiners_Handler,
		},
		{
			MethodName: "SubmitBlocks",
			Handler:    _Admin_SubmitBlocks_Handler,
		},
		{
			MethodName: "ClearAllowed",
			Handler:    _Admin_ClearAllowed_Handler,
		},
		{
			MethodName: "GetPeerInfo",
			Handler:    _Admin_GetPeerInfo_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _Admin_SignMessage_Handler,
		},
		{
			MethodName: "ListAllowed",
			Handler:    _Admin_ListAllowed_Handler,
		},
		{
			MethodName: "BackupWallet",
			Handler:    _Admin_BackupWallet_Handler,
		},
		{
			MethodName: "ImportWallet",
			Handler:    _Admin_ImportWallet_Handler,
		},
		{
			MethodName: "GetNewAddress",
			Handler:    _Admin_GetNewAddress_Handler,
		},
		{
			MethodName: "GetBlockTimes",
			Handler:    _Admin_GetBlockTimes_Handler,
		},
		{
			MethodName: "StartSoloPool",
			Handler:    _Admin_StartSoloPool_Handler,
		},
		{
			MethodName: "GetBlockchains",
			Handler:    _Admin_GetBlockchains_Handler,
		},
		{
			MethodName: "SetTransactionFee",
			Handler:    _Admin_SetTransactionFee_Handler,
		},
		{
			MethodName: "DumpPrivateKey",
			Handler:    _Admin_DumpPrivateKey_Handler,
		},
		{
			MethodName: "ImportPrivateKey",
			Handler:    _Admin_ImportPrivateKey_Handler,
		},
		{
			MethodName: "SubmitTransactions",
			Handler:    _Admin_SubmitTransactions_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Admin_GetTransactions_Handler,
		},
		{
			MethodName: "ValidateAddress",
			Handler:    _Admin_ValidateAddress_Handler,
		},
		{
			MethodName: "GenerateMultisigAddress",
			Handler:    _Admin_GenerateMultisigAddress_Handler,
		},
		{
			MethodName: "MakeUnsignedMultisigTx",
			Handler:    _Admin_MakeUnsignedMultisigTx_Handler,
		},
		{
			MethodName: "SubmitMultisigTx",
			Handler:    _Admin_SubmitMultisigTx_Handler,
		},
		{
			MethodName: "GetBitcoinBlockIndex",
			Handler:    _Admin_GetBitcoinBlockIndex_Handler,
		},
		{
			MethodName: "GetBlockTemplate",
			Handler:    _Admin_GetBlockTemplate_Handler,
		},
		{
			MethodName: "GetSignatureIndex",
			Handler:    _Admin_GetSignatureIndex_Handler,
		},
		{
			MethodName: "SetDefaultAddress",
			Handler:    _Admin_SetDefaultAddress_Handler,
		},
		{
			MethodName: "GetLastBitcoinBlock",
			Handler:    _Admin_GetLastBitcoinBlock_Handler,
		},
		{
			MethodName: "GetProtectedChildren",
			Handler:    _Admin_GetProtectedChildren_Handler,
		},
		{
			MethodName: "GetProtectingParents",
			Handler:    _Admin_GetProtectingParents_Handler,
		},
		{
			MethodName: "GetWalletTransactions",
			Handler:    _Admin_GetWalletTransactions_Handler,
		},
		{
			MethodName: "GetEndorsementsOfBlock",
			Handler:    _Admin_GetEndorsementsOfBlock_Handler,
		},
		{
			MethodName: "GetPendingTransactions",
			Handler:    _Admin_GetPendingTransactions_Handler,
		},
		{
			MethodName: "GetPoPEndorsementsInfo",
			Handler:    _Admin_GetPoPEndorsementsInfo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Admin_Ping_Handler,
		},
		{
			MethodName: "GetStateInfo",
			Handler:    _Admin_GetStateInfo_Handler,
		},
		{
			MethodName: "GetLastBlock",
			Handler:    _Admin_GetLastBlock_Handler,
		},
		{
			MethodName: "ListBlocksSince",
			Handler:    _Admin_ListBlocksSince_Handler,
		},
		{
			MethodName: "TroubleshootPoPTransactions",
			Handler:    _Admin_TroubleshootPoPTransactions_Handler,
		},
		{
			MethodName: "StopNodeCore",
			Handler:    _Admin_StopNodeCore_Handler,
		},
		{
			MethodName: "RefreshWalletCache",
			Handler:    _Admin_RefreshWalletCache_Handler,
		},
		{
			MethodName: "EncryptWallet",
			Handler:    _Admin_EncryptWallet_Handler,
		},
		{
			MethodName: "DecryptWallet",
			Handler:    _Admin_DecryptWallet_Handler,
		},
		{
			MethodName: "UnlockWallet",
			Handler:    _Admin_UnlockWallet_Handler,
		},
		{
			MethodName: "LockWallet",
			Handler:    _Admin_LockWallet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "veriblock.proto",
}

func init() { proto.RegisterFile("veriblock.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 9209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x7d, 0x4b, 0x6c, 0x1c, 0xd7,
	0x96, 0x58, 0x7f, 0x49, 0xf6, 0xe9, 0xff, 0x65, 0xf3, 0xd7, 0xb4, 0x2c, 0xb9, 0xec, 0x67, 0xcb,
	0xb2, 0xad, 0x27, 0xd3, 0x3f, 0x59, 0xf6, 0xf3, 0xa4, 0x49, 0xb6, 0x44, 0x5a, 0x14, 0x49, 0x57,
	0x53, 0x72, 0x9e, 0x93, 0x99, 0x4a, 0xb1, 0xfb, 0x92, 0xac, 0xa8, 0xbb, 0xaa, 0x5c, 0x55, 0x2d,
	0x8a, 0x2f, 0x99, 0x60, 0xde, 0x4b, 0x30, 0xc9, 0x26, 0x83, 0x7c, 0x06, 0x13, 0x60, 0x66, 0x17,
	0x64, 0x93, 0xc5, 0xcc, 0x43, 0x10, 0x64, 0x31, 0x41, 0x80, 0x59, 0x0d, 0x82, 0x6c, 0x02, 0x04,
	0x41, 0x80, 0x2c, 0xb3, 0x0a, 0x1e, 0x10, 0x20, 0x98, 0x6d, 0x76, 0xc1, 0xfd, 0x55, 0xdd, 0x5b,
	0x9f, 0x16, 0x65, 0xd3, 0xc9, 0x43, 0x32, 0xbb, 0xae, 0x73, 0xcf, 0x3d, 0xf7, 0x7f, 0xee, 0xf9,
	0xde, 0x86, 0xe6, 0x33, 0xec, 0x59, 0xc7, 0x63, 0x67, 0xf8, 0xf4, 0xb6, 0xeb, 0x39, 0x81, 0x83,
	0x4a, 0x43, 0xc7, 0xc3, 0xda, 0x3d, 0x98, 0x3b, 0x98, 0x06, 0xee, 0x34, 0x40, 0xab, 0x30, 0x6f,
	0x8e, 0x46, 0x1e, 0xf6, 0xfd, 0xd5, 0xfc, 0x8d, 0xfc, 0xcd, 0x9a, 0x2e, 0x3e, 0xd1, 0x32, 0xcc,
	0x99, 0x13, 0x67, 0x6a, 0x07, 0xab, 0x85, 0x1b, 0xf9, 0x9b, 0x45, 0x9d, 0x7f, 0x69, 0x03, 0x98,
	0x3b, 0x34, 0x4f, 0x2d, 0xfb, 0x14, 0x5d, 0x87, 0xaa, 0x6b, 0x9e, 0x62, 0xc3, 0x9e, 0x4e, 0x8e,
	0xb1, 0x47, 0xeb, 0x97, 0x75, 0x20, 0xa0, 0x7d, 0x0a, 0x41, 0x37, 0xa1, 0xe5, 0x61, 0x7f, 0x3a,
	0x0e, 0x7c, 0xc3, 0xc5, 0x9e, 0x41, 0x4a, 0x28, 0xb1, 0xb2, 0xde, 0xe0, 0xf0, 0x43, 0xec, 0x1d,
	0x9a, 0xa7, 0x58, 0xfb, 0x9d, 0x02, 0xd4, 0xf7, 0xa7, 0x13, 0xec, 0x59, 0xc3, 0xfb, 0xd6, 0x38,
	0xc0, 0x1e, 0xba, 0x0b, 0x0b, 0x8e, 0x8b, 0x3d, 0x33, 0x70, 0x18, 0xe5, 0xc6, 0xc6, 0x2b, 0xb7,
	0x49, 0xdf, 0x6f, 0x2b, 0x68, 0xb7, 0x0f, 0x38, 0x8e, 0x1e, 0x62, 0xa3, 0x0e, 0x94, 0x9f, 0x99,
	0xe3, 0x29, 0x6b, 0x0a, 0xe9, 0xec, 0x03, 0xbd, 0x05, 0x4d, 0x1f, 0x0f, 0x1d, 0x7b, 0x64, 0x7a,
	0x17, 0x06, 0x2b, 0x2f, 0xd2, 0xf2, 0x46, 0x08, 0x7e, 0x42, 0xa0, 0xda, 0x33, 0x58, 0x10, 0x44,
	0x51, 0x05, 0xca, 0xfd, 0xaf, 0x1e, 0xf7, 0xf6, 0x5a, 0x39, 0x54, 0x87, 0xca, 0x5e, 0x7f, 0x30,
	0x30, 0x8e, 0x76, 0x7a, 0xfb, 0xad, 0x3c, 0x5a, 0x06, 0x14, 0x7e, 0x1a, 0x07, 0xba, 0xc1, 0xd0,
	0x0a, 0xa8, 0x05, 0xb5, 0x07, 0x7a, 0xbf, 0x77, 0xd4, 0xd7, 0x19, 0x66, 0x11, 0xad, 0xc1, 0x92,
	0x0c, 0x89, 0x90, 0x4b, 0xa8, 0x0a, 0xf3, 0x9b, 0xfd, 0xa3, 0xaf, 0xfb, 0xfd, 0xfd, 0x56, 0x59,
	0xbb, 0x0b, 0x0b, 0x7d, 0x7b, 0xe4, 0x3a, 0x96, 0x9d, 0x58, 0x95, 0x4a, 0xb4, 0x2a, 0x08, 0x4a,
	0xae, 0xe3, 0x05, 0x7c, 0x1a, 0xe9, 0x6f, 0xed, 0xf7, 0xf2, 0x50, 0x7b, 0x34, 0x1d, 0x07, 0x96,
	0x6f, 0x9d, 0x0e, 0xc6, 0x4e, 0x80, 0x5e, 0x81, 0x8a, 0xeb, 0xb8, 0xd3, 0xb1, 0x19, 0xe0, 0x11,
	0x25, 0xb0, 0xa0, 0x47, 0x00, 0x52, 0xea, 0x5b, 0xa7, 0xb6, 0x19, 0x4c, 0x3d, 0x36, 0x47, 0x35,
	0x3d, 0x02, 0xa0, 0x6b, 0x00, 0xee, 0xf4, 0x78, 0x6c, 0x0d, 0x8d, 0xa7, 0xf8, 0x82, 0x4e, 0x51,
	0x4d, 0xaf, 0x30, 0xc8, 0x43, 0x7c, 0x81, 0x5e, 0x87, 0xba, 0x73, 0x6e, 0x63, 0xcf, 0x10, 0xfd,
	0x2b, 0x51, 0x8c, 0x1a, 0x05, 0xf6, 0x18, 0x4c, 0xbb, 0x07, 0x0d, 0xd1, 0x9f, 0xcd, 0xa9, 0x3d,
	0x1a, 0x63, 0x74, 0x13, 0xca, 0xfe, 0xd8, 0x09, 0xc8, 0x70, 0x8a, 0x37, 0xab, 0x1b, 0x88, 0x2d,
	0xa5, 0xdc, 0x69, 0x9d, 0x21, 0x68, 0x7f, 0x92, 0x87, 0xf6, 0xc0, 0x3a, 0xb5, 0xf1, 0xe8, 0xc8,
	0x33, 0x6d, 0xdf, 0x1c, 0x06, 0x96, 0x63, 0xab, 0x7d, 0xce, 0xcf, 0xee, 0x73, 0x21, 0xde, 0x67,
	0xb2, 0xf4, 0x02, 0xd7, 0xb0, 0xec, 0x11, 0x7e, 0x4e, 0xc7, 0x55, 0xd4, 0x1b, 0x21, 0x78, 0x97,
	0x40, 0xd1, 0x07, 0x50, 0x0d, 0xa2, 0x46, 0xe9, 0xd0, 0xaa, 0x1b, 0x6d, 0xd6, 0x57, 0xa9, 0x37,
	0xba, 0x8c, 0xa5, 0xfd, 0xdb, 0x3c, 0xac, 0xb1, 0x0e, 0x8b, 0xe1, 0xc8, 0x1d, 0xff, 0x0d, 0x68,
	0x45, 0x6d, 0x1f, 0xd3, 0xc9, 0xa0, 0xfd, 0xaf, 0x6e, 0x74, 0xd4, 0x39, 0x60, 0x13, 0xa5, 0x47,
	0x3d, 0xe5, 0x33, 0x17, 0xeb, 0x53, 0xe1, 0x32, 0x7d, 0xba, 0xf4, 0x88, 0xb5, 0xff, 0x5c, 0x80,
	0xc5, 0x2d, 0xc7, 0xb2, 0x8f, 0x4d, 0x1f, 0xcb, 0xdd, 0xbe, 0x0d, 0x8b, 0xae, 0x73, 0x6e, 0x0c,
	0x79, 0x91, 0xc1, 0x39, 0x41, 0x9e, 0x12, 0x69, 0xbb, 0xce, 0xb9, 0xa8, 0xd4, 0xa3, 0x05, 0x0c,
	0xdf, 0x4d, 0xe0, 0x17, 0x04, 0xbe, 0x1b, 0xc3, 0xd7, 0xa0, 0x4e, 0xe8, 0x9f, 0x60, 0x6c, 0xf8,
	0x67, 0xa6, 0x87, 0x79, 0xf7, 0xaa, 0xae, 0x73, 0x7e, 0x1f, 0xe3, 0x01, 0x01, 0x31, 0x1c, 0x57,
	0xc2, 0x29, 0x09, 0x1c, 0x37, 0xc4, 0x79, 0x0f, 0x48, 0x15, 0xc3, 0xa1, 0xcc, 0xcc, 0x5f, 0x2d,
	0xd3, 0xdd, 0x55, 0x63, 0xb3, 0xc3, 0x38, 0x9c, 0x0e, 0xae, 0x73, 0xce, 0x7e, 0xfa, 0x0c, 0xdd,
	0x0d, 0xd1, 0xe7, 0xd2, 0xd1, 0x5d, 0x81, 0xfe, 0x1a, 0xd4, 0x28, 0xef, 0x34, 0xce, 0xb0, 0x75,
	0x7a, 0x16, 0xac, 0xce, 0xd3, 0x43, 0x57, 0xa5, 0xb0, 0x1d, 0x0a, 0x42, 0x8b, 0x50, 0x0e, 0x9e,
	0x1b, 0xd6, 0x68, 0x75, 0x81, 0xee, 0xba, 0x52, 0xf0, 0x7c, 0x77, 0xa4, 0xbd, 0x0b, 0x68, 0xd3,
	0x0a, 0xc8, 0x64, 0x6c, 0x32, 0x54, 0x73, 0x84, 0x3d, 0xc2, 0x50, 0xcf, 0xe8, 0x2f, 0xbe, 0x81,
	0xf9, 0x97, 0xf6, 0x87, 0x25, 0x40, 0x87, 0xce, 0x61, 0xdf, 0x1e, 0x39, 0x9e, 0x8f, 0x27, 0xd8,
	0x0e, 0x76, 0xed, 0x13, 0x87, 0x9c, 0xb4, 0x89, 0x25, 0x9f, 0x34, 0x56, 0xab, 0x46, 0x81, 0xfc,
	0xa4, 0xa1, 0x1e, 0x5c, 0xc3, 0xac, 0xde, 0xc8, 0x08, 0x59, 0xbd, 0xc1, 0x3b, 0x6d, 0xfa, 0x67,
	0xfc, 0x30, 0x74, 0x05, 0xd2, 0x13, 0x81, 0xc3, 0x3a, 0x66, 0xfa, 0x67, 0x68, 0x07, 0x5e, 0x1b,
	0x3a, 0x76, 0x60, 0x5a, 0x36, 0x1e, 0x19, 0x96, 0x9d, 0x4e, 0x86, 0xf1, 0x81, 0x6b, 0x21, 0xe2,
	0xae, 0x9d, 0x42, 0xe9, 0x4d, 0xe9, 0xba, 0x31, 0xd8, 0xac, 0x30, 0xee, 0x50, 0x0f, 0xc1, 0x47,
	0xcf, 0x77, 0x47, 0xe8, 0xc7, 0xb0, 0x78, 0xcc, 0xa6, 0xc7, 0x90, 0xb7, 0x76, 0x99, 0xe2, 0x22,
	0x5e, 0x24, 0xef, 0x46, 0x0d, 0xea, 0x61, 0x05, 0x4a, 0x76, 0x8e, 0xa2, 0x56, 0x05, 0x2a, 0x21,
	0x7a, 0x07, 0x3a, 0x02, 0x47, 0xac, 0x19, 0x9d, 0xeb, 0x79, 0x85, 0xaa, 0xbc, 0x1e, 0x9f, 0xc2,
	0x5a, 0x5a, 0x0d, 0x36, 0x60, 0xb6, 0x9c, 0xcb, 0xc9, 0x6a, 0x74, 0xa4, 0xcb, 0x30, 0xe7, 0xe1,
	0x73, 0xd3, 0x1b, 0xad, 0x56, 0xd8, 0xdd, 0xc8, 0xbe, 0x08, 0x9b, 0x3a, 0xb1, 0x6c, 0x73, 0x6c,
	0xfd, 0x0c, 0x8f, 0x56, 0x81, 0x31, 0xde, 0x10, 0x80, 0x36, 0x60, 0x29, 0x5c, 0x2c, 0xd6, 0x22,
	0xbf, 0x39, 0xab, 0x74, 0x5f, 0x2d, 0x8a, 0x42, 0xda, 0x1a, 0xbb, 0x42, 0xb5, 0xcf, 0xa1, 0x39,
	0x08, 0x4c, 0x72, 0x3d, 0x8d, 0xc4, 0x9a, 0xbf, 0x0d, 0x2d, 0x9f, 0x83, 0x62, 0x7b, 0xa3, 0xe9,
	0xab, 0xa8, 0xda, 0x5f, 0xe4, 0x41, 0x3b, 0xf2, 0x9c, 0xe9, 0xf1, 0x18, 0xfb, 0x67, 0x8e, 0x13,
	0x1c, 0x3a, 0x87, 0xd2, 0xbc, 0xfa, 0x3a, 0xfe, 0x76, 0x8a, 0xfd, 0x80, 0x32, 0x75, 0x7b, 0x7c,
	0x61, 0x9c, 0x98, 0xd6, 0x78, 0xea, 0x61, 0x9f, 0xdf, 0x19, 0x35, 0x02, 0xbc, 0xcf, 0x61, 0x04,
	0xc9, 0xc7, 0xa6, 0x37, 0x3c, 0x33, 0xc6, 0xd8, 0x3e, 0x0d, 0xce, 0xf8, 0x15, 0x54, 0x63, 0xc0,
	0x3d, 0x0a, 0x43, 0x77, 0xa0, 0xc2, 0xbb, 0x84, 0x7d, 0xba, 0x69, 0xaa, 0x1b, 0x2d, 0x76, 0xbc,
	0x78, 0x97, 0x06, 0x38, 0xd8, 0xc9, 0xe9, 0x11, 0x12, 0xba, 0x07, 0x35, 0x69, 0x13, 0xf8, 0x9c,
	0xe9, 0x76, 0x12, 0x0c, 0x8e, 0x55, 0x54, 0x70, 0x37, 0x11, 0xb4, 0x78, 0x97, 0x5c, 0xd3, 0x33,
	0x27, 0x66, 0x80, 0x3d, 0xed, 0x16, 0x40, 0xd4, 0x14, 0x59, 0x90, 0xa8, 0x3f, 0xe4, 0xee, 0xa9,
	0x49, 0x6d, 0x6b, 0x6f, 0x42, 0x43, 0x6d, 0x81, 0xc8, 0x0e, 0xc1, 0x73, 0x6b, 0x24, 0x70, 0xd9,
	0x87, 0xf6, 0x6f, 0xf2, 0x70, 0x63, 0xe6, 0x34, 0xba, 0xe3, 0x0b, 0x72, 0x67, 0xfb, 0xd3, 0xe1,
	0x50, 0xac, 0xc6, 0x82, 0x2e, 0x3e, 0xd1, 0x9b, 0x30, 0xcf, 0xc5, 0x9d, 0xd5, 0x82, 0xcc, 0x71,
	0x74, 0x0a, 0xd4, 0x45, 0x21, 0x3a, 0x00, 0xc2, 0x29, 0x0f, 0x3d, 0xe7, 0x78, 0x8c, 0x27, 0x3a,
	0x26, 0x77, 0x3b, 0x99, 0x44, 0x52, 0xe3, 0x35, 0x56, 0x43, 0x6d, 0x58, 0xc1, 0xd4, 0x93, 0x75,
	0xb5, 0x3f, 0x5b, 0x80, 0xf5, 0x19, 0x55, 0x66, 0x08, 0x7f, 0x08, 0x4a, 0x64, 0xe8, 0x9c, 0x7d,
	0xd0, 0xdf, 0xe8, 0x23, 0x58, 0x89, 0x78, 0xcd, 0x71, 0x0a, 0x7b, 0xe8, 0x84, 0x5c, 0xe6, 0x58,
	0xe2, 0x0a, 0x9f, 0xc0, 0x6a, 0x4a, 0x35, 0x76, 0x29, 0x95, 0xe8, 0x16, 0x5a, 0x8a, 0xd7, 0x63,
	0xb7, 0xf1, 0x3d, 0xe8, 0x5a, 0xf6, 0x70, 0x3c, 0x1d, 0x71, 0xbe, 0xa4, 0x36, 0xc9, 0xb8, 0xc5,
	0xb2, 0xc0, 0xd8, 0xb5, 0x95, 0x46, 0x3f, 0x87, 0xf5, 0xf4, 0xba, 0xac, 0xdd, 0x39, 0xda, 0xee,
	0x4a, 0xb2, 0x32, 0x6b, 0xf9, 0x2e, 0xac, 0x91, 0x6b, 0xc2, 0x35, 0x2f, 0x9c, 0x69, 0x10, 0x6f,
	0x98, 0x31, 0x94, 0x25, 0x32, 0xdb, 0xb4, 0x5c, 0x69, 0xf7, 0x1e, 0x74, 0x53, 0x6b, 0xb2, 0x66,
	0x17, 0x68, 0xb3, 0xcb, 0x89, 0xaa, 0xac, 0xd5, 0x6d, 0xb8, 0xe1, 0x9a, 0xd6, 0x88, 0xdc, 0x4e,
	0xa4, 0xcf, 0x69, 0x74, 0x28, 0xbb, 0x59, 0xd0, 0xbb, 0x04, 0xef, 0x60, 0x1a, 0xec, 0xda, 0x87,
	0x71, 0x52, 0xe8, 0x7d, 0x58, 0x8a, 0xd5, 0xe4, 0x77, 0x31, 0x50, 0x4e, 0x85, 0xe4, 0xc6, 0xf9,
	0x65, 0x4c, 0xae, 0xb9, 0x90, 0xbd, 0x5a, 0x23, 0xca, 0x8e, 0x64, 0xee, 0x6a, 0x8d, 0xe2, 0x6b,
	0x71, 0x1c, 0x0c, 0xe5, 0x29, 0xa9, 0xc5, 0xd7, 0x62, 0x33, 0x18, 0x66, 0xae, 0x45, 0x54, 0x97,
	0x4d, 0x4a, 0x3d, 0xbe, 0x16, 0xa2, 0x32, 0x9b, 0x95, 0x3e, 0xdc, 0x48, 0xdd, 0x3e, 0xc6, 0xc4,
	0xb4, 0x6c, 0x63, 0x78, 0x66, 0x5a, 0xf6, 0x6a, 0x83, 0xce, 0xca, 0x7a, 0x72, 0x1b, 0x3d, 0x32,
	0x2d, 0x7b, 0x8b, 0xa0, 0xa0, 0x2f, 0xe1, 0xf5, 0xac, 0x0d, 0x21, 0x53, 0x6a, 0x52, 0x4a, 0xd7,
	0xd2, 0x36, 0x46, 0x26, 0x2d, 0x79, 0x40, 0x32, 0xad, 0x56, 0x9c, 0x56, 0x34, 0xb0, 0x88, 0xd6,
	0x53, 0xf8, 0xf0, 0xc4, 0xf2, 0xfc, 0x40, 0xa2, 0xe2, 0x9c, 0x18, 0xf8, 0xdb, 0xa9, 0xf5, 0xcc,
	0x1c, 0x63, 0x3b, 0xa0, 0xdb, 0x00, 0x47, 0xa2, 0x81, 0xcf, 0x67, 0xad, 0x4d, 0x67, 0xed, 0x3d,
	0x5a, 0x57, 0xd0, 0x3d, 0x38, 0xe9, 0x87, 0xf5, 0x0e, 0x1d, 0x57, 0x12, 0x28, 0x7c, 0x36, 0x97,
	0x77, 0xa0, 0x33, 0x9c, 0x7a, 0x1e, 0x21, 0xab, 0xc8, 0x35, 0x88, 0x12, 0x43, 0xbc, 0x6c, 0x33,
	0x12, 0x6f, 0xb4, 0x0b, 0xb8, 0xf6, 0x00, 0x07, 0xaa, 0x74, 0xe2, 0x13, 0xf1, 0x44, 0xba, 0x3a,
	0xd4, 0x5b, 0x21, 0x9f, 0x72, 0x2b, 0x7c, 0x20, 0x73, 0x61, 0xc6, 0x02, 0x97, 0x18, 0x43, 0x8b,
	0xdd, 0x6d, 0x32, 0x73, 0xfe, 0x17, 0x79, 0x58, 0xcf, 0x6a, 0xfb, 0x6a, 0xf8, 0xed, 0x16, 0xb4,
	0xe2, 0xb3, 0xcb, 0xd9, 0xed, 0x6a, 0xc8, 0x6e, 0x63, 0x52, 0x99, 0xde, 0x74, 0xd5, 0x89, 0xd5,
	0x02, 0xd6, 0x4b, 0xcf, 0x09, 0xf0, 0x30, 0xc0, 0xa3, 0xad, 0x33, 0x6b, 0x3c, 0xf2, 0xb0, 0xfd,
	0x52, 0xf3, 0x73, 0x07, 0x3a, 0x33, 0x84, 0x37, 0xf4, 0x2c, 0x21, 0x6a, 0x69, 0xff, 0x3c, 0x0f,
	0x6b, 0xe9, 0xcd, 0xfe, 0xba, 0x4e, 0x8d, 0x65, 0x9f, 0x1e, 0x9a, 0x64, 0x7b, 0xf9, 0xff, 0x47,
	0xa7, 0x46, 0x6e, 0xf6, 0xd7, 0x68, 0x6a, 0xfe, 0xb4, 0x0c, 0x55, 0x59, 0xc2, 0xbd, 0x05, 0xa5,
	0xe0, 0xc2, 0xc5, 0xdc, 0xd2, 0xb1, 0x9c, 0x90, 0x7e, 0x6e, 0x1f, 0x5d, 0xb8, 0x58, 0xa7, 0x38,
	0xe8, 0x47, 0xd0, 0xf0, 0x9d, 0xa9, 0x37, 0xc4, 0xa1, 0xf4, 0xc7, 0x26, 0xa3, 0xce, 0xa0, 0x42,
	0x4c, 0x24, 0xd3, 0xcb, 0xd1, 0xd8, 0x05, 0xc0, 0x54, 0xac, 0x1a, 0xc7, 0x62, 0xac, 0xff, 0x4d,
	0x98, 0x17, 0xca, 0x50, 0x29, 0x45, 0x19, 0x12, 0x85, 0x44, 0xa1, 0x94, 0x24, 0x2f, 0xa2, 0x93,
	0xd1, 0x0b, 0xb8, 0xa8, 0x37, 0x24, 0xf0, 0x7d, 0x8c, 0x89, 0xe0, 0x30, 0x32, 0x03, 0x93, 0xdf,
	0x92, 0xf4, 0x77, 0x96, 0xbc, 0x0f, 0x99, 0xf2, 0x7e, 0x52, 0x50, 0xe6, 0xc2, 0x3c, 0xbb, 0x99,
	0x54, 0x41, 0x99, 0x4b, 0xf3, 0xdf, 0xc0, 0xb5, 0x54, 0x69, 0xde, 0x39, 0x31, 0x5c, 0xcf, 0x71,
	0x4e, 0xe8, 0x25, 0x15, 0xae, 0x51, 0x52, 0x3d, 0xd3, 0xd7, 0x92, 0xb2, 0xfe, 0xc1, 0xc9, 0x21,
	0xa9, 0x8a, 0xae, 0x43, 0x75, 0x82, 0xbd, 0xa7, 0x63, 0x6c, 0xb8, 0x66, 0x70, 0x46, 0x6f, 0xac,
	0x8a, 0x0e, 0x0c, 0x74, 0x68, 0x06, 0x67, 0xe8, 0xaf, 0x01, 0x55, 0x8d, 0xf0, 0xf3, 0xc0, 0x48,
	0xeb, 0x84, 0xbf, 0xda, 0x90, 0x37, 0x48, 0x4a, 0xe3, 0x5d, 0x5e, 0x3d, 0x59, 0xe4, 0x13, 0x19,
	0x36, 0xb0, 0x26, 0xd8, 0x0f, 0xcc, 0x89, 0x4b, 0x2f, 0xa8, 0xb2, 0x1e, 0x01, 0xc8, 0x84, 0xfb,
	0xd6, 0xcf, 0x30, 0xbd, 0x6d, 0xca, 0x3a, 0xfd, 0x1d, 0x29, 0xa5, 0x6d, 0x49, 0x29, 0x7d, 0x00,
	0x25, 0xb2, 0x89, 0x50, 0x13, 0xaa, 0xdf, 0xf4, 0xf5, 0x03, 0xe3, 0xf1, 0xfe, 0xe3, 0x41, 0x7f,
	0xbb, 0x95, 0x43, 0x35, 0x58, 0x18, 0x1c, 0xf5, 0xf6, 0xb7, 0x7b, 0xfa, 0x76, 0x2b, 0x8f, 0x10,
	0x34, 0x0e, 0xf5, 0x83, 0x83, 0xfb, 0xc6, 0xc1, 0x7d, 0x83, 0xfe, 0x68, 0x15, 0x08, 0xc6, 0xa3,
	0xc7, 0x7b, 0x47, 0xbb, 0x83, 0xdd, 0x07, 0xad, 0x22, 0x61, 0xcc, 0x6f, 0x3c, 0xb6, 0xfd, 0x2c,
	0x93, 0xc7, 0xd7, 0x56, 0x70, 0xc6, 0xae, 0x9b, 0x01, 0xbc, 0x32, 0xe5, 0x78, 0xc6, 0x84, 0x23,
	0x1a, 0x41, 0xb4, 0x01, 0xf2, 0x59, 0xb6, 0x8c, 0xee, 0x34, 0x4e, 0x7e, 0xa6, 0x69, 0xa3, 0x90,
	0x6a, 0xda, 0xf8, 0x4f, 0x79, 0x68, 0x49, 0x44, 0x1f, 0xdb, 0xa4, 0xf6, 0x8f, 0x61, 0x41, 0xd0,
	0xce, 0x6c, 0x7e, 0x27, 0xa7, 0x87, 0x48, 0xe8, 0x7d, 0x98, 0xe3, 0xe8, 0xcc, 0xf2, 0xb2, 0xc2,
	0xef, 0xad, 0xb8, 0x85, 0x6a, 0x27, 0xa7, 0x73, 0x44, 0xf4, 0x25, 0xeb, 0xa1, 0x34, 0x68, 0xae,
	0x09, 0x5d, 0x97, 0xeb, 0xa6, 0xcc, 0xdc, 0x4e, 0x8e, 0x0d, 0x22, 0x2a, 0xdc, 0xac, 0x2b, 0xd6,
	0x1f, 0xed, 0x1f, 0x16, 0x60, 0xed, 0xc9, 0xe6, 0xc3, 0xd8, 0x6c, 0x6f, 0xb1, 0xbd, 0x83, 0x3e,
	0x54, 0xb7, 0x29, 0x1b, 0xdf, 0x22, 0x6b, 0xf4, 0xc9, 0xe6, 0xc3, 0x47, 0xe1, 0x7e, 0x55, 0xf6,
	0xee, 0x0e, 0x20, 0xde, 0xdd, 0xa4, 0x9d, 0x69, 0xc6, 0x68, 0xdb, 0x7e, 0xc2, 0x48, 0x67, 0xc2,
	0x7a, 0x62, 0xb5, 0x25, 0x92, 0x97, 0x9e, 0x84, 0xb5, 0xcc, 0xbd, 0x15, 0x9f, 0x8f, 0x00, 0xea,
	0xca, 0xc0, 0x88, 0x62, 0x3e, 0x36, 0x2f, 0xc8, 0x89, 0x63, 0x0a, 0x1c, 0xff, 0x22, 0x27, 0xf8,
	0xd8, 0x09, 0x02, 0x67, 0x62, 0x50, 0xee, 0xc4, 0x18, 0x26, 0x30, 0xd0, 0x36, 0xe1, 0x51, 0xb7,
	0xa0, 0x2d, 0x21, 0x48, 0x36, 0xb3, 0xb2, 0xde, 0x8c, 0xd0, 0xd8, 0xce, 0xfa, 0x79, 0x01, 0x9a,
	0x52, 0xa7, 0x1e, 0xe1, 0xc0, 0x8c, 0x8e, 0x5c, 0x3e, 0x3a, 0x72, 0xb2, 0xfd, 0x88, 0xb2, 0xaf,
	0x02, 0x17, 0xac, 0x25, 0xb6, 0x75, 0x0d, 0xc0, 0x74, 0x5d, 0x6c, 0x7a, 0x44, 0xb0, 0xa3, 0xf7,
	0x08, 0xd1, 0x50, 0x19, 0x64, 0xd7, 0x46, 0x6f, 0x40, 0x7d, 0xe8, 0xd8, 0x27, 0x96, 0x37, 0x31,
	0x23, 0xf5, 0xb8, 0xac, 0xab, 0x40, 0xf4, 0x21, 0xcc, 0xf9, 0x81, 0x19, 0x4c, 0x7d, 0xca, 0x94,
	0x43, 0x4b, 0x79, 0xac, 0x8f, 0x44, 0xd8, 0x0a, 0xa6, 0xbe, 0xce, 0x71, 0xb5, 0xcf, 0x60, 0x8e,
	0x41, 0x50, 0x15, 0xe6, 0x1f, 0xef, 0x3f, 0xdc, 0x3f, 0xf8, 0x7a, 0xbf, 0x95, 0x23, 0x1f, 0x87,
	0xfd, 0xfd, 0xed, 0xdd, 0xfd, 0x07, 0xad, 0x3c, 0xaa, 0x43, 0x65, 0xeb, 0x60, 0xff, 0xfe, 0xae,
	0xfe, 0xa8, 0xbf, 0xdd, 0x2a, 0xa0, 0x05, 0x28, 0x6d, 0xf7, 0x7b, 0xdb, 0xad, 0xa2, 0xf6, 0xc7,
	0x45, 0x68, 0x7f, 0x6d, 0x8e, 0xc7, 0x38, 0x90, 0x77, 0x40, 0xea, 0x2c, 0x48, 0x5a, 0x66, 0x41,
	0xd5, 0x32, 0x15, 0xce, 0x56, 0x8c, 0x73, 0xb6, 0x3b, 0xfc, 0x4e, 0x2c, 0xc9, 0x63, 0x4a, 0xb4,
	0x29, 0xdf, 0x8c, 0xd7, 0x00, 0x6c, 0x1c, 0x88, 0xfb, 0xae, 0x4c, 0xcd, 0xfb, 0x15, 0x1b, 0x07,
	0xa1, 0xd1, 0xb1, 0x6c, 0xd9, 0xee, 0x34, 0xa0, 0xea, 0x5f, 0xfc, 0xaa, 0x63, 0x45, 0xf2, 0x85,
	0x38, 0x3f, 0xeb, 0x42, 0x7c, 0x1b, 0x4a, 0x13, 0x1c, 0x98, 0x54, 0xa5, 0x0b, 0xa5, 0xd9, 0xd8,
	0x84, 0xeb, 0x14, 0x45, 0xfb, 0x45, 0x9e, 0x73, 0xde, 0x2a, 0xcc, 0xef, 0x1f, 0x1c, 0x19, 0x83,
	0xfe, 0x51, 0x2b, 0x87, 0x5a, 0x50, 0x3b, 0x3c, 0xf8, 0xda, 0xd8, 0x3a, 0xd8, 0xdd, 0xdf, 0xec,
	0x0d, 0xfa, 0xad, 0x3c, 0x83, 0x1c, 0x46, 0x90, 0x02, 0x6a, 0x43, 0x7d, 0xf3, 0xe0, 0x68, 0x27,
	0x02, 0x15, 0xc9, 0x0a, 0x0c, 0xfa, 0xfb, 0x47, 0xad, 0x12, 0x61, 0xca, 0x7a, 0x7f, 0xab, 0xbf,
	0xfb, 0xa4, 0xbf, 0xdd, 0x2a, 0xa3, 0x25, 0x68, 0x13, 0xb8, 0xd1, 0xdb, 0xdf, 0x36, 0x42, 0xf0,
	0x1c, 0x9a, 0x87, 0xe2, 0xe1, 0xc1, 0x61, 0x6b, 0x5e, 0xfb, 0x65, 0x11, 0x6a, 0x87, 0xce, 0x21,
	0xd9, 0xc4, 0x7e, 0xe0, 0x78, 0x54, 0x8a, 0x18, 0x89, 0x0f, 0x26, 0x52, 0xb1, 0x35, 0xab, 0x87,
	0x50, 0xaa, 0xbc, 0xf5, 0xe1, 0x7a, 0x8a, 0x81, 0x91, 0x5f, 0x6b, 0xb2, 0x28, 0xf6, 0x4a, 0xc2,
	0xc4, 0xc8, 0xef, 0x2f, 0x4a, 0x66, 0x0b, 0x5e, 0x0d, 0xc9, 0x98, 0xe3, 0x80, 0x2a, 0x48, 0x2a,
	0x15, 0x66, 0x42, 0x08, 0x75, 0xb8, 0x1e, 0x47, 0x92, 0x89, 0x4c, 0xe1, 0x5a, 0xbc, 0x0b, 0xaa,
	0x18, 0xc6, 0x44, 0x98, 0xf7, 0x95, 0x5b, 0x96, 0x11, 0x20, 0x9d, 0xa2, 0x97, 0xaa, 0x24, 0x85,
	0x6d, 0x91, 0x4d, 0xe1, 0x1f, 0x9a, 0x96, 0xa7, 0xaf, 0x3f, 0x53, 0x3b, 0x2d, 0xcb, 0x6a, 0x68,
	0x0a, 0xaf, 0xc4, 0xba, 0xac, 0xb6, 0xca, 0x8c, 0xce, 0x1f, 0x70, 0x33, 0x17, 0xc7, 0xdc, 0x8d,
	0x8d, 0x20, 0xbd, 0xdd, 0xae, 0x99, 0x85, 0xe4, 0x6b, 0xff, 0x2d, 0x0f, 0xef, 0xbd, 0x14, 0x35,
	0x22, 0x67, 0x85, 0x1d, 0xb5, 0x46, 0xd8, 0x0e, 0xac, 0x13, 0x8b, 0x5b, 0x9b, 0x8b, 0x3a, 0x32,
	0x43, 0x5a, 0xa2, 0x04, 0xfd, 0x1d, 0x78, 0x6b, 0xc6, 0xc8, 0x8c, 0x21, 0x21, 0x6d, 0xb8, 0xa6,
	0xe5, 0x09, 0x91, 0xf8, 0xa6, 0x3a, 0xc8, 0xf4, 0xce, 0xd0, 0x91, 0xbd, 0x6e, 0xbe, 0x10, 0xc7,
	0xd7, 0xfe, 0x6b, 0x1e, 0xde, 0x79, 0x89, 0x65, 0x22, 0x7b, 0x56, 0x88, 0x57, 0x8a, 0x25, 0x5d,
	0x58, 0x87, 0x39, 0x4f, 0xfd, 0x79, 0x1e, 0x6e, 0xce, 0xda, 0x28, 0x29, 0x03, 0x7b, 0x9b, 0xdf,
	0x92, 0xa2, 0xfd, 0x19, 0x23, 0x7b, 0x23, 0x7b, 0xaf, 0x48, 0x43, 0xfb, 0x6d, 0x78, 0xfd, 0x12,
	0xc4, 0xd0, 0xdb, 0xd0, 0x8a, 0xf7, 0x54, 0xd8, 0x72, 0x63, 0xcd, 0xa0, 0x77, 0xa0, 0x9d, 0x18,
	0x03, 0xb7, 0xc1, 0xb6, 0x70, 0x8c, 0xb6, 0xf6, 0x33, 0xd0, 0x5e, 0xbc, 0x48, 0x44, 0x96, 0x8a,
	0xad, 0x3f, 0x6f, 0xbc, 0xa1, 0xae, 0xde, 0xcb, 0xb5, 0xfd, 0x47, 0x05, 0x58, 0xa1, 0xe3, 0xa6,
	0x72, 0x89, 0x1d, 0x10, 0x56, 0xe8, 0x9a, 0xc3, 0xa7, 0xe6, 0x29, 0x46, 0x7b, 0xd0, 0x09, 0x7d,
	0x44, 0xb2, 0x6c, 0xc0, 0x64, 0x95, 0x35, 0xb6, 0x0a, 0x29, 0x0e, 0x29, 0x7d, 0x71, 0x98, 0xe2,
	0xa5, 0xfa, 0x84, 0x79, 0x88, 0x42, 0x8e, 0xc5, 0xa5, 0x16, 0x14, 0xea, 0x61, 0x21, 0xbb, 0xd3,
	0x6b, 0xae, 0xe3, 0x46, 0xcc, 0x2f, 0xf4, 0xad, 0x0c, 0x9d, 0x09, 0xe9, 0x38, 0xe7, 0x3e, 0xcc,
	0xb7, 0xb2, 0xc5, 0x60, 0x44, 0x66, 0x18, 0xe3, 0xd1, 0xa9, 0xf0, 0x08, 0x30, 0x57, 0x06, 0x30,
	0x10, 0xe5, 0x47, 0xd7, 0xa1, 0x8a, 0x9f, 0x07, 0x9e, 0x69, 0xd8, 0x8e, 0x3d, 0xc4, 0xfc, 0xbe,
	0x01, 0x0a, 0xda, 0x27, 0x10, 0x22, 0x9b, 0xd3, 0xaa, 0xcc, 0x5d, 0x41, 0x7f, 0x6b, 0xff, 0xba,
	0x0c, 0x35, 0x3a, 0x3b, 0x83, 0xe9, 0x64, 0x62, 0x7a, 0x17, 0x44, 0x64, 0x51, 0x1c, 0xe8, 0xfc,
	0x4b, 0xbd, 0x1c, 0x0b, 0x29, 0x62, 0xbf, 0xc4, 0x36, 0xe9, 0x6f, 0x32, 0x2a, 0xd7, 0xc3, 0xcf,
	0x2c, 0x67, 0xea, 0xcb, 0x5d, 0xae, 0x09, 0x20, 0xed, 0xf4, 0x1d, 0xe8, 0x30, 0x87, 0xb7, 0xa1,
	0xe2, 0x72, 0xef, 0x0b, 0x2b, 0x3b, 0x94, 0x6b, 0xdc, 0x86, 0xc5, 0xe0, 0xcc, 0xf2, 0xe2, 0x15,
	0xd8, 0xa0, 0xda, 0xb4, 0x48, 0xc1, 0x7f, 0x0f, 0xd0, 0x08, 0x0f, 0x9d, 0x11, 0x1e, 0x19, 0x23,
	0xeb, 0xe4, 0xc4, 0x1a, 0x4e, 0xc7, 0xc1, 0x05, 0x55, 0x08, 0xe7, 0xf4, 0x36, 0x2f, 0xd9, 0x0e,
	0x0b, 0x48, 0xaf, 0xcf, 0x2d, 0xdb, 0xb6, 0xec, 0x53, 0x3e, 0x8f, 0xe4, 0x4a, 0x6d, 0xeb, 0x35,
	0x0e, 0x64, 0x33, 0x79, 0x17, 0x56, 0xed, 0xe9, 0xc4, 0xf0, 0xf0, 0xe9, 0x74, 0x6c, 0x7a, 0x86,
	0xe2, 0x31, 0xa8, 0x30, 0xab, 0xaa, 0x3d, 0x9d, 0xe8, 0xac, 0x58, 0xb6, 0xcd, 0x93, 0xf1, 0x92,
	0x9a, 0x64, 0x9f, 0x28, 0xb5, 0x80, 0xd9, 0xbc, 0xec, 0xe9, 0xe4, 0xd0, 0x71, 0x95, 0x1a, 0xd7,
	0x00, 0x02, 0x27, 0x30, 0xc7, 0x44, 0xcb, 0xf5, 0xa9, 0xca, 0x59, 0xd4, 0x2b, 0x14, 0x72, 0x1f,
	0x63, 0x3f, 0xe1, 0x1a, 0xe5, 0x8e, 0xa0, 0x5a, 0xc2, 0x35, 0xaa, 0x33, 0x9f, 0x50, 0xdc, 0x35,
	0xca, 0xf1, 0xeb, 0x09, 0xd7, 0x28, 0xc7, 0x17, 0x0a, 0x5d, 0x43, 0x52, 0xe8, 0x62, 0x5b, 0xb1,
	0x99, 0xd8, 0x8a, 0x89, 0x0d, 0xdd, 0x4a, 0xd9, 0xd0, 0xab, 0x30, 0xff, 0x0c, 0x7b, 0x3e, 0x39,
	0x6f, 0xcc, 0x7c, 0x28, 0x3e, 0x25, 0x05, 0xd7, 0x73, 0x1c, 0x66, 0x0f, 0xac, 0x09, 0x25, 0x41,
	0x77, 0x9c, 0x40, 0xfb, 0x2f, 0x65, 0x68, 0xef, 0x59, 0xa7, 0x67, 0xc1, 0x5f, 0x6e, 0xdd, 0x97,
	0xdd, 0xba, 0x5b, 0xf0, 0x2a, 0xd9, 0x80, 0x4f, 0x6d, 0xe7, 0xdc, 0x9e, 0xb5, 0x81, 0xd7, 0xed,
	0xe9, 0xe4, 0x21, 0x41, 0xba, 0x9a, 0x5d, 0x9c, 0xb1, 0x4d, 0xab, 0x2f, 0xb9, 0x4d, 0x6b, 0x59,
	0xdb, 0x34, 0xb6, 0x25, 0xeb, 0x2f, 0xde, 0x92, 0x8d, 0x94, 0x2d, 0x49, 0x26, 0xc7, 0xf1, 0x26,
	0xe6, 0x58, 0x1e, 0x96, 0x21, 0xef, 0x45, 0xb6, 0xd7, 0xd7, 0x19, 0x96, 0x22, 0x60, 0x8b, 0xcd,
	0x29, 0xef, 0xeb, 0xd6, 0xcc, 0x7d, 0xdd, 0x4e, 0xec, 0xeb, 0x7f, 0x36, 0x07, 0x65, 0xe6, 0x37,
	0xf9, 0x7f, 0x71, 0x2f, 0x63, 0x3b, 0x75, 0x2f, 0x97, 0xf5, 0x36, 0x2f, 0x79, 0xd9, 0xbd, 0xbc,
	0x0b, 0x9d, 0x8c, 0x1d, 0x4c, 0x84, 0xa8, 0xa4, 0xd9, 0x92, 0x1a, 0x5d, 0xf4, 0x45, 0x2f, 0x65,
	0x47, 0xf7, 0x98, 0x19, 0x35, 0xb6, 0x9b, 0x67, 0x91, 0x69, 0xba, 0xbf, 0x5e, 0x8c, 0x7a, 0x03,
	0x96, 0xb2, 0x8d, 0x7d, 0x35, 0x7d, 0xf1, 0x38, 0xc5, 0x96, 0xf7, 0x53, 0x58, 0x63, 0xb8, 0x43,
	0x26, 0x1b, 0x19, 0x93, 0x48, 0x38, 0xa2, 0x5b, 0xbd, 0xba, 0x71, 0x8d, 0xab, 0x2f, 0xe9, 0x12,
	0x94, 0xbe, 0x72, 0x9c, 0x21, 0x5a, 0xa5, 0x19, 0x02, 0xbf, 0x07, 0xc7, 0xff, 0x14, 0xaa, 0x97,
	0x08, 0x5e, 0x09, 0x0f, 0x40, 0x41, 0x12, 0x71, 0xfe, 0x57, 0x11, 0xea, 0x2c, 0x3c, 0x8f, 0x9b,
	0x68, 0x33, 0x0f, 0x97, 0xd4, 0xbf, 0x82, 0xda, 0xbf, 0xc4, 0x21, 0x2a, 0xbe, 0xc4, 0x21, 0x2a,
	0xbd, 0xec, 0x21, 0x2a, 0x67, 0x1d, 0xa2, 0xd8, 0x34, 0xcd, 0xc5, 0xa7, 0x49, 0x65, 0x0f, 0xf3,
	0x71, 0xf6, 0xf0, 0x2a, 0x80, 0x74, 0xf6, 0x98, 0xfb, 0x57, 0x82, 0xa0, 0x0e, 0x94, 0xd9, 0x61,
	0xab, 0xd0, 0xc3, 0xc6, 0x3e, 0xd0, 0xe7, 0xd0, 0x65, 0xfb, 0x3a, 0xf5, 0xac, 0x31, 0x96, 0xbf,
	0x4a, 0x31, 0xd2, 0xae, 0x8a, 0x0f, 0x61, 0x99, 0xd5, 0x4e, 0x1c, 0x2f, 0x16, 0x66, 0xd2, 0xa1,
	0xa5, 0xf1, 0xeb, 0x82, 0x70, 0x6b, 0x36, 0x50, 0x32, 0x21, 0xd8, 0x5f, 0xad, 0xd1, 0x4d, 0x5c,
	0x63, 0xc0, 0x1d, 0x0a, 0x43, 0xaf, 0x01, 0xff, 0x36, 0x4e, 0xc6, 0xe6, 0xa9, 0xcf, 0x99, 0x3e,
	0x9f, 0xa1, 0xfb, 0x04, 0xa4, 0xfd, 0xf9, 0x1c, 0xd4, 0xa9, 0xa0, 0xf0, 0x64, 0xf3, 0xe1, 0x5f,
	0x32, 0xd6, 0x4b, 0x33, 0xd6, 0xdf, 0x84, 0xee, 0x4c, 0x01, 0xa1, 0x18, 0x59, 0x4e, 0x33, 0xed,
	0xbf, 0xfa, 0xea, 0xd3, 0x2c, 0xf1, 0xe1, 0x0a, 0x98, 0xed, 0x0f, 0x2d, 0x4f, 0x64, 0x72, 0xd3,
	0xfa, 0x77, 0xe4, 0xa6, 0x8d, 0xef, 0xc5, 0x4d, 0xff, 0x6f, 0x0b, 0x26, 0x7f, 0x83, 0xb3, 0x5f,
	0x1e, 0x0d, 0xdd, 0xe1, 0xc7, 0x81, 0x32, 0xdf, 0x9d, 0x1c, 0x3f, 0x10, 0xcb, 0x50, 0x8e, 0x3c,
	0x20, 0xe5, 0x9d, 0x9c, 0xce, 0x3e, 0xd1, 0x6a, 0x78, 0xe4, 0x8a, 0xbc, 0x80, 0x7f, 0x6f, 0x56,
	0x60, 0xfe, 0x84, 0x52, 0xf4, 0xb5, 0x11, 0xb4, 0x1e, 0x60, 0x26, 0xcf, 0xbf, 0x9c, 0x4b, 0xf6,
	0x9d, 0x90, 0x06, 0x37, 0x9e, 0xb4, 0xa5, 0x39, 0x66, 0xfd, 0xd5, 0xc3, 0x56, 0x4e, 0x60, 0x8e,
	0x39, 0x50, 0x09, 0xaf, 0xc3, 0x9e, 0xc7, 0xa3, 0xb9, 0x17, 0x74, 0xf6, 0x41, 0xce, 0x39, 0x39,
	0x30, 0x74, 0x04, 0x15, 0x9d, 0xfe, 0x26, 0xd3, 0x36, 0xc1, 0xbe, 0x4f, 0x16, 0xb1, 0xc8, 0xa2,
	0x9f, 0xf9, 0x27, 0x29, 0x19, 0xe1, 0xc0, 0xb4, 0xc6, 0xcc, 0x10, 0x5e, 0xd1, 0xc5, 0xa7, 0xf6,
	0x15, 0xd4, 0x0f, 0x3d, 0x27, 0x70, 0x86, 0xce, 0xf8, 0x8a, 0x1c, 0xbd, 0xda, 0x39, 0x34, 0xa4,
	0x09, 0xba, 0x1a, 0xe7, 0xf1, 0xeb, 0x30, 0x47, 0x77, 0x9c, 0x70, 0x19, 0x57, 0xa5, 0xa9, 0xd3,
	0x79, 0x91, 0xf6, 0x05, 0x2c, 0x6e, 0x9a, 0xc3, 0xa7, 0x53, 0x97, 0x19, 0xbb, 0xc5, 0xe2, 0xbc,
	0x05, 0xcd, 0xc0, 0xf4, 0x4e, 0x71, 0x60, 0x8c, 0x9d, 0xa1, 0x19, 0x9a, 0x4d, 0x6a, 0x7a, 0x83,
	0x81, 0xf7, 0x38, 0x54, 0x7b, 0x0c, 0x6d, 0xb5, 0xfe, 0xd5, 0xcc, 0xc7, 0x6f, 0xc1, 0xe2, 0xee,
	0xc4, 0x75, 0xbc, 0x20, 0xd1, 0x2d, 0xee, 0x67, 0x8e, 0x77, 0x8b, 0x81, 0x45, 0xb7, 0xc8, 0x65,
	0xe8, 0x9a, 0xbe, 0xef, 0x9e, 0x79, 0xa6, 0x2f, 0x16, 0x5c, 0x82, 0x90, 0x6e, 0xab, 0xf4, 0xaf,
	0xa6, 0xdb, 0x8f, 0x60, 0xa1, 0x67, 0xdb, 0xce, 0x94, 0xb0, 0xd9, 0x0e, 0x94, 0x3d, 0x42, 0x56,
	0xec, 0x41, 0xfa, 0x81, 0xde, 0x81, 0x8a, 0xed, 0x8c, 0xb0, 0x61, 0xd9, 0x27, 0x0e, 0x37, 0x21,
	0x35, 0x78, 0xae, 0x81, 0x33, 0xc2, 0xd4, 0x81, 0xbf, 0x60, 0xf3, 0x5f, 0xda, 0xef, 0x17, 0x60,
	0x41, 0x80, 0x5f, 0x2e, 0x4e, 0x1f, 0xdd, 0x80, 0xaa, 0xe9, 0xba, 0x63, 0x8b, 0xcf, 0x12, 0xdb,
	0xdb, 0x32, 0x08, 0xbd, 0x0d, 0x2d, 0x97, 0xef, 0x62, 0x43, 0x70, 0x0e, 0xe6, 0xf1, 0x69, 0x0a,
	0xf8, 0x13, 0xce, 0x41, 0xba, 0xb0, 0xe0, 0x8e, 0xcd, 0xe0, 0xc4, 0xf1, 0x26, 0xf4, 0x6e, 0xab,
	0xe8, 0xe1, 0x37, 0x5d, 0x92, 0xc0, 0xf4, 0x02, 0x23, 0xba, 0x60, 0x59, 0xc4, 0x5b, 0x83, 0x82,
	0x8f, 0xc2, 0x5b, 0xb6, 0x01, 0x05, 0x6b, 0x44, 0xaf, 0xae, 0x8a, 0x5e, 0xb0, 0x46, 0x64, 0x7e,
	0x58, 0xa8, 0xf5, 0x02, 0x9b, 0x1f, 0x9f, 0x07, 0x62, 0xd7, 0x86, 0xa6, 0x6b, 0x1e, 0x5b, 0x63,
	0x2b, 0xb0, 0xb0, 0xcf, 0x63, 0x5e, 0x15, 0x98, 0xf6, 0x09, 0xb4, 0x7a, 0xa3, 0x51, 0x9c, 0x9b,
	0x88, 0xcd, 0x9e, 0xcf, 0xde, 0xec, 0x9f, 0x40, 0x85, 0x07, 0x45, 0x9d, 0x38, 0x99, 0xb2, 0x42,
	0x9a, 0x94, 0xe9, 0x40, 0xa7, 0x37, 0x1a, 0xfd, 0x10, 0x71, 0x98, 0x4b, 0x30, 0x47, 0xbd, 0x58,
	0x3e, 0xf7, 0xc7, 0x95, 0x83, 0xe7, 0xbb, 0x23, 0x5f, 0xdb, 0x80, 0xca, 0x0e, 0x36, 0xbd, 0xe0,
	0x18, 0x9b, 0x01, 0xfa, 0x11, 0x94, 0x59, 0x44, 0x1e, 0xb3, 0x5c, 0x36, 0xa5, 0xa1, 0xd1, 0x0d,
	0xc3, 0x4a, 0xb5, 0x2d, 0x00, 0x0a, 0xfb, 0x6a, 0x8a, 0xbd, 0x8b, 0x4b, 0x56, 0xe2, 0xab, 0x52,
	0x10, 0xab, 0xa2, 0x1d, 0x43, 0x33, 0x22, 0x12, 0x0e, 0x72, 0x62, 0x06, 0xc3, 0xb3, 0x30, 0xbf,
	0x43, 0x7c, 0x46, 0x6d, 0x14, 0x2e, 0xd1, 0x46, 0x31, 0x6c, 0xc3, 0x86, 0xea, 0xe0, 0xc2, 0x1e,
	0x8a, 0xa5, 0xdb, 0x80, 0x25, 0xba, 0x55, 0x88, 0xd4, 0xa2, 0x84, 0x8a, 0xb1, 0x75, 0x59, 0x14,
	0x85, 0x52, 0xac, 0x18, 0x7a, 0x07, 0xda, 0xfe, 0x85, 0x3d, 0x54, 0xa5, 0x8c, 0x02, 0xed, 0x5d,
	0x8b, 0x14, 0xc8, 0x4b, 0xa5, 0x75, 0x00, 0xed, 0xe3, 0xe0, 0xdc, 0xf1, 0x9e, 0x4a, 0xd1, 0x64,
	0xda, 0x43, 0x68, 0x29, 0x50, 0x32, 0xd4, 0x4f, 0xa0, 0x69, 0x3e, 0x33, 0xad, 0xb1, 0x79, 0x3c,
	0xc6, 0x06, 0x39, 0x86, 0x62, 0x3b, 0xc5, 0xcf, 0x68, 0x23, 0x44, 0x23, 0x20, 0x5f, 0xbb, 0x03,
	0xcd, 0xde, 0x90, 0x88, 0x44, 0xd4, 0x28, 0x41, 0xcd, 0x0d, 0xd7, 0x00, 0xf8, 0x55, 0x22, 0x9c,
	0x94, 0x15, 0xbd, 0xc2, 0x21, 0xbb, 0x23, 0xed, 0x0b, 0x68, 0xf6, 0x46, 0xcf, 0xb0, 0x17, 0x58,
	0x3e, 0x66, 0x5b, 0x99, 0x5c, 0x76, 0x42, 0x10, 0xc9, 0x27, 0x2e, 0x3b, 0x1e, 0xbc, 0x21, 0x30,
	0xb4, 0xdf, 0xcd, 0xc3, 0xa2, 0x34, 0xca, 0x90, 0xed, 0x6c, 0x28, 0xd1, 0x3d, 0xaf, 0x26, 0x44,
	0x2e, 0x81, 0x28, 0xfb, 0x32, 0x43, 0x57, 0x6a, 0x41, 0x8a, 0xe1, 0x78, 0x93, 0x7b, 0x12, 0x01,
	0xe6, 0xf6, 0x0f, 0xf4, 0x47, 0x34, 0x31, 0x29, 0x19, 0xb0, 0x91, 0xd7, 0x1e, 0x93, 0xb3, 0xc1,
	0x07, 0x22, 0x1b, 0xcc, 0x7f, 0x12, 0x0b, 0xb6, 0x66, 0x43, 0x5a, 0xcb, 0xec, 0x90, 0x1a, 0x6f,
	0xad, 0x7d, 0xc6, 0x4d, 0xd7, 0x62, 0x97, 0xbc, 0xd4, 0xe4, 0x0c, 0x00, 0xc9, 0x06, 0x7d, 0x4e,
	0xe2, 0x7b, 0xf6, 0xe8, 0x73, 0xa8, 0x3f, 0xc4, 0x17, 0x7e, 0xe0, 0xd8, 0x98, 0x1d, 0xb1, 0x97,
	0xea, 0xd2, 0x6f, 0x11, 0x56, 0x1e, 0xdc, 0x77, 0xa6, 0xf6, 0x08, 0xbd, 0xa5, 0xac, 0xd1, 0xa2,
	0xd8, 0x5b, 0xac, 0x54, 0x5e, 0x98, 0xe8, 0x74, 0xd6, 0xe8, 0xc9, 0x59, 0xe3, 0x6b, 0x52, 0x81,
	0xf2, 0xe6, 0xde, 0xc1, 0xd6, 0xc3, 0x56, 0x0e, 0xcd, 0x41, 0xe1, 0xe8, 0xaf, 0xb6, 0xf2, 0xda,
	0xdf, 0x82, 0xda, 0x96, 0x87, 0xcd, 0x00, 0x73, 0x29, 0x6e, 0x19, 0xe6, 0x98, 0x5c, 0x24, 0x94,
	0x68, 0xf6, 0x45, 0xf8, 0x35, 0x61, 0x69, 0x86, 0x15, 0x60, 0xcf, 0x8c, 0xce, 0x4d, 0x59, 0x6f,
	0x10, 0xf0, 0x6e, 0x08, 0xa5, 0xe1, 0xe9, 0xe7, 0xd8, 0x7c, 0xca, 0x9d, 0xe5, 0xec, 0x83, 0x40,
	0x99, 0x3e, 0xc6, 0xae, 0x0a, 0xf6, 0xa1, 0x5d, 0x87, 0x4a, 0x6f, 0x34, 0xe2, 0x2d, 0x8b, 0xb0,
	0xac, 0x7c, 0x14, 0x96, 0xa5, 0xd5, 0xa1, 0xba, 0x35, 0xc6, 0xa6, 0xc7, 0x50, 0xb4, 0xff, 0x59,
	0x81, 0x72, 0xff, 0x19, 0x39, 0x25, 0xaf, 0xab, 0x6c, 0x4a, 0x66, 0xdb, 0x44, 0xc6, 0x64, 0x0c,
	0xe4, 0x5e, 0x5a, 0x5e, 0x52, 0x86, 0x36, 0xb1, 0x93, 0x53, 0xd3, 0x93, 0xde, 0x85, 0x05, 0x93,
	0xaf, 0x27, 0x8f, 0x0a, 0xe1, 0x67, 0x59, 0xac, 0xf2, 0x4e, 0x4e, 0x0f, 0x31, 0xd0, 0x8f, 0xa1,
	0x72, 0x26, 0xf8, 0x2e, 0x4f, 0x0f, 0xe0, 0x5c, 0x2d, 0x64, 0xc7, 0x3b, 0x39, 0x3d, 0xc2, 0x41,
	0x1f, 0x00, 0x0b, 0xb1, 0x30, 0xbe, 0x25, 0x5b, 0x82, 0xde, 0x8e, 0x61, 0x1a, 0x42, 0xc4, 0x48,
	0x77, 0x72, 0x3a, 0x1c, 0x47, 0xbc, 0x79, 0x0b, 0xda, 0x52, 0x25, 0x83, 0x89, 0x09, 0x73, 0xb2,
	0x77, 0x3f, 0xc6, 0x83, 0x77, 0x72, 0x7a, 0xf3, 0x38, 0xc6, 0x96, 0xf7, 0xa0, 0x63, 0x33, 0xfe,
	0x45, 0x85, 0x09, 0xc3, 0x63, 0xbb, 0x9c, 0x47, 0x09, 0xf0, 0xf0, 0xaf, 0x24, 0xdf, 0xdb, 0xc9,
	0xe9, 0xc8, 0x4e, 0x40, 0xd1, 0x7d, 0x40, 0x31, 0x6a, 0xa4, 0x4f, 0x15, 0x79, 0xa6, 0xe3, 0xdc,
	0x72, 0x27, 0xa7, 0xb7, 0xec, 0x38, 0x07, 0xed, 0x41, 0xd3, 0x54, 0x19, 0x21, 0x35, 0x22, 0x84,
	0x03, 0x8b, 0x71, 0x49, 0x32, 0xb0, 0x18, 0x3e, 0xda, 0x84, 0x96, 0x29, 0x18, 0x8a, 0xc1, 0x2f,
	0xf5, 0xba, 0x42, 0x43, 0xe5, 0x9b, 0x94, 0x46, 0x8c, 0x95, 0x7e, 0x0a, 0x75, 0x36, 0xc3, 0x62,
	0x56, 0x1a, 0xb2, 0xb7, 0x4e, 0x66, 0x2c, 0x3b, 0x39, 0x9d, 0x05, 0xce, 0x88, 0x99, 0xf8, 0x1c,
	0x1a, 0x4f, 0xf9, 0x31, 0xe7, 0x8b, 0xda, 0x94, 0x83, 0x9b, 0x14, 0x16, 0xb0, 0x93, 0xd3, 0xeb,
	0x4f, 0x15, 0x9e, 0xf0, 0x1b, 0x50, 0x8b, 0x3a, 0x1f, 0x3c, 0xa7, 0xba, 0x58, 0x75, 0xa3, 0x1b,
	0xeb, 0xb8, 0x1a, 0x83, 0x54, 0x0d, 0x6b, 0x1c, 0x3d, 0x47, 0x9f, 0x02, 0x04, 0xcf, 0xc3, 0x6e,
	0xb7, 0xe5, 0xc5, 0x4c, 0xb2, 0x34, 0xb2, 0x17, 0x83, 0xe7, 0xa2, 0xe7, 0xef, 0x11, 0xd9, 0x32,
	0x30, 0x4e, 0x08, 0x17, 0xa1, 0x56, 0x36, 0xe9, 0xde, 0x62, 0xbc, 0x85, 0xec, 0x75, 0x5b, 0x70,
	0xa1, 0x4f, 0xa1, 0x3e, 0xa4, 0x1c, 0xc3, 0xe0, 0x8c, 0x62, 0x51, 0x9e, 0x23, 0x99, 0x99, 0x90,
	0x39, 0x1a, 0xca, 0xcc, 0xe5, 0x0e, 0x80, 0x39, 0x1a, 0x89, 0x7a, 0x1d, 0xf9, 0x9c, 0x84, 0x7c,
	0x80, 0xa7, 0xde, 0xf0, 0x1a, 0x1f, 0x43, 0x6d, 0x48, 0x18, 0x80, 0xa8, 0xb3, 0x24, 0x07, 0xc4,
	0x49, 0xac, 0x81, 0x4c, 0xc7, 0x30, 0xfa, 0x44, 0x5f, 0xc2, 0xf2, 0x09, 0x37, 0xef, 0x19, 0xea,
	0x8a, 0x2e, 0xcf, 0x58, 0xd1, 0xce, 0x89, 0x6c, 0x12, 0x94, 0x56, 0x56, 0xa5, 0xb5, 0xba, 0x22,
	0xaf, 0xac, 0x62, 0x46, 0x24, 0x2b, 0xab, 0x10, 0xe1, 0xbc, 0xb8, 0x1a, 0xca, 0xaf, 0x44, 0xc2,
	0x8e, 0x76, 0x2e, 0x35, 0x36, 0x2c, 0xe8, 0x32, 0x88, 0x28, 0xc0, 0x42, 0x31, 0xf8, 0x14, 0xaa,
	0x44, 0x50, 0x10, 0x3d, 0xb9, 0x05, 0x0b, 0x98, 0xe7, 0xdf, 0xaa, 0x02, 0x86, 0xc8, 0xca, 0xd5,
	0xc3, 0x72, 0xed, 0x4d, 0x68, 0x0d, 0x88, 0x04, 0x74, 0xe8, 0x10, 0x75, 0x93, 0xd5, 0x47, 0xd2,
	0x05, 0x52, 0x63, 0x77, 0x85, 0xa6, 0x43, 0x43, 0xc2, 0xbb, 0x1a, 0x7d, 0xa6, 0x0d, 0xcd, 0x41,
	0xe0, 0xb8, 0x52, 0xd3, 0x44, 0xf9, 0x8d, 0x40, 0x57, 0xd3, 0xca, 0x35, 0x58, 0xd7, 0xb1, 0x2f,
	0xfa, 0xfe, 0x35, 0x3e, 0x1e, 0x60, 0xef, 0x19, 0xf6, 0x44, 0x8b, 0xbf, 0x09, 0x6b, 0xe9, 0xc5,
	0x57, 0xd3, 0xfa, 0xbb, 0x50, 0xa7, 0xa1, 0xff, 0xae, 0x98, 0xdc, 0x75, 0xa8, 0x84, 0x19, 0x73,
	0x5c, 0x06, 0x5d, 0x38, 0xe6, 0x69, 0x72, 0xda, 0x1f, 0x94, 0xa1, 0x2a, 0xd0, 0xaf, 0x46, 0x03,
	0x88, 0x27, 0x7e, 0x16, 0x93, 0x89, 0x9f, 0x92, 0x6d, 0xa7, 0xa4, 0xda, 0x76, 0x6e, 0xc3, 0x62,
	0x68, 0x49, 0x4c, 0x24, 0x2c, 0xb5, 0x45, 0x51, 0x94, 0x1f, 0xf3, 0x19, 0x74, 0xe3, 0x16, 0x4b,
	0xa9, 0x1a, 0x33, 0x43, 0xae, 0xa8, 0x76, 0xcb, 0xa8, 0xf2, 0xa7, 0xb0, 0x16, 0x33, 0x5e, 0x26,
	0x52, 0x95, 0x96, 0x15, 0x13, 0x66, 0x54, 0x35, 0x66, 0x83, 0x5a, 0x98, 0x6d, 0xdb, 0xae, 0xc4,
	0x2d, 0xb4, 0xe9, 0x66, 0x50, 0xc8, 0x32, 0x83, 0x86, 0xa6, 0xee, 0xaa, 0x6c, 0xea, 0xbe, 0x45,
	0x53, 0xde, 0x0c, 0x35, 0xd1, 0x95, 0xa5, 0x13, 0x35, 0x5d, 0xc7, 0x7d, 0x24, 0xe7, 0xba, 0xae,
	0xc1, 0xc2, 0xc9, 0x74, 0x4c, 0xed, 0xda, 0xdc, 0xf2, 0x3c, 0x4f, 0xbe, 0x0f, 0x1d, 0x97, 0x5c,
	0x4f, 0x63, 0xd3, 0x0f, 0xb8, 0x93, 0x95, 0xf1, 0x91, 0xc6, 0x0b, 0xe2, 0xbd, 0x1b, 0xa4, 0x06,
	0x75, 0xb8, 0x32, 0x5e, 0xf2, 0x15, 0xac, 0xc6, 0x69, 0x18, 0x3c, 0x2a, 0x7b, 0xb5, 0xf9, 0x82,
	0xf0, 0xed, 0x25, 0x95, 0x16, 0x37, 0xc8, 0x6a, 0x2d, 0x6a, 0x41, 0x92, 0x15, 0x9c, 0x2e, 0xac,
	0x3e, 0xc0, 0xc1, 0xb6, 0x65, 0x9e, 0xda, 0x8e, 0x1f, 0x58, 0x43, 0xb9, 0xec, 0x7d, 0x68, 0x3f,
	0xc0, 0xc1, 0xa6, 0x39, 0x36, 0x89, 0x9c, 0xcb, 0x37, 0xfe, 0xec, 0x04, 0xc6, 0x5f, 0xe6, 0xa1,
	0x29, 0xd7, 0xb9, 0x9a, 0xdd, 0x7f, 0x0b, 0x2a, 0x3c, 0xbe, 0x14, 0x8f, 0xb8, 0x9d, 0x4a, 0x8d,
	0x82, 0x8c, 0x8a, 0xd1, 0x6d, 0xa8, 0x4e, 0xed, 0x08, 0x3b, 0x2d, 0x89, 0x40, 0x46, 0xd0, 0xfe,
	0x41, 0x11, 0x5a, 0x83, 0xe9, 0xf1, 0xc4, 0x92, 0x4f, 0x77, 0x66, 0xbc, 0x7f, 0x3e, 0x3b, 0xde,
	0x3f, 0x23, 0xa9, 0xa0, 0x90, 0x99, 0x54, 0xf0, 0x39, 0xac, 0x8b, 0x0a, 0x52, 0x94, 0xb4, 0x11,
	0x38, 0x6c, 0xfb, 0x33, 0x47, 0xc3, 0x0a, 0x47, 0x89, 0x42, 0x8a, 0x8f, 0x1c, 0x7a, 0x16, 0x5e,
	0x98, 0x5e, 0x50, 0xfa, 0xee, 0xe9, 0x05, 0x2f, 0xcc, 0x1e, 0x28, 0x7f, 0x8f, 0xec, 0x01, 0xc9,
	0x44, 0x35, 0xa7, 0x44, 0xdf, 0x6a, 0xff, 0xb2, 0x00, 0x0d, 0x35, 0x57, 0xe5, 0xff, 0xf7, 0x85,
	0x90, 0xe6, 0xaa, 0xac, 0xce, 0xd5, 0x97, 0x34, 0x0f, 0x4e, 0x8e, 0xcf, 0x3c, 0x38, 0x51, 0xe4,
	0x98, 0xb7, 0x15, 0xd5, 0x2e, 0xd5, 0x26, 0xce, 0x11, 0xb4, 0x6f, 0x69, 0x5a, 0x54, 0x2a, 0xad,
	0xd9, 0xe7, 0xf7, 0x2e, 0xd4, 0x94, 0xc0, 0x53, 0x76, 0x88, 0x3b, 0x69, 0x59, 0x47, 0xba, 0x82,
	0xa9, 0x99, 0xd0, 0x1a, 0x60, 0x7b, 0xb4, 0xe5, 0x58, 0x51, 0xd2, 0x77, 0x32, 0x8d, 0x28, 0x9f,
	0x96, 0x46, 0xf4, 0x26, 0xcc, 0xb3, 0x78, 0xea, 0x18, 0xd3, 0x10, 0x01, 0xd1, 0xbc, 0x50, 0xb3,
	0xa0, 0x21, 0x35, 0xf1, 0x83, 0x1a, 0xe2, 0x1e, 0xc2, 0xab, 0xa4, 0xa9, 0xde, 0x38, 0xa0, 0x39,
	0x94, 0xf2, 0xb0, 0xc3, 0xd5, 0x68, 0xb1, 0xe7, 0x3f, 0xa8, 0xde, 0x6c, 0x48, 0xaa, 0x6f, 0x53,
	0x82, 0x6f, 0x13, 0x2d, 0xf8, 0x8f, 0xf2, 0xf0, 0x4a, 0x26, 0xb5, 0xab, 0x19, 0xc6, 0xa7, 0xaa,
	0xaa, 0x5c, 0x9c, 0x99, 0x5a, 0xa1, 0x3e, 0x2e, 0xc2, 0xee, 0x84, 0x1d, 0xcb, 0x0f, 0x1c, 0xa2,
	0x63, 0x5e, 0xe6, 0x4e, 0xf8, 0x79, 0x01, 0x1a, 0x7c, 0xf1, 0x78, 0xbd, 0x19, 0x79, 0xde, 0xab,
	0x30, 0x7f, 0xcc, 0x2e, 0x0f, 0x9e, 0x45, 0x23, 0x3e, 0x43, 0x11, 0xc8, 0xa7, 0x97, 0xf3, 0x48,
	0x11, 0x81, 0x7c, 0x72, 0x2f, 0x8f, 0xd0, 0x23, 0x58, 0x0e, 0x19, 0xbb, 0x11, 0x4b, 0xe2, 0x9f,
	0xe5, 0x5b, 0x5c, 0x0a, 0x6b, 0x29, 0x1e, 0xc6, 0x5d, 0xe8, 0xb8, 0xd8, 0x1e, 0x59, 0xf6, 0xa9,
	0x4a, 0xac, 0x3c, 0x3b, 0xb8, 0x84, 0xd7, 0x51, 0xac, 0x8b, 0x7f, 0x9f, 0xdd, 0x8b, 0xe1, 0xbc,
	0x5d, 0xcd, 0x3a, 0x6e, 0xa8, 0x8f, 0x1b, 0x48, 0x87, 0x4f, 0x9d, 0x6f, 0x79, 0x35, 0x3a, 0x80,
	0x88, 0x68, 0x8a, 0xb1, 0x27, 0x5f, 0xf5, 0x77, 0x01, 0x88, 0xea, 0xc1, 0x45, 0x49, 0x04, 0x25,
	0x17, 0x73, 0xce, 0x51, 0xd1, 0xe9, 0x6f, 0x16, 0x6f, 0x41, 0x65, 0x4f, 0x66, 0x09, 0xe2, 0x5f,
	0xda, 0xaf, 0x0a, 0xd4, 0x6d, 0x17, 0x11, 0xbc, 0x9a, 0xa1, 0xbd, 0x0b, 0x15, 0xa1, 0xdc, 0x88,
	0xa1, 0xc5, 0xb5, 0x9f, 0x08, 0x01, 0x7d, 0x02, 0xcd, 0xa1, 0x63, 0xdb, 0x34, 0xf3, 0x94, 0x9b,
	0x64, 0x4b, 0xe9, 0x26, 0xd9, 0x10, 0x8d, 0x9a, 0x64, 0xd1, 0x4f, 0x00, 0x8d, 0x2c, 0x3f, 0x5e,
	0xb7, 0x9c, 0x5a, 0xb7, 0x2d, 0x63, 0xb2, 0xea, 0xa4, 0x5d, 0xd3, 0x1e, 0x59, 0x23, 0xa2, 0x20,
	0xb3, 0xba, 0x73, 0x19, 0xed, 0x0a, 0x34, 0x56, 0xf1, 0x03, 0xa8, 0x51, 0x0f, 0x0f, 0x9b, 0x44,
	0x91, 0xda, 0xd1, 0x8a, 0x6a, 0xb1, 0x95, 0xd0, 0xab, 0x76, 0xf8, 0xdb, 0xd7, 0x56, 0x60, 0x49,
	0xf8, 0xff, 0x68, 0x2c, 0xb4, 0xe0, 0x9c, 0xda, 0x7f, 0xc8, 0xc3, 0x62, 0xbc, 0xe4, 0x6a, 0x96,
	0xe1, 0x43, 0x58, 0x3e, 0xc6, 0x3e, 0xcf, 0xce, 0x66, 0x71, 0xd9, 0xdc, 0x11, 0xcb, 0x8e, 0x5f,
	0x87, 0x94, 0x46, 0xed, 0x72, 0x87, 0xec, 0x3d, 0x58, 0x1b, 0x3b, 0xf6, 0x69, 0x7a, 0x45, 0xa6,
	0x9c, 0xac, 0x70, 0x84, 0x78, 0x5d, 0xed, 0x1e, 0x2c, 0x32, 0x71, 0xec, 0x3b, 0xb8, 0x6e, 0x7e,
	0x02, 0x1d, 0x31, 0x0d, 0xd4, 0xa5, 0x24, 0xdd, 0x2c, 0x67, 0xec, 0x24, 0xa8, 0x6e, 0xe4, 0x3a,
	0x87, 0xf2, 0xa6, 0xc7, 0xf4, 0x68, 0xc8, 0xd5, 0xaf, 0x66, 0x12, 0x3b, 0x50, 0xa6, 0x5a, 0x0a,
	0xdd, 0xc7, 0x6d, 0x9d, 0x7d, 0x68, 0x77, 0xa0, 0x43, 0x55, 0xf1, 0x81, 0x33, 0x76, 0x64, 0xb5,
	0x3d, 0x93, 0x37, 0x6a, 0x4f, 0x00, 0xc5, 0x6a, 0x5c, 0x8d, 0x72, 0x7b, 0x97, 0xea, 0x00, 0x03,
	0x25, 0x5b, 0xf1, 0x72, 0xac, 0xfd, 0x43, 0x58, 0x1d, 0xe0, 0x60, 0x1b, 0x9f, 0x98, 0xd3, 0x71,
	0x20, 0x52, 0xe6, 0x5f, 0x38, 0x8e, 0xdf, 0x86, 0x15, 0xf1, 0x22, 0x8a, 0xd2, 0x26, 0xf6, 0x67,
	0x5c, 0x0c, 0xd7, 0x00, 0x5c, 0xc7, 0x19, 0x2b, 0x8f, 0x47, 0x55, 0x08, 0x84, 0xa5, 0x76, 0xbe,
	0x0d, 0x2d, 0x69, 0xab, 0xc9, 0x69, 0x98, 0xcd, 0x08, 0xce, 0xb2, 0xe5, 0xfe, 0x69, 0x1e, 0x96,
	0x53, 0xc6, 0x7b, 0x35, 0x6b, 0xfd, 0x09, 0xcc, 0x5b, 0x6c, 0x2c, 0x9c, 0x6b, 0x5d, 0x53, 0x5f,
	0x9b, 0x89, 0x0d, 0x58, 0x17, 0xd8, 0xda, 0x37, 0xb0, 0x9c, 0x32, 0x95, 0x57, 0xb3, 0xc0, 0x07,
	0x74, 0xc0, 0x19, 0x0f, 0xed, 0xbc, 0x38, 0xbe, 0xa2, 0x05, 0x45, 0x22, 0xf2, 0x14, 0xe8, 0xea,
	0x93, 0x9f, 0xda, 0x2f, 0xd5, 0x84, 0x43, 0xea, 0x2a, 0x4d, 0x64, 0x06, 0xe6, 0xd3, 0x32, 0x03,
	0xbf, 0xd3, 0xeb, 0x61, 0xa1, 0xf5, 0x43, 0x0e, 0x22, 0xe1, 0x57, 0xff, 0x7e, 0x4a, 0xf0, 0x56,
	0x29, 0x6e, 0x1a, 0xb8, 0x0d, 0x8b, 0x71, 0x35, 0x42, 0xb2, 0x80, 0xa8, 0x4a, 0x84, 0xe9, 0x9f,
	0xa1, 0x77, 0x01, 0xc5, 0x64, 0xfa, 0xc8, 0xf2, 0xd1, 0x52, 0xc4, 0x75, 0x82, 0x9d, 0x78, 0x0d,
	0x6a, 0x3e, 0xf1, 0x1a, 0x14, 0xd9, 0x74, 0x9d, 0xc4, 0x1a, 0x5c, 0x95, 0x34, 0xa7, 0x7a, 0xac,
	0x8a, 0xf2, 0x7b, 0x16, 0xb1, 0x55, 0x8a, 0x79, 0xab, 0x36, 0xe8, 0xf9, 0x3d, 0x52, 0x32, 0xe6,
	0xc5, 0xd6, 0x88, 0x9e, 0x5b, 0xcc, 0x2b, 0xcf, 0x2d, 0xbe, 0x0f, 0x4b, 0xdb, 0xd3, 0x89, 0x7b,
	0xe8, 0x59, 0xcf, 0xcc, 0x00, 0x3f, 0xc4, 0x17, 0x2f, 0x3e, 0xf0, 0xff, 0x24, 0x0f, 0x8b, 0xf1,
	0x3a, 0x57, 0x33, 0x76, 0xa9, 0xcd, 0xa2, 0xca, 0x2f, 0xae, 0x43, 0xd5, 0x65, 0xcd, 0xd1, 0x37,
	0xf8, 0x78, 0xb2, 0x8c, 0x1b, 0xf6, 0x40, 0xbb, 0x07, 0x2b, 0x2c, 0xba, 0x23, 0x39, 0x92, 0x58,
	0xdd, 0x7c, 0xa2, 0xee, 0xef, 0xe6, 0x61, 0x29, 0x59, 0xf9, 0x6a, 0x86, 0xf4, 0x0e, 0xb4, 0xd9,
	0x4f, 0xd3, 0x0e, 0x0c, 0x75, 0x70, 0xad, 0xb0, 0x40, 0xbc, 0xa7, 0xf5, 0x0a, 0x74, 0x1f, 0xe0,
	0x60, 0xcf, 0xf4, 0x15, 0x55, 0x5b, 0xc8, 0x05, 0x4b, 0x54, 0x2c, 0xa0, 0xa5, 0x32, 0x38, 0xa0,
	0xfc, 0x3e, 0x59, 0xe9, 0x6a, 0xfa, 0x1f, 0x05, 0xe6, 0x16, 0x95, 0x57, 0xe5, 0x7e, 0x27, 0x4f,
	0x55, 0x07, 0xa9, 0x37, 0x57, 0xd3, 0xde, 0xdb, 0x4a, 0x7b, 0xa9, 0xfe, 0x55, 0xd1, 0x85, 0x77,
	0x61, 0x79, 0xcf, 0xe2, 0xcd, 0xfb, 0x03, 0x4b, 0xb2, 0x6a, 0x21, 0x39, 0x9c, 0x8d, 0xc7, 0x73,
	0xfc, 0x49, 0x1e, 0x3a, 0x09, 0xf4, 0xab, 0x5a, 0xe3, 0x79, 0x0f, 0x4f, 0x9c, 0x67, 0xa1, 0x39,
	0x2b, 0xcd, 0x29, 0xcc, 0x31, 0xd0, 0x5b, 0x50, 0x36, 0x47, 0xa3, 0xd0, 0x96, 0x95, 0x82, 0xca,
	0xca, 0xb5, 0xaf, 0x61, 0x8d, 0x89, 0x4e, 0x69, 0x9c, 0xfe, 0x5e, 0xaa, 0x5f, 0x3b, 0x4b, 0x89,
	0x51, 0xd9, 0xc4, 0xff, 0x28, 0x40, 0x2d, 0xb4, 0x1b, 0x5e, 0xcd, 0x0c, 0xdc, 0x84, 0x16, 0x63,
	0xe6, 0x86, 0x73, 0x62, 0x84, 0x11, 0x68, 0xd4, 0xc5, 0xcc, 0xe0, 0xdc, 0x04, 0xe1, 0xa3, 0xf7,
	0x01, 0xa8, 0x19, 0x94, 0x19, 0x51, 0x4b, 0x09, 0x87, 0x0e, 0xcf, 0xfd, 0xd1, 0x2b, 0x63, 0xb1,
	0xb3, 0xd0, 0x47, 0xd0, 0x1c, 0xb1, 0x8b, 0xd4, 0x90, 0xcd, 0x27, 0x71, 0x53, 0x41, 0x63, 0xa4,
	0xdc, 0xb6, 0x69, 0x6f, 0x8a, 0xcc, 0xa5, 0xbe, 0x29, 0xf2, 0x1e, 0x20, 0xec, 0x07, 0xd6, 0xc4,
	0x24, 0x2a, 0x03, 0xd9, 0x2b, 0x9e, 0x19, 0x60, 0xca, 0xf5, 0x8b, 0x7a, 0x3b, 0x2c, 0xd9, 0xe1,
	0x05, 0x19, 0x49, 0x3c, 0x0b, 0x19, 0x49, 0x3c, 0xda, 0xef, 0xcd, 0xd1, 0xeb, 0x3a, 0x6e, 0x93,
	0xbd, 0xaa, 0x78, 0xbf, 0xfa, 0xd4, 0xc7, 0x9e, 0x31, 0x36, 0xed, 0xd3, 0x69, 0x14, 0xd0, 0x58,
	0x23, 0xc0, 0x3d, 0x0e, 0x43, 0xb7, 0xa0, 0xfd, 0x37, 0xcd, 0x67, 0xa6, 0xe1, 0x4d, 0x6d, 0x72,
	0x87, 0x1a, 0xb6, 0x39, 0xc1, 0x3c, 0xbe, 0xb1, 0x49, 0x0a, 0x74, 0x06, 0xdf, 0x37, 0x27, 0x18,
	0xbd, 0x0f, 0x4b, 0xfe, 0xd4, 0x36, 0x8e, 0x1d, 0x27, 0x30, 0xc6, 0xd6, 0xb1, 0x67, 0x7a, 0x17,
	0xec, 0xb5, 0x07, 0x16, 0x03, 0x86, 0xfc, 0xa9, 0xbd, 0xe9, 0x38, 0xc1, 0x1e, 0x2b, 0xa2, 0x6f,
	0x22, 0xdc, 0x81, 0x8e, 0x42, 0x5e, 0xb8, 0x2d, 0xe6, 0x58, 0x0d, 0xa9, 0x05, 0x11, 0x5b, 0xf6,
	0x39, 0x74, 0x69, 0x0d, 0xdf, 0xc5, 0x43, 0xeb, 0x44, 0x58, 0x51, 0x44, 0x3d, 0x16, 0x2e, 0xb6,
	0x4a, 0x30, 0x06, 0x32, 0x82, 0xa8, 0xbd, 0x02, 0xf3, 0x8e, 0xcf, 0x06, 0xb1, 0x40, 0x51, 0xe7,
	0x1c, 0x9f, 0xf6, 0x9d, 0x15, 0x10, 0x49, 0x87, 0x7a, 0x13, 0x68, 0x41, 0xcf, 0x1b, 0x9e, 0x11,
	0x61, 0xd3, 0xf1, 0x43, 0xfa, 0xc0, 0xc2, 0x72, 0x1c, 0x5f, 0x10, 0x7c, 0x13, 0x9a, 0x13, 0x3c,
	0x21, 0xea, 0x04, 0x0b, 0x6c, 0x3f, 0x3d, 0xe6, 0x2e, 0xbf, 0x3a, 0x03, 0x1f, 0x11, 0xe8, 0x83,
	0x63, 0x22, 0x18, 0x70, 0xbc, 0x89, 0xf9, 0x9c, 0x60, 0xd5, 0x58, 0x84, 0x1d, 0x03, 0x3e, 0x32,
	0x9f, 0x3f, 0x38, 0x26, 0x9b, 0xce, 0xf5, 0x1c, 0xb2, 0x86, 0x8e, 0xc7, 0xf3, 0x58, 0xd9, 0x73,
	0x2e, 0x8d, 0x10, 0x4c, 0xb3, 0x58, 0x89, 0x12, 0x13, 0x21, 0x52, 0xc7, 0x5e, 0x83, 0xb5, 0x19,
	0x42, 0x69, 0xd4, 0xc7, 0x3b, 0xd0, 0x3e, 0x77, 0xbc, 0xa7, 0x96, 0x7d, 0x6a, 0x8c, 0x2c, 0x0f,
	0x0f, 0x89, 0x7e, 0x43, 0x9d, 0xd3, 0x15, 0xbd, 0xc5, 0x0b, 0xb6, 0x05, 0x9c, 0x9c, 0x42, 0xa2,
	0x93, 0xb2, 0x45, 0x76, 0xce, 0x8d, 0x69, 0x30, 0xa4, 0xce, 0xe8, 0x8a, 0xde, 0x10, 0xf0, 0x7d,
	0xe7, 0xfc, 0x71, 0x30, 0x24, 0x2b, 0x40, 0x54, 0x51, 0xb2, 0xa7, 0x0c, 0xd7, 0x73, 0x5c, 0xec,
	0x05, 0x16, 0xf6, 0x0d, 0x66, 0x9a, 0xa3, 0x1e, 0xe8, 0x8a, 0xbe, 0x2a, 0x30, 0x0e, 0x43, 0x84,
	0x01, 0x2d, 0xcf, 0xaa, 0x4d, 0x5f, 0x3d, 0xf6, 0x57, 0xd1, 0x8d, 0x62, 0x7a, 0x6d, 0xfa, 0xfe,
	0xb1, 0xaf, 0x5d, 0x67, 0x6f, 0x7e, 0x25, 0xcd, 0x2a, 0xe2, 0x42, 0xfb, 0x03, 0xfe, 0x32, 0x57,
	0x1a, 0xc6, 0xd5, 0x1c, 0x9b, 0x8f, 0x52, 0x65, 0xac, 0x14, 0xb9, 0x55, 0x65, 0x9c, 0xcb, 0x54,
	0xe8, 0xdb, 0xc7, 0xe7, 0xaa, 0x6e, 0xa4, 0xb9, 0x54, 0xd3, 0x94, 0xe1, 0x3f, 0xb0, 0x38, 0xa4,
	0x6d, 0xc0, 0xf2, 0x13, 0x73, 0x4c, 0x2d, 0x10, 0x97, 0xd6, 0xd3, 0xc8, 0x05, 0x98, 0xa8, 0xf4,
	0x43, 0xcb, 0x6d, 0xea, 0xd3, 0xc9, 0xa5, 0xf8, 0xd3, 0xc9, 0xeb, 0x50, 0xb1, 0x7c, 0x83, 0x5c,
	0x8d, 0x01, 0x4b, 0x70, 0x5e, 0xd0, 0x17, 0x2c, 0x5f, 0xa7, 0xdf, 0xda, 0xdf, 0x86, 0x57, 0x1f,
	0x60, 0x1b, 0x13, 0xa6, 0x2b, 0xde, 0x6a, 0x89, 0x0d, 0xf6, 0xa6, 0x88, 0x0d, 0xee, 0xc5, 0x94,
	0xda, 0x38, 0x18, 0xdd, 0x81, 0xc5, 0xf0, 0xfd, 0x9e, 0xa3, 0x33, 0x0f, 0xfb, 0x67, 0xce, 0x78,
	0xf4, 0x88, 0x1b, 0xbf, 0xd2, 0x8a, 0xb4, 0xff, 0x9e, 0x87, 0x57, 0x32, 0x9b, 0xbf, 0xaa, 0x5b,
	0x33, 0xd1, 0xfd, 0xe2, 0x4b, 0x75, 0xbf, 0x94, 0xd9, 0x7d, 0x42, 0x7b, 0xa2, 0xf6, 0x9a, 0xeb,
	0x47, 0x71, 0xb0, 0xf6, 0xef, 0xf3, 0x70, 0xed, 0x91, 0xf9, 0x14, 0x27, 0xde, 0x5c, 0x0a, 0xad,
	0x06, 0x1f, 0xc3, 0x0a, 0x37, 0xe5, 0x87, 0x0f, 0xef, 0xa8, 0x7b, 0x6c, 0x89, 0x15, 0xc7, 0xa6,
	0xe9, 0xb2, 0xb6, 0x7d, 0xa2, 0x91, 0x92, 0xdb, 0x99, 0x59, 0x01, 0xc8, 0x4f, 0xf4, 0x21, 0x2c,
	0xc7, 0x5e, 0x61, 0x32, 0xfc, 0xc0, 0xb3, 0xec, 0x53, 0xbe, 0x85, 0x3a, 0xea, 0x63, 0x4c, 0x03,
	0x5a, 0xa6, 0xfd, 0x7e, 0x11, 0xd6, 0xb3, 0x46, 0x72, 0x55, 0x26, 0xda, 0xa5, 0xa8, 0x5f, 0x81,
	0x98, 0x6d, 0x63, 0xc2, 0x85, 0x9d, 0xd4, 0x95, 0xf8, 0x09, 0xac, 0xf3, 0xd9, 0x32, 0x86, 0xce,
	0xc4, 0x75, 0x7c, 0x8b, 0x5e, 0x77, 0xec, 0x91, 0x08, 0xe1, 0xdd, 0x5f, 0xe5, 0x28, 0x5b, 0x11,
	0x06, 0xbd, 0x27, 0xf6, 0xd1, 0x2f, 0xf2, 0x70, 0x33, 0xe5, 0x99, 0x2b, 0x49, 0xb2, 0x39, 0xb7,
	0x82, 0x33, 0x6e, 0x23, 0x61, 0x72, 0xd1, 0x2d, 0xd6, 0xf9, 0xcb, 0x3c, 0xa2, 0xa5, 0xbf, 0x31,
	0xbd, 0xcc, 0x53, 0x5b, 0xe2, 0xbd, 0xd6, 0x39, 0xe9, 0xbd, 0xd6, 0x94, 0x97, 0xb2, 0xe6, 0x53,
	0x5f, 0xca, 0x9a, 0xc0, 0x0a, 0x13, 0x64, 0x93, 0x3b, 0x4b, 0x87, 0xce, 0xf7, 0x78, 0xcb, 0x49,
	0x5f, 0x9c, 0x24, 0x81, 0xda, 0x7f, 0xcc, 0xc3, 0x52, 0xb2, 0xbd, 0xab, 0x59, 0x7f, 0x31, 0x0f,
	0x45, 0x69, 0x1e, 0x8c, 0xd9, 0xcf, 0x52, 0x95, 0x2e, 0x37, 0x94, 0xec, 0x47, 0xa9, 0xb4, 0x1d,
	0x40, 0xa4, 0xde, 0x23, 0x16, 0x47, 0xfc, 0x42, 0x46, 0x2f, 0xe7, 0xb7, 0xf0, 0x07, 0x91, 0xf8,
	0xa7, 0xf6, 0x87, 0x79, 0x68, 0x29, 0xa4, 0xae, 0x66, 0x56, 0x7e, 0x04, 0x0d, 0x31, 0x03, 0x52,
	0x5e, 0x4d, 0x4d, 0xaf, 0xf3, 0x31, 0xf1, 0xec, 0x9a, 0xd9, 0x77, 0x81, 0xf6, 0x15, 0xac, 0x84,
	0xf6, 0x5a, 0x3c, 0x71, 0xc7, 0x66, 0x20, 0xeb, 0x73, 0x13, 0x67, 0x84, 0x85, 0x07, 0x83, 0xfc,
	0x4e, 0x64, 0x0d, 0x14, 0xa8, 0xd8, 0xa1, 0x66, 0x0d, 0xfc, 0x79, 0x1e, 0x3a, 0x5b, 0xc2, 0x54,
	0x2f, 0xfb, 0x88, 0x39, 0xc7, 0xc9, 0x47, 0x1c, 0x67, 0x19, 0xe6, 0xce, 0x23, 0x87, 0x48, 0x51,
	0xe7, 0x5f, 0xa8, 0x0b, 0x0b, 0x1e, 0xfe, 0x76, 0x6a, 0x79, 0xdc, 0x47, 0xb5, 0xa0, 0x87, 0xdf,
	0x51, 0x0c, 0x75, 0x49, 0x7d, 0x8e, 0x6a, 0x84, 0x5d, 0x6c, 0x8f, 0x98, 0xe3, 0xa1, 0xac, 0x8b,
	0x4f, 0x74, 0x57, 0x35, 0x96, 0xcd, 0xcd, 0x0a, 0x69, 0x55, 0xdd, 0x74, 0xbf, 0x2a, 0x45, 0xbe,
	0x82, 0x68, 0x6e, 0xae, 0x4c, 0xc1, 0x67, 0xf9, 0x3d, 0x9c, 0xff, 0xf2, 0x2f, 0xb2, 0x5a, 0xbe,
	0xf5, 0x33, 0x6c, 0x8c, 0xad, 0x89, 0x15, 0xf0, 0xb7, 0xf1, 0x2b, 0x04, 0xb2, 0x47, 0x00, 0x89,
	0x10, 0xa6, 0x72, 0x32, 0x84, 0xe9, 0x47, 0xd0, 0x08, 0xd3, 0xf3, 0xd8, 0x3f, 0x62, 0x30, 0xfd,
	0xab, 0x2e, 0xa0, 0x54, 0x20, 0x24, 0x22, 0xee, 0xc4, 0xb2, 0xad, 0xc9, 0x74, 0x62, 0xc4, 0x53,
	0x5d, 0x5b, 0xbc, 0x20, 0xca, 0x28, 0x79, 0x07, 0xda, 0xe2, 0x89, 0xd9, 0x08, 0x99, 0x25, 0xbe,
	0xb6, 0x78, 0x41, 0x84, 0x4c, 0x0e, 0xc2, 0x34, 0x30, 0x8f, 0xc7, 0x98, 0xa6, 0x38, 0x56, 0x74,
	0xf1, 0x99, 0x15, 0x43, 0x05, 0xdf, 0x2d, 0x86, 0xaa, 0xfa, 0x3d, 0x62, 0xa8, 0x6a, 0x33, 0x63,
	0xa8, 0xee, 0x40, 0x27, 0xac, 0x94, 0x7c, 0x0e, 0x01, 0x89, 0xb2, 0xbd, 0xe8, 0x59, 0x84, 0x2f,
	0x62, 0xa2, 0x2d, 0x7b, 0x19, 0x92, 0x07, 0xa3, 0xa6, 0x9d, 0x85, 0x98, 0x8c, 0xfb, 0x67, 0x79,
	0xa8, 0x0f, 0x70, 0xb0, 0x69, 0x86, 0x21, 0xf4, 0x1f, 0xc1, 0xfc, 0xd0, 0x99, 0x4c, 0x4c, 0x7b,
	0xc4, 0x83, 0xd7, 0xd7, 0x39, 0x2f, 0x93, 0xb1, 0x6e, 0x6f, 0x31, 0x14, 0x5d, 0xe0, 0xaa, 0x7f,
	0x93, 0x52, 0x11, 0x7f, 0x93, 0x42, 0x5f, 0xb6, 0x37, 0xfd, 0x30, 0x3d, 0x89, 0x7f, 0xa1, 0xb7,
	0xa1, 0x85, 0x9f, 0xbb, 0x16, 0xd1, 0xc1, 0x62, 0x76, 0xdf, 0x26, 0x83, 0x87, 0xab, 0xaa, 0xbd,
	0x0a, 0xf3, 0xbc, 0x31, 0x34, 0x0f, 0xc5, 0xde, 0xf6, 0x76, 0x2b, 0x87, 0x00, 0xe6, 0xf4, 0xfe,
	0xa3, 0x83, 0x27, 0xfd, 0x56, 0x5e, 0xfb, 0x7b, 0x79, 0x68, 0x0f, 0x70, 0xd0, 0x1b, 0x8f, 0x9d,
	0x73, 0x3c, 0x12, 0xa3, 0xf8, 0x34, 0x3e, 0x8a, 0xeb, 0xe1, 0x28, 0x54, 0xcc, 0x4b, 0x8e, 0xe4,
	0x85, 0xdd, 0xf8, 0x8b, 0x3c, 0xd4, 0x37, 0xc7, 0xe6, 0xf0, 0xe9, 0x9e, 0xe5, 0xb3, 0x7f, 0x5c,
	0x60, 0xd1, 0xa4, 0xcc, 0x8e, 0x5e, 0xb0, 0x46, 0xe8, 0x5d, 0x1e, 0xd1, 0x59, 0xa0, 0xfd, 0x11,
	0x11, 0x25, 0x72, 0x15, 0x39, 0x2f, 0x20, 0xec, 0x45, 0x31, 0x7d, 0x3e, 0x4b, 0xca, 0x7c, 0x2a,
	0x06, 0xf4, 0x72, 0xdc, 0x80, 0x9e, 0x36, 0xdb, 0x73, 0xe9, 0xb3, 0x7d, 0x2b, 0x7a, 0x5c, 0xae,
	0xb7, 0xbd, 0xad, 0xf7, 0x07, 0x03, 0xf6, 0x86, 0xdf, 0x7e, 0xff, 0xe8, 0x51, 0x6f, 0xf0, 0xb0,
	0x95, 0x47, 0x0b, 0x50, 0xda, 0xda, 0xdd, 0xd6, 0x5b, 0x05, 0xed, 0x8f, 0xf3, 0x50, 0xff, 0xfa,
	0xcc, 0x0a, 0xf0, 0xcb, 0x0d, 0x59, 0xa9, 0xf2, 0xe2, 0x21, 0xcf, 0xf4, 0x0d, 0xbc, 0x54, 0x7f,
	0x17, 0xa1, 0x4d, 0x2d, 0x82, 0xa6, 0x6d, 0x87, 0xcb, 0xaf, 0x75, 0x00, 0x11, 0xa0, 0xba, 0x29,
	0xb4, 0x5f, 0xe4, 0xa1, 0x29, 0xe3, 0x5e, 0x0d, 0xef, 0x7d, 0x0f, 0xe6, 0xb1, 0x1d, 0x78, 0x56,
	0xe8, 0x5e, 0x5a, 0x4c, 0xd9, 0x04, 0xba, 0xc0, 0xd1, 0xfe, 0x6e, 0x1e, 0x5a, 0x4a, 0xdf, 0x7e,
	0xd8, 0x5e, 0x28, 0xeb, 0x12, 0xf5, 0x62, 0x0d, 0x56, 0xa2, 0x99, 0xa0, 0x11, 0x94, 0xa1, 0x22,
	0xec, 0xc3, 0x52, 0xb2, 0xe8, 0xca, 0x54, 0xcc, 0xe1, 0xd8, 0x0a, 0x5f, 0x43, 0xae, 0xe8, 0xe2,
	0x93, 0x2c, 0x18, 0x0d, 0x26, 0x57, 0x97, 0xb1, 0x0b, 0xab, 0x12, 0x54, 0xed, 0xe6, 0x12, 0x2c,
	0xd2, 0xb2, 0xd8, 0x1a, 0xd7, 0xa1, 0x7a, 0x68, 0xd9, 0xa7, 0xe2, 0xb3, 0x0a, 0x15, 0xf6, 0xe9,
	0x8e, 0x2f, 0x34, 0x4c, 0x4d, 0x12, 0xb2, 0x81, 0x5d, 0xf1, 0xab, 0xc6, 0x5f, 0xe2, 0xcc, 0x27,
	0x5f, 0xe2, 0xbc, 0xcc, 0xff, 0x5b, 0x68, 0xff, 0xae, 0x48, 0x94, 0xce, 0x20, 0xf1, 0x0a, 0x65,
	0xa8, 0xf1, 0x7e, 0x09, 0x35, 0x1e, 0x0c, 0x6f, 0x48, 0xe9, 0x44, 0x6f, 0xb1, 0x39, 0x9b, 0x55,
	0x93, 0x9d, 0xab, 0x2a, 0xaf, 0x4c, 0x8f, 0x48, 0xf6, 0xc3, 0x99, 0x0f, 0xa0, 0x25, 0x2b, 0x18,
	0xb4, 0xa5, 0xe2, 0x25, 0x9e, 0xc9, 0x94, 0x0d, 0xae, 0xb4, 0x89, 0xe8, 0xe5, 0xd0, 0xd2, 0xe5,
	0x5f, 0x0e, 0x45, 0x77, 0xa1, 0xce, 0x54, 0x43, 0x91, 0x39, 0x50, 0x96, 0x63, 0xf6, 0x95, 0x3f,
	0xe8, 0xd2, 0x6b, 0x0c, 0x93, 0xa7, 0x0e, 0x7c, 0x01, 0xad, 0x90, 0x15, 0x88, 0xca, 0x73, 0xd9,
	0x95, 0x9b, 0x21, 0x32, 0xaf, 0x7f, 0x03, 0x4a, 0xf4, 0x5f, 0xc4, 0xe6, 0x65, 0xfb, 0x32, 0xfb,
	0x3b, 0x32, 0x9d, 0x96, 0x68, 0xeb, 0x9c, 0xbf, 0x2c, 0x40, 0x69, 0x6f, 0x77, 0x70, 0xd4, 0xca,
	0xa1, 0x0a, 0x94, 0xbf, 0x7a, 0xdc, 0xd7, 0x7f, 0xda, 0xca, 0x6b, 0xbf, 0x2a, 0x50, 0x07, 0x4e,
	0xda, 0x22, 0x90, 0x53, 0x70, 0x03, 0x4a, 0x36, 0x7e, 0x1e, 0xf0, 0x10, 0xbe, 0x18, 0x75, 0x52,
	0x82, 0x3e, 0x8b, 0xdd, 0xde, 0xec, 0x48, 0xac, 0x64, 0x4c, 0xba, 0x7a, 0x75, 0xa3, 0x3d, 0xa8,
	0x0e, 0xcd, 0xe1, 0x19, 0x36, 0xc8, 0x34, 0x8a, 0x05, 0x7b, 0x67, 0xe6, 0xd6, 0x70, 0xc7, 0x17,
	0xb7, 0xb7, 0x48, 0x1d, 0xb2, 0x02, 0x58, 0x87, 0x61, 0xf8, 0x5b, 0xd6, 0x22, 0x4a, 0x89, 0x2c,
	0x79, 0x71, 0x98, 0xcb, 0x99, 0x87, 0x79, 0x6e, 0x96, 0x07, 0xbb, 0x07, 0x10, 0xb5, 0xaa, 0x3e,
	0x0f, 0x5b, 0x83, 0x85, 0xcd, 0xc7, 0xbb, 0x7b, 0xfc, 0x7d, 0xd8, 0x2a, 0xcc, 0x6f, 0x3d, 0xd6,
	0xf5, 0xfe, 0xfe, 0x51, 0xab, 0x40, 0x3e, 0xfa, 0xba, 0x7e, 0xa0, 0xf7, 0xb7, 0x5b, 0x45, 0xed,
	0x1f, 0xe7, 0x61, 0x31, 0x8a, 0x36, 0xa1, 0x84, 0xe8, 0x8d, 0xf3, 0x11, 0x94, 0xd9, 0xf0, 0x95,
	0x5b, 0x3e, 0x05, 0xf3, 0x36, 0x1b, 0x32, 0xc3, 0xd6, 0xb6, 0xa0, 0x1c, 0x76, 0x66, 0xef, 0xa0,
	0x47, 0x9b, 0xcf, 0x49, 0x79, 0x90, 0x79, 0xf2, 0xfb, 0xb0, 0x47, 0x9f, 0xb4, 0x2e, 0x92, 0x25,
	0x1f, 0x1c, 0xf5, 0xf6, 0xfa, 0xad, 0x12, 0x01, 0x13, 0xfc, 0xfe, 0x76, 0xab, 0xac, 0xfd, 0xa3,
	0x3c, 0x20, 0xf6, 0xdf, 0x6e, 0x96, 0x7d, 0x1a, 0x75, 0xe9, 0x43, 0xb5, 0x4b, 0x3c, 0x3f, 0x33,
	0x89, 0xa8, 0xf6, 0x68, 0x5b, 0xea, 0xd1, 0xe0, 0xa8, 0xa7, 0x1f, 0xd1, 0xc7, 0xb4, 0x5b, 0x50,
	0xdb, 0xdd, 0xdf, 0x3d, 0xda, 0xed, 0xed, 0xed, 0x7e, 0x13, 0x4e, 0x91, 0xfe, 0x78, 0x7f, 0x9f,
	0x7c, 0x14, 0x50, 0x13, 0xaa, 0x47, 0x7d, 0xfd, 0xd1, 0xee, 0x7e, 0xef, 0x88, 0x00, 0x8a, 0x9a,
	0x1b, 0x66, 0xbc, 0x46, 0xfd, 0xd9, 0x50, 0xfb, 0xf3, 0x8a, 0x92, 0xea, 0x95, 0xd1, 0x9b, 0x9b,
	0xa2, 0x37, 0x2d, 0xa8, 0x6d, 0xef, 0x0e, 0xb6, 0x0e, 0xf6, 0xf7, 0xfb, 0x5b, 0xac, 0x4b, 0xec,
	0x0d, 0x5f, 0xfe, 0x99, 0xe7, 0x5e, 0xca, 0x90, 0x8c, 0xe0, 0xa6, 0x7f, 0x5a, 0xa6, 0xfe, 0x42,
	0x09, 0x4e, 0x4e, 0xc4, 0xb6, 0x12, 0xe7, 0x11, 0xf5, 0x2a, 0x4c, 0xd1, 0x4c, 0x59, 0x38, 0x39,
	0x04, 0x84, 0xf5, 0xa9, 0x07, 0x4d, 0x47, 0xcc, 0x26, 0x27, 0x52, 0x90, 0xa3, 0x74, 0x93, 0x53,
	0xad, 0x37, 0x1c, 0x05, 0x86, 0x3e, 0x83, 0xba, 0xc8, 0x85, 0x8b, 0x4e, 0x4f, 0x3c, 0x0d, 0x2e,
	0xaa, 0x5e, 0xb3, 0x25, 0x08, 0xfd, 0xdf, 0x8b, 0x30, 0xe6, 0xcc, 0xc5, 0x58, 0x58, 0xfe, 0x4b,
	0xfc, 0x7f, 0x2f, 0x44, 0xd9, 0x21, 0xc6, 0xdc, 0xfa, 0x7f, 0x2b, 0x52, 0x63, 0x68, 0x4e, 0x33,
	0x8d, 0xcf, 0x63, 0x2e, 0x96, 0x26, 0x2f, 0x18, 0x5c, 0xd8, 0x43, 0x52, 0x81, 0xa8, 0x51, 0xa2,
	0x6b, 0x5c, 0xd7, 0x62, 0xa2, 0x9a, 0xe8, 0x30, 0xd7, 0xb6, 0x3e, 0x86, 0x95, 0xb1, 0x33, 0x34,
	0xc7, 0x72, 0x8c, 0x96, 0xf2, 0xbf, 0x62, 0x4b, 0xb4, 0x38, 0x9a, 0xd0, 0x28, 0xd1, 0x44, 0x9c,
	0xe6, 0x85, 0xcc, 0xd3, 0x5c, 0x99, 0x75, 0x35, 0xbf, 0x05, 0x4d, 0xd1, 0x41, 0xd5, 0xc7, 0x22,
	0xfa, 0x2d, 0x1c, 0x2d, 0xfc, 0x4d, 0x60, 0xc9, 0x93, 0xc1, 0xfd, 0x2c, 0x04, 0x1a, 0xb9, 0x31,
	0x98, 0x0f, 0xe5, 0xd4, 0x33, 0x27, 0x21, 0xbd, 0x5a, 0xe8, 0x43, 0x21, 0x60, 0x41, 0xef, 0x3d,
	0x40, 0xa1, 0x1f, 0x82, 0x26, 0x0b, 0x11, 0x76, 0x2e, 0x1e, 0xd4, 0x12, 0x25, 0x03, 0x51, 0x80,
	0x3e, 0x81, 0xd5, 0x73, 0xca, 0x03, 0x0d, 0xce, 0x26, 0xc9, 0xcc, 0xf3, 0x29, 0x62, 0xaf, 0x21,
	0x2e, 0xb1, 0x72, 0xc6, 0x9b, 0x2e, 0xec, 0x21, 0xff, 0x97, 0x92, 0x25, 0x58, 0x1c, 0x04, 0x8e,
	0xbb, 0xef, 0x8c, 0xf0, 0x96, 0xe3, 0x09, 0xab, 0x84, 0xb6, 0x0e, 0x6b, 0x3a, 0x3e, 0xf1, 0xb0,
	0x7f, 0xf6, 0x75, 0x54, 0x4d, 0x14, 0x7e, 0x0c, 0x9d, 0xbe, 0x3d, 0xf4, 0x2e, 0xdc, 0xd8, 0x73,
	0x16, 0xea, 0x2b, 0x15, 0xf9, 0xc4, 0x2b, 0x15, 0x1f, 0x43, 0x67, 0x1b, 0x7f, 0x87, 0x7a, 0x1f,
	0xc1, 0xe2, 0x63, 0x9b, 0xac, 0xed, 0xcb, 0x55, 0x23, 0x22, 0x70, 0xbc, 0xd2, 0xc6, 0x47, 0x50,
	0xa2, 0x3b, 0xef, 0x3d, 0xa8, 0xd2, 0x8c, 0xdd, 0x41, 0xe0, 0x61, 0x73, 0x82, 0x78, 0x90, 0x1e,
	0x05, 0x75, 0xe5, 0x0f, 0x2d, 0x77, 0x33, 0x7f, 0x27, 0xbf, 0xf1, 0xaf, 0xde, 0x80, 0x72, 0x6f,
	0x34, 0xb1, 0x6c, 0xb4, 0x01, 0x73, 0x2c, 0x61, 0x0a, 0x2d, 0x86, 0xd7, 0x4f, 0x94, 0x8f, 0xd1,
	0x6d, 0xab, 0x40, 0x22, 0x5f, 0xe5, 0xd0, 0x07, 0x30, 0xdf, 0x1b, 0xd1, 0x40, 0x4c, 0xd4, 0x8e,
	0x02, 0x27, 0x45, 0x15, 0x4e, 0x47, 0x79, 0x83, 0x45, 0xcb, 0x11, 0xf9, 0x82, 0xa9, 0xa1, 0xa2,
	0x21, 0x45, 0x29, 0xcd, 0xaa, 0xf5, 0x11, 0xcc, 0x73, 0xff, 0x37, 0xea, 0x84, 0x5d, 0x91, 0x98,
	0x55, 0x17, 0xc5, 0xa0, 0xac, 0xda, 0x80, 0x72, 0x30, 0xd5, 0x91, 0x8b, 0x5e, 0x0d, 0x51, 0x53,
	0xb3, 0x6e, 0xba, 0xaf, 0x64, 0x96, 0x33, 0xa2, 0x1f, 0x03, 0xe8, 0x34, 0x32, 0xe0, 0x25, 0x47,
	0x7e, 0x17, 0x16, 0x44, 0x4e, 0x1e, 0x0a, 0xff, 0xec, 0x46, 0x49, 0xdb, 0x13, 0x35, 0x95, 0xd4,
	0x3d, 0x2d, 0x87, 0xee, 0x41, 0x25, 0xcc, 0x90, 0x41, 0x9c, 0xc1, 0xc5, 0x53, 0x66, 0xb2, 0x5a,
	0xfd, 0x0c, 0x2a, 0x61, 0x14, 0x7e, 0x58, 0x37, 0x16, 0xf9, 0xdf, 0xed, 0x24, 0xe0, 0xac, 0x32,
	0x86, 0x95, 0x8c, 0x48, 0x78, 0xf4, 0x46, 0x54, 0x25, 0x3b, 0xec, 0xbe, 0xab, 0xbd, 0x00, 0x2b,
	0xec, 0x63, 0xf8, 0xae, 0x8e, 0xe8, 0x63, 0xfc, 0x25, 0xa2, 0x6e, 0x27, 0x01, 0x8f, 0x06, 0x28,
	0xd2, 0x0e, 0xc3, 0x01, 0xc6, 0x52, 0x31, 0xc3, 0x01, 0x2a, 0xa9, 0x97, 0x5a, 0x0e, 0xfd, 0x75,
	0xe8, 0xa4, 0x65, 0x2d, 0xa2, 0xd7, 0x42, 0xbe, 0x99, 0x95, 0xf0, 0xd8, 0xbd, 0x3e, 0x0b, 0x85,
	0x51, 0xff, 0x02, 0x20, 0x8a, 0x39, 0x47, 0x2b, 0xe1, 0x00, 0xd4, 0xe8, 0xfd, 0xee, 0x52, 0xb2,
	0x40, 0xae, 0xcf, 0x73, 0xb9, 0xa4, 0xfa, 0x6a, 0x46, 0x98, 0x54, 0x5f, 0x4e, 0xfb, 0xd2, 0x72,
	0xe8, 0x73, 0x80, 0xc8, 0x58, 0x22, 0xea, 0x27, 0xcc, 0x27, 0x59, 0x3b, 0xe7, 0x0b, 0x80, 0x48,
	0x35, 0x14, 0xb5, 0x13, 0xda, 0xb7, 0x68, 0x3d, 0xa6, 0x6a, 0x6b, 0x39, 0x74, 0xc8, 0x54, 0x5f,
	0x59, 0x9d, 0x43, 0xd7, 0xe2, 0xc8, 0x8a, 0x9a, 0xd7, 0x5d, 0xcf, 0x2a, 0x16, 0x3d, 0xaa, 0x4a,
	0x1a, 0x22, 0x5a, 0x95, 0xf2, 0x92, 0xd5, 0x3e, 0x65, 0x8c, 0xe8, 0x4b, 0x68, 0x27, 0x34, 0x4c,
	0xc1, 0x0e, 0xb2, 0x54, 0xcf, 0x2c, 0x5a, 0x7f, 0x05, 0x6a, 0x72, 0x98, 0x34, 0x5a, 0x93, 0x8f,
	0xa5, 0xba, 0x73, 0xb3, 0x29, 0xc8, 0x3a, 0xad, 0xa0, 0x90, 0xa2, 0xe7, 0x66, 0x51, 0xe8, 0xb1,
	0x2c, 0x57, 0x1e, 0xf9, 0x2f, 0xe6, 0x23, 0x99, 0x5d, 0xd0, 0x5d, 0x4e, 0x29, 0x09, 0x49, 0x48,
	0xee, 0x05, 0x41, 0x22, 0xe9, 0xbc, 0x10, 0x24, 0xe2, 0xbe, 0x08, 0x46, 0x42, 0x32, 0x71, 0x08,
	0x12, 0x49, 0x8b, 0x8c, 0x20, 0x11, 0xb7, 0x87, 0x68, 0x39, 0xb4, 0x0d, 0x35, 0xf9, 0x7d, 0x2a,
	0x31, 0x15, 0x29, 0x6f, 0x5e, 0x75, 0x57, 0xd2, 0x8a, 0x42, 0x2a, 0xf2, 0x73, 0x51, 0x82, 0x4a,
	0xca, 0x13, 0x55, 0x82, 0x4a, 0xe2, 0x75, 0x29, 0x2d, 0x87, 0x1e, 0xd0, 0x4c, 0xe3, 0x28, 0x34,
	0x00, 0x75, 0xc3, 0xc9, 0x4b, 0xc4, 0x11, 0x74, 0x57, 0x53, 0xcb, 0x64, 0x42, 0x51, 0x34, 0xbb,
	0x44, 0x28, 0x11, 0x21, 0x2f, 0x11, 0x8a, 0x85, 0xbf, 0x33, 0x42, 0x4a, 0xd8, 0xb9, 0x20, 0x94,
	0x16, 0xbd, 0x2e, 0x08, 0x25, 0xe3, 0xd4, 0xe9, 0xfe, 0x6f, 0xa8, 0x59, 0x0a, 0x68, 0x5d, 0x6d,
	0x56, 0xc9, 0x6a, 0xe8, 0xae, 0xa5, 0x17, 0x86, 0x67, 0x29, 0x11, 0xb9, 0x2a, 0xce, 0x52, 0x56,
	0x48, 0x6b, 0xf6, 0xb9, 0x6c, 0xa8, 0xd1, 0xa9, 0xa2, 0x5f, 0xa9, 0x71, 0xae, 0xa2, 0x5f, 0x29,
	0x01, 0xad, 0x8c, 0xeb, 0xc4, 0x03, 0x43, 0x05, 0xd7, 0xc9, 0x88, 0x36, 0x15, 0x5c, 0x27, 0x35,
	0x9e, 0x54, 0xcb, 0xa1, 0x3d, 0x40, 0xc9, 0xa8, 0x3e, 0x74, 0x5d, 0x3e, 0xef, 0x29, 0xd6, 0x9b,
	0xac, 0xb1, 0x3e, 0xa2, 0x79, 0x48, 0x0a, 0xa9, 0x48, 0xe0, 0x48, 0xa3, 0xd3, 0xcd, 0x28, 0x0d,
	0xc9, 0xc5, 0x22, 0x44, 0x04, 0xb9, 0xf4, 0x68, 0x13, 0x41, 0x2e, 0x2d, 0xac, 0x84, 0x5d, 0xf8,
	0x19, 0x11, 0x14, 0xe2, 0xc2, 0x9f, 0x1d, 0xdf, 0x21, 0x2e, 0xfc, 0x59, 0x61, 0x18, 0x5a, 0x0e,
	0x1d, 0xc3, 0x72, 0xba, 0xd7, 0x1f, 0xbd, 0xce, 0xff, 0x03, 0x7b, 0x56, 0x74, 0x43, 0xf7, 0xb5,
	0xd9, 0x48, 0xe1, 0x46, 0x88, 0xfb, 0x94, 0xc5, 0x46, 0xc8, 0xf0, 0x6d, 0x8b, 0x8d, 0x90, 0xea,
	0x8a, 0xa6, 0x14, 0x3b, 0x69, 0x16, 0x45, 0x21, 0x2c, 0xcc, 0xb0, 0x36, 0x66, 0x6d, 0x86, 0xc3,
	0xe8, 0xc5, 0x45, 0xe1, 0x24, 0x14, 0x7d, 0xcc, 0x70, 0xac, 0x76, 0xd7, 0xb3, 0x8a, 0x65, 0x89,
	0x57, 0xcd, 0x72, 0x90, 0x24, 0xde, 0xd4, 0x1c, 0x13, 0x49, 0xe2, 0x4d, 0xc9, 0xc9, 0x60, 0x44,
	0x13, 0xa9, 0x11, 0xd2, 0x59, 0x4f, 0x4d, 0x3f, 0x11, 0x44, 0xd3, 0x73, 0x2a, 0xb4, 0x1c, 0xfa,
	0x69, 0x14, 0x1b, 0x2d, 0xcd, 0x1a, 0xba, 0x11, 0xf6, 0x25, 0x23, 0xa8, 0xba, 0xfb, 0xea, 0x0c,
	0x8c, 0x50, 0xaa, 0x4b, 0xfb, 0x2b, 0x44, 0x69, 0xa1, 0xb2, 0xfe, 0x9d, 0x51, 0x48, 0x75, 0x99,
	0xff, 0xa4, 0x18, 0xa7, 0x1e, 0xfd, 0x9b, 0x60, 0x92, 0x7a, 0xe2, 0x0f, 0x0e, 0x93, 0xd4, 0x63,
	0x7f, 0x46, 0xa8, 0xe5, 0x90, 0x41, 0xfd, 0xc6, 0x49, 0xcb, 0x1f, 0xd2, 0x5e, 0x6c, 0x31, 0xee,
	0xde, 0x78, 0x91, 0xe9, 0x90, 0x9d, 0xbd, 0xf4, 0x64, 0x63, 0x71, 0xf6, 0x66, 0xa6, 0x35, 0x77,
	0x5f, 0x9b, 0x8d, 0x24, 0xb7, 0x91, 0x12, 0x0e, 0x28, 0xb5, 0x91, 0x1d, 0x4e, 0x28, 0xb5, 0x91,
	0x15, 0x51, 0x18, 0xb5, 0x91, 0xfc, 0x33, 0x50, 0xb9, 0x8d, 0xcc, 0xbf, 0x29, 0x95, 0xdb, 0xc8,
	0xf8, 0x3f, 0x51, 0x2d, 0x87, 0xde, 0x85, 0xd2, 0xa1, 0x65, 0x9f, 0x0a, 0x25, 0x4f, 0xf2, 0x35,
	0x74, 0x9b, 0x32, 0x28, 0x94, 0x3f, 0x64, 0x7b, 0x19, 0x8a, 0xee, 0xcf, 0xb8, 0x6d, 0xad, 0xbb,
	0x92, 0x56, 0x24, 0x53, 0x09, 0xa3, 0xf4, 0x25, 0x2a, 0xf1, 0x3c, 0x02, 0x89, 0x8a, 0x1a, 0xd4,
	0xcf, 0xee, 0x85, 0x58, 0xe8, 0xbc, 0xb8, 0x17, 0xd2, 0x03, 0xf0, 0xc5, 0xbd, 0x90, 0x16, 0x6f,
	0xaf, 0xe5, 0xd0, 0xb7, 0xb0, 0x3e, 0xe3, 0xef, 0xae, 0xd1, 0x4d, 0xe1, 0x24, 0x78, 0xd1, 0x1f,
	0x8b, 0x77, 0xdf, 0xbc, 0x04, 0x66, 0x24, 0x60, 0x4b, 0x26, 0x9c, 0x50, 0xc0, 0x4e, 0x9a, 0x75,
	0xb2, 0xb8, 0xeb, 0x1e, 0xa0, 0xa4, 0xb5, 0x07, 0x85, 0x7a, 0x5b, 0x86, 0x1d, 0x28, 0x8b, 0xda,
	0x26, 0xd4, 0x15, 0xf3, 0x90, 0x90, 0xc2, 0xd2, 0x6c, 0x46, 0x33, 0x68, 0x28, 0xa6, 0x22, 0x41,
	0x23, 0xcd, 0x7e, 0x34, 0x43, 0x6d, 0x90, 0xcd, 0x46, 0x62, 0x5e, 0x52, 0x4c, 0x49, 0x59, 0x14,
	0x3e, 0x07, 0x88, 0x2c, 0x48, 0xa1, 0x62, 0x77, 0xc9, 0xda, 0x9b, 0xef, 0x43, 0x68, 0xa8, 0xbb,
	0x6d, 0xba, 0xd6, 0xed, 0x53, 0xcf, 0x1d, 0x6e, 0xb6, 0xc3, 0xbf, 0x36, 0xe2, 0xca, 0x81, 0xff,
	0x4d, 0x25, 0xfc, 0xbb, 0xa2, 0xe3, 0x39, 0xfa, 0x54, 0xe9, 0x07, 0xff, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0xa8, 0xb9, 0xb4, 0x7c, 0x7c, 0x86, 0x00, 0x00,
}
